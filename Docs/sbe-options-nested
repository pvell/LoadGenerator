import sqlite3
import xml.etree.ElementTree as ET
from multiprocessing import Pool, cpu_count

# Function to determine Sub ID
def extract_sub_id(element):
    sub_id_element = element.find('.//fixml:Sub', ns)
    return sub_id_element.get('ID') if sub_id_element is not None else None

# Function to extract attribute values from the XML elements
def extract_attributes(element, attribute_names):
    return [element.get(attr) for attr in attribute_names]

# Function to insert data into the database
def insert_data(records):
    conn = sqlite3.connect('trades.db')
    cursor = conn.cursor()
    cursor.executemany('INSERT INTO trades VALUES (?, ?, ?, ?, ?, ?)', records)
    conn.commit()
    conn.close()

# Connect to the SQLite database and create the table
conn = sqlite3.connect('trades.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS trades (
                    Quantity INTEGER,
                    Side TEXT,
                    Pty_ID TEXT,
                    Pty_R TEXT,
                    Sub_ID TEXT,
                    Rpt_ID TEXT
                 )''')
conn.close()

# Define the namespace
ns = {'fixml': 'http://www.fixprotocol.org/FIXML-4-4'}

# Parse the XML data and extract the required attributes
print("Parsing the XML data...")
tree_trade = ET.parse('path_to_your_large_xml.xml')
root_trade = tree_trade.getroot()

# Number of CPU cores to use for parallel processing (adjust this as needed)
num_cores = min(cpu_count(), 29)

# Function to process a batch of TrdCaptRpt elements
def process_batch(trade_batch):
    records = []
    for trd_capt_rpt in trade_batch:
        quantity, side, rpt_id = extract_attributes(trd_capt_rpt, ['LastQty', 'Side', 'RptID'])
        for rpt_side in trd_capt_rpt.findall('fixml:RptSide', ns):
            for pty in rpt_side.findall('fixml:Pty', ns):
                pty_id, pty_r, sub_id = extract_attributes(pty, ['ID', 'R']), extract_sub_id(pty)
                records.append((quantity, side, pty_id, pty_r, sub_id, rpt_id))

    insert_data(records)

# Split the TrdCaptRpt elements into batches
trade_batches = [list(root_trade[i:i + 1000]) for i in range(0, len(root_trade), 1000)]

# Create a pool of worker processes
with Pool(processes=num_cores) as pool:
    pool.map(process_batch, trade_batches)

print("Data has been successfully stored in the SQLite database.")
