Tell about trade cancels and trade correction
finish MTP execution
try out below scenarios with bulk quotes:
1. send 2 limit buy and sell limits orders that are booked and send a bulk quote that would cross/lock with sitting orders. Bulkquote should be cancelled
Execute same aabove scenario with same firm sending both the limit orders and bulk quote and have MTP param defined and see that it works as approitae.

@venkat: please get the new code for generate_message from sbe_load_generator.py


ReadMe SBE:
SBE Load Generator 
The SBE Load Generator script is designed to simulate load on the SBE server by generating and sending various types of messages at a controlled rate. This script reads configuration details from config.ini and connections.cfg files and sends messages over TCP connections to the SBE ports.

Prerequisites
Python 3.x should be installed on your system.
Ensure that the required libraries (socket, struct, time, string, random, configparser, and sbe_encoder_decoder) are properly installed.

Configuration
Open the config.ini file and configure the following parameters:
message_rate: The rate at which messages will be sent per second.
duration: The duration for which the load simulation should run in seconds.
Open the connections.cfg file and configure connection details for each session. The following details are required for each session:
host: Hostname or IP address of the SBE server.
port: Port number to connect to.
user: User name for authentication.
password: Password for authentication.
EFID: EFID for the session.

Update the security_ids parameter with the list of security IDs you want to use.

Running the Script
Ensure that all the required configurations are properly set in the config.ini and connections.cfg files.

Open a terminal and navigate to the directory containing the script.

Run the script using the following command:

Copy code
python sbe_load_generator.py


Script Execution
The script will establish connections to the SBE server for each session specified in the connections.cfg file.

It will generate messages based on the specified weights for each message type in the config.ini file.

The script will send messages to the server at the specified message rate for the specified duration.

During execution, the script will print the encoded message for each message sent.

After the specified duration, the script will close the connections and display the total number of active sessions.

Note

Ensure that the sbe_encoder_decoder module is correctly imported and properly placed in the same folder as sbe_load_generator.py

Any order parameters that need to be updated, can be done by editing NewOrderSingle message structure in sbe_load_generator.py








FIX Load Generator
Introduction
The FIX Load Generator is a tool designed to simulate a high load of FIX messages distributed across predefined ports. It utilizes the QuickFIX library to establish connections with multiple sessions and send various types of FIX messages. This document will guide you through the setup, configuration, and usage of the FIX Load Generator.

Prerequisites
Before using the FIX Load Generator, ensure you have the following:

Python installed (version 3.6 or higher).
Required Python packages: quickfix


Installation
Clone or download the code repository to your local machine.

Install the required Python packages:

pip install quickfix

Configuration
config.ini: Open the config.ini file in the root directory of the project. This file contains various configuration parameters for the load generator.

LoadGenerator Section:

connection_config_file: The path to the QuickFIX connection configuration file.
log_file: The path where log files will be generated.
message_rate: The rate (messages per second) at which messages will be generated.
send_duration: The duration (in seconds) for which the messages will be sent.
symbol: The symbol for which trading messages will be generated.
MessageTypes Section: Define the weight of each message type. The higher the weight, the more frequently that message type will be sent.

connection_config_file: Configure your QuickFIX session details in this file. Each section should represent a unique session with a distinct SenderCompID and TargetCompID. Ensure you have defined the SenderCompID to EFID mapping in the [EFID] section for each session.


Usage
Open a terminal and navigate to the directory containing the load generator code.

Run the load generator:

python load_generator.py

Output
The load generator will display log messages indicating the progress and status of the load generation process.

Log files will be generated in the specified log_directory (default is "log"). Each log file will be named with a timestamp.

Customization
You can modify the generate_message method to customize the content of each type of FIX message.

Adjust the weights of message types in the MessageTypes section of the config.ini file to simulate different load scenarios.
















[RateChanges]
0 = 0, 0
10 = 10, 20
20 = 20, 15
30 = 30, 10

[EFID]
MEOPF4 = MT02
MEOPF6 = MT03
MEOPVF1 = MT02
MEOPVF3 = MT03
~                  


<quickfix.Session; proxy of <Swig Object of type 'FIX::Session *' at 0x7f2f82e68b40> >
EFID mapping not found for SenderCompID: MEOPVF1
Traceback (most recent call last):
  File "/home/pvellanki/work/FIX/test.py", line 326, in <module>
    app.run()
  File "/home/pvellanki/work/FIX/test.py", line 296, in run
    message = self.generate_message(load[message_count], session_id)
  File "/home/pvellanki/work/FIX/test.py", line 168, in generate_message
    party_group.setField(448, efid)
UnboundLocalError: local variable 'efid' referenced before assignment
Segmentation fault

