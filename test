import struct

def encode_message(
    block_length, template_id, schema_id, version,
    cl_ord_id, mpid, symbol, symbol_sfx, side, order_qty, ord_type, price,
    time_in_force, order_capacity, cust_order_capacity, exec_inst,
    peg_offset_value, peg_price_type, expire_time, min_qty, display_qty,
    display_method, reserve_replenish_timing, display_min_incr, locate_reqd,
    reprice_frequency, reprice_behavior, cancel_group_id, stp_group_id,
    self_trade_prevention, risk_group_id, lnk_id
):
    # Check input field types
    if not isinstance(block_length, int) or not isinstance(template_id, int) or not isinstance(schema_id, int) or not isinstance(version, int):
        raise ValueError("Invalid field type. Expected integer for block_length, template_id, schema_id, and version.")
    if not isinstance(cl_ord_id, str) or not isinstance(mpid, str) or not isinstance(symbol, str) or not isinstance(symbol_sfx, str):
        raise ValueError("Invalid field type. Expected string for cl_ord_id, mpid, symbol, and symbol_sfx.")
    if not isinstance(side, int) or not isinstance(order_qty, int) or not isinstance(ord_type, int):
        raise ValueError("Invalid field type. Expected integer for side, order_qty, and ord_type.")
    if not isinstance(price, float) or not isinstance(time_in_force, int) or not isinstance(order_capacity, int) or not isinstance(cust_order_capacity, int):
        raise ValueError("Invalid field type. Expected float for price. Expected integer for time_in_force, order_capacity, and cust_order_capacity.")
    if not isinstance(exec_inst, int) or not isinstance(peg_offset_value, float) or not isinstance(peg_price_type, int):
        raise ValueError("Invalid field type. Expected integer for exec_inst and peg_price_type. Expected float for peg_offset_value.")
    if not isinstance(expire_time, float) or not isinstance(min_qty, int) or not isinstance(display_qty, int):
        raise ValueError("Invalid field type. Expected float for expire_time. Expected integer for min_qty and display_qty.")
    if not isinstance(display_method, int) or not isinstance(reserve_replenish_timing, int) or not isinstance(display_min_incr, int):
        raise ValueError("Invalid field type. Expected integer for display_method, reserve_replenish_timing, and display_min_incr.")
    if not isinstance(locate_reqd, int) or not isinstance(reprice_frequency, int) or not isinstance(reprice_behavior, int):
        raise ValueError("Invalid field type. Expected integer for locate_reqd, reprice_frequency, and reprice_behavior.")
    if not isinstance(cancel_group_id, int) or not isinstance(stp_group_id, int) or not isinstance(self_trade_prevention, int):
        raise ValueError("Invalid field type. Expected integer for cancel_group_id, stp_group_id, and self_trade_prevention.")
    if not isinstance(risk_group_id, int) or not isinstance(lnk_id, int):
        raise ValueError("Invalid field type. Expected integer for risk_group_id and lnk_id.")

    # Encode the fields
    header = struct.pack(">HBBB", 0, block_length, template_id, schema_id, version)
    cl_ord_id_bytes = cl_ord_id.encode("ascii") + b"\x00"
    mpid_bytes = mpid.encode("ascii") + b"\x00"
    symbol_bytes = symbol.encode("ascii") + b"\x00"
    symbol_sfx_bytes = symbol_sfx.encode("ascii") + b"\x00"
    body = struct.pack(">H8s8s4s4siihdiBBBdidiBBHHBHH",
                       len(cl_ord_id_bytes),
                       cl_ord_id_bytes,
                       mpid_bytes,
                       symbol_bytes,
                       symbol_sfx_bytes,
                       side, order_qty, ord_type, price,
                       time_in_force, order_capacity, cust_order_capacity, exec_inst,
                       peg_offset_value, peg_price_type, expire_time, min_qty, display_qty,
                       display_method, reserve_replenish_timing, display_min_incr, locate_reqd,
                       reprice_frequency, reprice_behavior, cancel_group_id, stp_group_id,
                       self_trade_prevention, risk_group_id, lnk_id)

    message = header + body
    return message


def decode_message(message):
    # Decode the header
    block_length, template_id, schema_id, version = struct.unpack(">HBBB", message[:5])

    # Decode the body
    cl_ord_id_length = struct.unpack(">H", message[5:7])[0]
    cl_ord_id_bytes = message[7:7+cl_ord_id_length-1]
    cl_ord_id = cl_ord_id_bytes.decode("ascii")
    mpid_length = struct.unpack(">H", message[7+cl_ord_id_length:9+cl_ord_id_length])[0]
    mpid_bytes = message[9+cl_ord_id_length:9+cl_ord_id_length+mpid_length-1]
    mpid = mpid_bytes.decode("ascii")
    symbol_length = struct.unpack(">H", message[9+cl_ord_id_length+mpid_length:11+cl_ord_id_length+mpid_length])[0]
    symbol_bytes = message[11+cl_ord_id_length+mpid_length:11+cl_ord_id_length+mpid_length+symbol_length-1]
    symbol = symbol_bytes.decode("ascii")
    symbol_sfx_length = struct.unpack(">H", message[11+cl_ord_id_length+mpid_length+symbol_length:13+cl_ord_id_length+mpid_length+symbol_length])[0]
    symbol_sfx_bytes = message[13+cl_ord_id_length+mpid_length+symbol_length:13+cl_ord_id_length+mpid_length+symbol_length+symbol_sfx_length-1]
    symbol_sfx = symbol_sfx_bytes.decode("ascii")

    (
        side, order_qty, ord_type, price,
        time_in_force, order_capacity, cust_order_capacity, exec_inst,
        peg_offset_value, peg_price_type, expire_time, min_qty, display_qty,
        display_method, reserve_replenish_timing, display_min_incr, locate_reqd,
        reprice_frequency, reprice_behavior, cancel_group_id, stp_group_id,
        self_trade_prevention, risk_group_id, lnk_id
    ) = struct.unpack(">iihdiBBBdidiBBHHBHH", message[13+cl_ord_id_length+mpid_length+symbol_length+symbol_sfx_length:])

    return (
        block_length, template_id, schema_id, version,
        cl_ord_id, mpid, symbol, symbol_sfx, side, order_qty, ord_type, price,
        time_in_force, order_capacity, cust_order_capacity, exec_inst,
        peg_offset_value, peg_price_type, expire_time, min_qty, display_qty,
        display_method, reserve_replenish_timing, display_min_incr, locate_reqd,
        reprice_frequency, reprice_behavior, cancel_group_id, stp_group_id,
        self_trade_prevention, risk_group_id, lnk_id
    )
