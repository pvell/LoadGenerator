import struct

# Define the NewOrderSingle message structure
NEW_ORDER_SINGLE = struct.Struct(">8s8s6s4s1sIcIfIIBBcIfH")

def encode_message(cl_ord_id, mpid, symbol, symbol_sfx, side, order_qty, ord_type, price, time_in_force,
                   order_capacity, cust_order_capacity, exec_inst, peg_offset_value, peg_price_type,
                   expire_time, min_qty, display_qty, display_method, reserve_replenish_timing,
                   display_min_incr, locate_reqd, reprice_frequency, reprice_behavior, cancel_group_id,
                   stp_group_id, self_trade_prevention, risk_group_id, lnk_id):
    # Pack the field values into the binary representation
    new_order_single_packed = NEW_ORDER_SINGLE.pack(
        cl_ord_id.encode(),               # 8s  - ClOrdID
        mpid.encode(),                    # 8s  - MPID
        symbol.encode(),                  # 6s  - Symbol
        symbol_sfx.encode(),              # 4s  - SymbolSfx
        side.encode(),                    # 1s  - Side
        order_qty,                        # I   - OrderQty
        ord_type.encode(),                # c   - OrdType
        price,                            # f   - Price
        time_in_force,                    # I   - TimeInForce
        order_capacity,                   # B   - OrderCapacity
        cust_order_capacity,              # B   - CustOrderCapacity
        exec_inst.encode(),               # c   - ExecInst
        peg_offset_value,                 # f   - PegOffsetValue
        peg_price_type,                   # I   - PegPriceType
        expire_time,                      # f   - ExpireTime
        min_qty,                          # I   - MinQty
        display_qty,                      # I   - DisplayQty
        display_method,                   # B   - DisplayMethod
        reserve_replenish_timing,         # B   - ReserveReplenishTiming
        display_min_incr,                 # I   - DisplayMinIncr
        locate_reqd.encode(),             # c   - LocateReqd
        reprice_frequency,                # I   - RepriceFrequency
        reprice_behavior,                 # I   - RepriceBehavior
        cancel_group_id,                  # H   - CancelGroupId
        stp_group_id,                     # H   - StpGroupId
        self_trade_prevention.encode(),    # c   - SelfTradePrevention
        risk_group_id,                    # H   - RiskGroupId
        lnk_id.encode()                    # 8s  - LnkId
    )
    
    return new_order_single_packed


def decode_message(encoded_message):
    # Unpack the binary representation into the field values
    cl_ord_id, mpid, symbol, symbol_sfx, side, order_qty, ord_type, price, time_in_force, order_capacity, \
        cust_order_capacity, exec_inst, peg_offset_value, peg_price_type, expire_time, min_qty, display_qty, \
        display_method, reserve_replenish_timing, display_min_incr, locate_reqd, reprice_frequency, \
        reprice_behavior, cancel_group_id, stp_group_id, self_trade_prevention, risk_group_id, lnk_id = \
        NEW_ORDER_SINGLE.unpack(encoded_message)
    
    # Decode the field values into the appropriate data types
    cl_ord_id = cl_ord_id.decode().strip()
    mpid = mpid.decode().strip()
    symbol = symbol.decode().strip()
    symbol_sfx = symbol_sfx.decode().strip()
    side = side.decode()
    ord_type = ord_type.decode()
    time_in_force = time_in_force
    order_capacity = order_capacity
    cust_order_capacity = cust_order_capacity
    exec_inst = exec_inst.decode()
    peg_offset_value = peg_offset_value
    peg_price_type = peg_price_type
    expire_time = expire_time
    min_qty = min_qty
    display_qty = display_qty
    display_method = display_method
    reserve_replenish_timing = reserve_replenish_timing
    display_min_incr = display_min_incr
    locate_reqd = locate_reqd.decode()
    reprice_frequency = reprice_frequency
    reprice_behavior = reprice_behavior
    cancel_group_id = cancel_group_id
    stp_group_id = stp_group_id
    self_trade_prevention = self_trade_prevention.decode()
    risk_group_id = risk_group_id
    lnk_id = lnk_id.decode().strip()
    
    return (cl_ord_id, mpid, symbol, symbol_sfx, side, order_qty, ord_type, price, time_in_force,
            order_capacity, cust_order_capacity, exec_inst, peg_offset_value, peg_price_type,
            expire_time, min_qty, display_qty, display_method, reserve_replenish_timing,
            display_min_incr, locate_reqd, reprice_frequency, reprice_behavior, cancel_group_id,
            stp_group_id, self_trade_prevention, risk_group_id, lnk_id)


# Sample input data
cl_ord_id = "ORDER001"
mpid = "MP001"
symbol = "AAPL"
symbol_sfx = "NS"
side = "1"
order_qty = 100
ord_type = "2"
price = 200.5
time_in_force = 1
order_capacity = 1
cust_order_capacity = 1
exec_inst = "1"
peg_offset_value = 0.0
peg_price_type = 1
expire_time = 0.0
min_qty = 0
display_qty = 0
display_method = 0
reserve_replenish_timing = 0
display_min_incr = 0
locate_reqd = "N"
reprice_frequency = 0
reprice_behavior = 0
cancel_group_id = 0
stp_group_id = 0
self_trade_prevention = "0"
risk_group_id = 0
lnk_id = "LNKID001"

# Encode the sample NewOrderSingle message
encoded_message = encode_message(cl_ord_id, mpid, symbol, symbol_sfx, side, order_qty, ord_type, price, time_in_force,
                                 order_capacity, cust_order_capacity, exec_inst, peg_offset_value, peg_price_type,
                                 expire_time, min_qty, display_qty, display_method, reserve_replenish_timing,
                                 display_min_incr, locate_reqd, reprice_frequency, reprice_behavior, cancel_group_id,
                                 stp_group_id, self_trade_prevention, risk_group_id, lnk_id)

print("Encoded Message:", encoded_message)

# Decode the encoded message
decoded_message = decode_message(encoded_message)
print("Decoded Message:", decoded_message)
