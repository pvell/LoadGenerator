import xml.etree.ElementTree as ET
import struct

def load_schema(xml_file):
    tree = ET.parse(xml_file)
    root = tree.getroot()

    type_dict = {}
    composite_dict = {}

    for enum_elem in root.iter('enum'):
        encoding_type = enum_elem.attrib['encodingType']
        enum_name = enum_elem.attrib['name']
        valid_values = {}

        for valid_value_elem in enum_elem.iter('validValue'):
            value = valid_value_elem.text
            name = valid_value_elem.attrib['name']
            valid_values[name] = value

        type_dict[enum_name] = {'type': 'enum', 'encodingType': encoding_type, 'validValues': valid_values}

    for composite_elem in root.iter('composite'):
        composite_name = composite_elem.attrib['name']
        composite_dict[composite_name] = {}

        for type_elem in composite_elem.iter('type'):
            type_name = type_elem.attrib['name']
            primitive_type = type_elem.attrib.get('primitiveType')
            presence = type_elem.attrib.get('presence')
            constant_value = type_elem.text if presence == 'constant' else None

            composite_dict[composite_name][type_name] = {'primitiveType': primitive_type, 'presence': presence, 'constantValue': constant_value}

    return type_dict, composite_dict


def encode_field(field_id, field_value, type_dict, composite_dict):
    if field_id in type_dict:
        field_type = type_dict[field_id]['type']
        encoding_type = type_dict[field_id]['encodingType']
        valid_values = type_dict[field_id]['validValues']

        if field_value not in valid_values:
            raise ValueError(f"Invalid value '{field_value}' for field '{field_id}'")

        encoded_value = struct.pack(f">{encoding_type}", int(valid_values[field_value]))
        return encoded_value

    elif field_id in composite_dict:
        composite_fields = composite_dict[field_id]
        encoded_composite = bytearray()

        for subfield_id, subfield_value in field_value.items():
            if subfield_id not in composite_fields:
                raise ValueError(f"Invalid subfield '{subfield_id}' for composite field '{field_id}'")

            subfield_primitive_type = composite_fields[subfield_id]['primitiveType']
            encoded_subfield = struct.pack(f">{subfield_primitive_type}", int(subfield_value))
            encoded_composite += encoded_subfield

        return encoded_composite

    else:
        raise ValueError(f"Invalid field ID '{field_id}'")


def encode_message(schema_file, message_name, field_values):
    type_dict, composite_dict = load_schema(schema_file)

    encoded_message = bytearray()

    composite_fields = composite_dict.get(message_name, {})

    # Encode all fields with their values or null values
    for field_id, field_info in composite_fields.items():
        if field_id not in field_values:
            primitive_type = field_info['primitiveType']
            encoded_field = struct.pack(f">{primitive_type}", 0)
            encoded_message += encoded_field

            # Debug print statement
            print(f"Encoded field {field_id}: None ({encoded_field.hex()})")

    for field_id, field_value in field_values.items():
        encoded_field = encode_field(field_id, field_value, type_dict, composite_dict)
        encoded_message += encoded_field

        # Debug print statement
        print(f"Encoded field {field_id}: {field_value} ({encoded_field.hex()})")

    return encoded_message


# Example usage
schema_file = 'schema.xml'
message_name = 'NewOrderSingle'
field_values = {
    '52': 1623322435000000000,
    '11': "CLORD12345",
    '21035': "SECURITY123",
    '54': "BUY",
    '38': 100,
    '40': "LIMIT",
    '44': 99.99,
    '59': "DAY",
    '77': "OPEN",
    '18': "ADD",
    '1815': "MEDIUM",
    '21020': 1,
    '21021': 2,
    '2362': 123,
    '21001': "PREVENT",
    '21000': 456,
    '21005': 789,
    '453': [
        {
            '448': "PARTY1",
            '447': "SRC1",
            '452': 1
        },
        {
            '448': "PARTY2",
            '447': "SRC2",
            '452': 2
        }
    ]
}

encoded_message = encode_message(schema_file, message_name, field_values)
print(f"Encoded Message: {encoded_message.hex()}")
