SBE Nested Repeating Groups Tutorial
Overview
SBE message schema with nested repeating groups
Encoded SBE message with no repeating groups
Encoded SBE message with one outer repeating group and one inner repeating group
Encoded SBE message with multiple outer repeating groups, multiple nested repeating groups
Overview
This page gives examples of a SBE xml schema for a message with nested repeating groups. The schema was run thru the SBE Tool to
validate it and to generate encoders and decoders for the message with nested repeating groups. Then it shows how to encode a message
with nested repeating groups and what the message looks like on the wire.
SBE message schema with nested repeating groups
This discussion uses this sample message with nested repeating groups as the source for all samples that follow.
Encoded SBE message with no repeating groups
The follow code snippet creates and encodes a NestedSample message that has no outer repeating groups and no inner repeating
groups.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
 <composite name="RepeatingGroupDimensions">
 <type name="blockLength" primitiveType="uint8"/>
 <type name="numInGroup" primitiveType="uint8"/>
 </composite>

 ...

 <sbe:message name="NestedSample" id="27">
 <field id="1" name="SendingTime" type="uint64"/>
 <field id="2" name="ClOrdID" type="NewOrderSingleClOrdID"/>
 <field id="3" name="PriorToOuterRGMarker" type="uint16"/>
 <group name="allocations" id="78" dimensionType="RepeatingGroupDimensions">
 <field name="allocAccountID" id="79" type="uint32"/>
 <field name="allocQty" id="80" type="uint16"/>
 <field id="81" name="PriorToInnerRGMarker" type="uint16"/>
 <group blockLength="18" dimensionType="RepeatingGroupDimensions" id="12" name="Parties">
 <field id="13" name="PartyID" type="LongTwoSidedBulkQuotePartyID"/>
 <field id="14" name="PartyIDSource" type="char"/>
 <field id="15" name="PartyRole" type="uint8"/>
 </group>
 </group>
 </sbe:message>
1
2
3
4
5
6
7
 ByteBuffer msgBuf = ByteBuffer.allocate(1024);
 UnsafeBuffer wrapper = new UnsafeBuffer(msgBuf);
 nestedRepeatingGroupSample.wrapAndApplyHeader(wrapper, 0, header);

 // Why do we need to do this? Is there a bug in the our version of the SBE tool?
 header.numGroups((short)MessageHeaderEncoder.numGroupsEncodingLength());
 
Note that the code puts the value 0xdead in the field priorToOuterRGMarker which is just prior to the outer repeating group as a marker
to identify where the outer repeating group starts in the bytes on the wire. This encoded message appears on the wire as:
Encoded SBE message with one outer repeating group and one inner repeating group
The follow code snippet creates and encodes a NestedSample message that has one outer group, and one nested group.
Note that the code puts the value 0xdead in the field priorToOuterRGMarker which is just prior to the outer repeating group as a marker
to identify where the outer repeating group starts in the bytes on the wire. It also put the value 0xbeaf in the field priorToInnerRGMarker
which is just prior to the inner repeating group as a marker to identify where the inner repeating group starts in the bytes on the wire.
8
9
10
11
12
13
14
15
16
17
18
 nestedRepeatingGroupSample.sendingTime(0x0102030405060708L);
 nestedRepeatingGroupSample.clOrdID("OID0123456789AB");
 nestedRepeatingGroupSample.priorToOuterRGMarker(0xDEAD);
 msgBuf.position(0).limit(header.encodedLength() + nestedRepeatingGroupSample.encodedLength());
 builder.setLength(0);
 builder.append("\nnestedRepeatingGroupSample, no repeating groups:\n");
 builder.append("TemplateId: ").append(nestedRepeatingGroupSample.sbeTemplateId()).append("\nBlockLength:
 HexDumper.toHex(builder, msgBuf);
 System.out.println(builder);
1
2
3
4
5
6
7
nestedRepeatingGroupSample, no repeating groups:
TemplateId: 27
BlockLength: 26
00000000: 001a1b09 00010101 02030405 0607084f |...............O|
00000010: 49443031 32333435 36373839 414200de |ID0123456789AB..|
00000020: ad |.|
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
 ByteBuffer msgBuf = ByteBuffer.allocate(1024);
 UnsafeBuffer wrapper = new UnsafeBuffer(msgBuf);
 nestedRepeatingGroupSample.wrapAndApplyHeader(wrapper, 0, header);
 // Why do we need to do this? Is there a bug in the our version of the SBE tool?
 header.numGroups((short)MessageHeaderEncoder.numGroupsEncodingLength());

 estedRepeatingGroupSample.sendingTime(0x0102030405060708L);
 nestedRepeatingGroupSample.clOrdID("OID0123456789AB");
 nestedRepeatingGroupSample.priorToOuterRGMarker(0xDEAD);
 AllocationsEncoder allocationsEncoder = nestedRepeatingGroupSample.allocationsCount(1);
 allocationsEncoder.next();
 allocationsEncoder.allocAccountID(0x12345678).allocQty(0xEEFF);
 allocationsEncoder.priorToInnerRGMarker(0xBEEF);
 PartiesEncoder partiesEncoder = allocationsEncoder.partiesCount(1);
 partiesEncoder.next();
 partiesEncoder.partyID("ABCDEFGHIJKLMNOP").partyIDSource((byte)'a').partyRole((short)0x44);
 msgBuf.position(0).limit(header.encodedLength() + nestedRepeatingGroupSample.encodedLength());
 builder.setLength(0);
 builder.append("\nnestedRepeatingGroupSample one outer group, one nested group:\n");
 builder.append("TemplateId: ").append(nestedRepeatingGroupSample.sbeTemplateId()).append("\nBlockLength:
 HexDumper.toHex(builder, msgBuf);
 System.out.println(builder);
This encoded message appears on the wire as:
Encoded SBE message with multiple outer repeating groups, multiple nested repeating groups
The follow code snippet creates and encodes a NestedSample message that has multiple outer groups, and multiple nested groups.
1
2
3
4
5
6
7
8
nestedRepeatingGroupSample one outer group, one nested group:
TemplateId: 27
BlockLength: 26
00000000: 001a1b09 00010101 02030405 0607084f |...............O|
00000010: 49443031 32333435 36373839 414200de |ID0123456789AB..|
00000020: ad080112 345678ee ffbeef12 01414243 |....4Vx......ABC|
00000030: 44454647 48494a4b 4c4d4e4f 506144 |DEFGHIJKLMNOPaD|
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
 ByteBuffer msgBuf = ByteBuffer.allocate(1024);
 UnsafeBuffer wrapper = new UnsafeBuffer(msgBuf);
 nestedRepeatingGroupSample.wrapAndApplyHeader(wrapper, 0, header);
 // Why do we need to do this? Is there a bug in the our version of the SBE tool?
 header.numGroups((short)MessageHeaderEncoder.numGroupsEncodingLength());

 nestedRepeatingGroupSample.sendingTime(0x0102030405060708L);
 nestedRepeatingGroupSample.clOrdID("OID0123456789AB");
 nestedRepeatingGroupSample.priorToOuterRGMarker(0xDEAD);
 AllocationsEncoder allocationsEncoder = nestedRepeatingGroupSample.allocationsCount(3);
 allocationsEncoder.next();
 allocationsEncoder.allocAccountID(0x12345678).allocQty(0xEEFF).priorToInnerRGMarker(0xBEEF);
 PartiesEncoder partiesEncoder = allocationsEncoder.partiesCount(3);
 partiesEncoder.next();
 partiesEncoder.partyID("ABCDEFGHIJKLMNOP").partyIDSource((byte)'a').partyRole((short)0x44);
 partiesEncoder.next();
 partiesEncoder.partyID("0123456789ABCDEF").partyIDSource((byte)'b').partyRole((short)0x45);
 partiesEncoder.next();
 partiesEncoder.partyID("PartyID012131415").partyIDSource((byte)'c').partyRole((short)0x46);
 allocationsEncoder.next();
 allocationsEncoder.allocAccountID(0xFEDCBA98).allocQty(0x4466).priorToInnerRGMarker(0xBEEF);
 partiesEncoder = allocationsEncoder.partiesCount(2);
 partiesEncoder.next();
 partiesEncoder.partyID("PONMLKJIHGFEDCBA").partyIDSource((byte)'d').partyRole((short)0x47);
 partiesEncoder.next();
 partiesEncoder.partyID("PartyID012345678").partyIDSource((byte)'e').partyRole((short)0x48);
 allocationsEncoder.next();
 allocationsEncoder.allocAccountID(0x55667755).allocQty(0x1122).priorToInnerRGMarker(0xBEEF);
 partiesEncoder = allocationsEncoder.partiesCount(1);
 partiesEncoder.next();
 partiesEncoder.partyID("ABCDEFGHIJKLMNOP").partyIDSource((byte)'a').partyRole((short)0x44);
 msgBuf.position(0).limit(header.encodedLength() + nestedRepeatingGroupSample.encodedLength());
 builder.setLength(0);
 builder.append("\nnestedRepeatingGroupSample multiple outer groups, multiple nested groups:\n");
 builder.append("TemplateId: ").append(nestedRepeatingGroupSample.sbeTemplateId()).append("\nBlockLength:
Note that the code puts the value 0xdead in the field priorToOuterRGMarker which is just prior to the outer repeating group as a marker
to identify where the outer repeating group starts in the bytes on the wire. It also put the value 0xbeaf in the field priorToInnerRGMarker
which is just prior to the inner repeating group as a marker to identify where the inner repeating group starts in the bytes on the wire.
This encoded message appears on the wire as:
43
44
 HexDumper.toHex(builder, msgBuf);
 System.out.println(builder);
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
nestedRepeatingGroupSample multiple outer groups, multiple nested groups:
TemplateId: 27
BlockLength: 26
00000000: 001a1b09 00010101 02030405 0607084f |...............O|
00000010: 49443031 32333435 36373839 414200de |ID0123456789AB..|
00000020: ad080312 345678ee ffbeef12 03414243 |....4Vx......ABC|
00000030: 44454647 48494a4b 4c4d4e4f 50614430 |DEFGHIJKLMNOPaD0|
00000040: 31323334 35363738 39414243 44454662 |123456789ABCDEFb|
00000050: 45506172 74794944 30313231 33313431 |EPartyID01213141|
00000060: 356346fe dcba9844 66beef12 02504f4e |5cF....Df....PON|
00000070: 4d4c4b4a 49484746 45444342 41644750 |MLKJIHGFEDCBAdGP|
00000080: 61727479 49443031 32333435 36373865 |artyID012345678e|
00000090: 48556677 551122be ef120141 42434445 |HUfwU."....ABCDE|
000000a0: 46474849 4a4b4c4d 4e4f5061 44 |FGHIJKLMNOPaD|
