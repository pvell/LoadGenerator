import socket
import time
from multiprocessing import Process

# Define the receive buffer size
RECV_BUFFER_SIZE = 8192  # You can adjust this size as needed

# Send the generated message over the TCP connection
def send_message(client_socket, message):
    # Send the message
    client_socket.sendall(message)
    # Sleep for a short period to control the message rate
    time.sleep(1 / message_rate)

def session_worker(session_name):
    try:
        # Establish SBE TCP session for the current session name
        client_socket, session_id = establish_session(session_name)

        # Set the receive buffer size
        client_socket.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF, RECV_BUFFER_SIZE)

        # Start time for calculating duration
        start_time = time.time()

        # Generate and send messages for the specified duration
        while time.time() - start_time < duration:
            # Generate a random message type
            message_type = generate_message_type()

            # Generate one or two messages
            new_order_single_message, order_cancel_message = generate_message(message_type, session_name, send_cancels=config.getboolean('Load', 'SendCancels'))

            # Send the NewOrderSingle message
            if new_order_single_message:
                send_message(client_socket, new_order_single_message)

            # Send the OrderCancelRequest message if it's generated
            if order_cancel_message:
                send_message(client_socket, order_cancel_message)

            # Receive and discard data from the socket
            response_data = client_socket.recv(RECV_BUFFER_SIZE)

            # Sleep for a short period to control the message rate
            time.sleep(1 / message_rate)

        # Close the TCP connection for the current session
        client_socket.close()

    except Exception as e:
        print(f"Failed to establish session for {session_name}: {str(e}")

# Rest of your code remains the same

if __name__ == '__main__':
    main()






tag_release="86_14"
tag_session="MarketSession"
curl "http://10.2.23.112:8093/sfgui/sfapi/statistics/register_tag?name=$ag_release"
curl "http://10.2.23.112:8093/sfgui/sfapi/statistics/register_tag?name=$tag_session"

# Uncomment these lines if you want to stop existing scripts before running new ones
#curl 'http://10.2.23.112:8093/sfgui/sfapi/scripts/all?action=stop'
#sleep 1
#curl 'http://10.2.23.112:8093/sfgui/sfapi/scripts/delete'

directory="/home/pvellanki/Options/OrderAcceptance/Market/SBE"  # Updated to "toRun"
tag_area="repricing"
curl "http://10.2.23.112:8093/sfgui/sfapi/statistics/register_tag?name=$tag_area"
cd "$directory"  # Move to the "toRun" directory

for f in *; do
    if [ -f "$f" ]; then  # Check if it's a file
        curl -i -X POST -F file=@"$f" 'http://10.2.23.112:8100/sfgui/sfapi/scripts/upload'
        sleep 1
        curl "http://10.2.23.112:8100/sfgui/sfapi/scripts/name_$f?action=start&aml=3&autostart=true&continueonfailed=true&ignoreaskforcontinue=true&environment=EWR2&tag=$ag_release&tag=$tag_area&tag=$tag_session"
        sleep 1
    fi
done
