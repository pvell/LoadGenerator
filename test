class UnderlyingOrSeriesType:
    CancelAllOnUnderlying = 0
    CancelAllOnSeries = 1
    SIZE = 1

    def __init__(self, value):
        self.value = value

    def encode(self):
        return pack('B', self.value)

    def decode(self, buffer):
        self.value, = unpack_from('B', buffer)



class OptionsSecurityID:
    SIZE = 8

    def __init__(self, value=''):
        self.value = value

    def encode(self):
        encoded_value = self.value.encode('utf-8')
        padding = b'\x00' * (self.SIZE - len(encoded_value))
        return encoded_value + padding

    def decode(self, buffer):
        encoded_value = buffer[:self.SIZE].rstrip(b'\x00')
        self.value = encoded_value.decode('utf-8')

    def __str__(self):
        return self.value



class Char:
    SIZE = 1

    def __init__(self, value):
        self.value = value

    def encode(self):
        return pack('s', self.value.encode())

    def decode(self, buffer):
        value, = unpack_from('s', buffer)
        self.value = value.decode()








Type	Length (bytes)	Description	Value Range	Null Value	Null Value (Hex)
CHAR	1	ASCII Character	32 to 126 (printable ASCII)	0	0x00
BOOLEAN	1	Boolean value (true or false)	0 to 1	255	0xFF
			0 = false		
			1 = true		
INT8	1	Signed Integer	-127 to 127	-128Â 	0x80
INT16	2	Signed Integer	-32767 to 32767	-32768	0x8000
INT32	4	Signed Integer	-2^31 + 1 to 2^31 - 1	-2147483648	0x80000000
INT64	8	Signed Integer	-2^63 + 1 to 2^63 - 1	-9.22337E+18	0x8000000000000000
UINT8	1	Unsigned Integer	0 to 254	255	0xFF
UINT16	2	Unsigned Integer	0 to 65534	65535	0xFFFF
UINT32	4	Unsigned Integer	0 to 2^32-2	2^32 - 1	0xFFFFFFFF
UINT64	8	Unsigned Integer	0 to 2^63 - 1	2^64 - 1	0xFFFFFFFFFFFFFFFF










class Char:
    SIZE = 1
    NULL_VALUE = b'\x00'  # Define null value for Char as a byte string

    def __init__(self, value):
        self.value = value

    def encode(self):
        if self.value is None:
            return self.NULL_VALUE
        else:
            return pack('s', self.value.encode())

    def decode(self, buffer):
        value, = unpack_from('s', buffer)
        self.value = value.decode() if value != self.NULL_VALUE else None

# Usage:
char_value = 'A'
null_char = Char(None)  # Represents null value
encoded_char = null_char.encode()





class UINT16:
    SIZE = 2
    NULL_VALUE = 65535  # Define a value to represent null or missing

    def __init__(self, value):
        if value is not None and (value < 0 or value > 65535):
            raise ValueError("Value must be within the range 0-65535 or None for null value")
        self.value = value

    def encode(self):
        if self.value is None:
            return pack('>H', self.NULL_VALUE)  # Encode as the null value
        return pack('>H', self.value)

    def decode(self, buffer):
        self.value, = unpack_from('>H', buffer)

# Example usage:
value1 = UINT16(42)
value2 = UINT16(None)  # Represents null value




class UnderlyingOrSeriesType:
    CancelAllOnUnderlying = 0
    CancelAllOnSeries = 1
    SIZE = 1
    NULL_VALUE = 255  # Define null value for UnderlyingOrSeriesType

    def __init__(self, value):
        self.value = value

    def encode(self):
        return pack('B', self.value)

    def decode(self, buffer):
        self.value, = unpack_from('B', buffer)

# Usage:
underlying_type = UnderlyingOrSeriesType(UnderlyingOrSeriesType.CancelAllOnUnderlying)
null_underlying_type = UnderlyingOrSeriesType(UnderlyingOrSeriesType.NULL_VALUE)  # Represents null value





class OptionsSecurityID:
    SIZE = 8
    NULL_VALUE = b'\x00\x00\x00\x00\x00\x00\x00\x00'  # Define null value for OptionsSecurityID

    def __init__(self, value=''):
        self.value = value

    def encode(self):
        encoded_value = self.value.encode('utf-8')
        padding = b'\x00' * (self.SIZE - len(encoded_value))
        return encoded_value + padding

    def decode(self, buffer):
        encoded_value = buffer[:self.SIZE].rstrip(b'\x00')
        self.value = encoded_value.decode('utf-8')

# Usage:
options_security_id = OptionsSecurityID('ABC12345')
null_options_security_id = OptionsSecurityID(OptionsSecurityID.NULL_VALUE)  # Represents null value

