import xml.etree.ElementTree as ET
import struct


def load_schema(schema_file):
    tree = ET.parse(schema_file)
    root = tree.getroot()
    messages = {}

    # Find the XML namespace
    namespace = root.tag.split('}')[0] + '}'

    for message_elem in root.findall(f'{namespace}message'):
        message_id = int(message_elem.get('id'))
        message_name = message_elem.get('name')
        fields = {}

        for field_elem in message_elem.findall(f'field'):
            field_id = int(field_elem.get('id'))
            field_type = field_elem.get('type')
            fields[field_id] = field_type

        messages[message_name] = {'id': message_id, 'fields': fields}

    return messages


def encode_field(field_type, value):
    if field_type in ['string', 'char', 'PriceType', 'int32', 'UTCTimestampNanos', 'SideType', 'OrderCapacityType',
                      'CustOrderCapacityType', 'ExecInstType', 'uint16', 'OrdType', 'TimeInForceType',
                      'PegType', 'uint32', 'DispMethodType', 'ReserveReplenishTimingType', 'SelfTradePreventionType']:
        return value.encode('utf-8')
    elif field_type == 'int64':
        return struct.pack('>q', value)
    elif field_type == 'uint64':
        return struct.pack('>Q', value)
    elif field_type == 'float':
        return struct.pack('>f', value)
    elif field_type == 'double':
        return struct.pack('>d', value)
    else:
        raise ValueError(f"Unknown field type: {field_type}")


def encode_message(schema, message_name, field_values):
    if message_name not in schema:
        raise ValueError(f"Message '{message_name}' not found in the schema.")

    message = schema[message_name]
    message_id = message['id']
    fields = message['fields']

    encoded_fields = []
    for field_id, field_type in fields.items():
        if field_id in field_values:
            value = field_values[field_id]
            encoded_field = encode_field(field_type, value)
            encoded_fields.append((field_id, encoded_field))

    encoded_message = bytearray()
    encoded_message += struct.pack('>H', len(encoded_fields) + 5)  # MEMO SBE header: BlockLength
    encoded_message += struct.pack('B', 1)  # MEMO SBE header: TemplateID
    encoded_message += struct.pack('B', 1)  # MEMO SBE header: SchemaID
    encoded_message += struct.pack('>H', 266)  # MEMO SBE header: Version

    encoded_message += struct.pack('>H', message_id)  # Message ID

    for field_id, encoded_field in encoded_fields:
        encoded_message += struct.pack('>H', field_id)
        encoded_message += struct.pack('>H', len(encoded_field))
        encoded_message += encoded_field

    return encoded_message


def decode_field(field_type, encoded_value):
    if field_type in ['string', 'char', 'PriceType', 'int32', 'UTCTimestampNanos', 'SideType', 'OrderCapacityType',
                      'CustOrderCapacityType', 'ExecInstType', 'uint16', 'OrdType', 'TimeInForceType',
                      'PegType', 'uint32', 'DispMethodType', 'ReserveReplenishTimingType', 'SelfTradePreventionType']:
        return encoded_value.decode('utf-8')
    elif field_type == 'int64':
        return struct.unpack('>q', encoded_value)[0]
    elif field_type == 'uint64':
        return struct.unpack('>Q', encoded_value)[0]
    elif field_type == 'float':
        return struct.unpack('>f', encoded_value)[0]
    elif field_type == 'double':
        return struct.unpack('>d', encoded_value)[0]
    else:
        raise ValueError(f"Unknown field type: {field_type}")





def decode_message(schema, encoded_message):
    template_id = struct.unpack('B', encoded_message[2:3])[0]
    template_name = next((key for key, value in schema.items() if value['id'] == template_id), None)
    fields = {}

    if template_name is None:
        raise ValueError(f"Unknown template ID: {template_id}")

    encoded_message = encoded_message[3:]

    for field_id, field_name in schema[template_name]['fields'].items():
        if len(encoded_message) == 0:
            break

        if field_name == 'NewOrderSingleClOrdID':
            if len(encoded_message) >= 20:
                field_value = struct.unpack('20s', encoded_message[:20])[0].decode('utf-8')
                encoded_message = encoded_message[20:]
            else:
                field_value = None
        elif field_name == 'NewOrderSingleMPID':
            if len(encoded_message) >= 4:
                field_value = struct.unpack('4s', encoded_message[:4])[0].decode('utf-8')
                encoded_message = encoded_message[4:]
            else:
                field_value = None
        elif field_name == 'NewOrderSingleSymbol':
            if len(encoded_message) >= 6:
                field_value = struct.unpack('6s', encoded_message[:6])[0].decode('utf-8')
                encoded_message = encoded_message[6:]
            else:
                field_value = None
        elif field_name == 'NewOrderSingleSymbolSfx':
            if len(encoded_message) >= 3:
                field_value = struct.unpack('3s', encoded_message[:3])[0].decode('utf-8')
                encoded_message = encoded_message[3:]
            else:
                field_value = None
        elif field_name.endswith('Type'):
            field_value = struct.unpack('B', encoded_message[:1])[0]
            encoded_message = encoded_message[1:]
        elif field_name.startswith('uint'):
            field_value = struct.unpack('I', encoded_message[:4])[0]
            encoded_message = encoded_message[4:]
        elif field_name.startswith('char'):
            field_value = struct.unpack('s', encoded_message[:1])[0].decode('utf-8')
            encoded_message = encoded_message[1:]
        elif field_name == 'NewOrderSingleLnkId':
            field_value = struct.unpack('H', encoded_message[:2])[0]
            encoded_message = encoded_message[2:]
        else:
            raise ValueError(f"Unknown field type for field: {field_name}")

        fields[field_name] = field_value

    return template_name, fields



         


schema = load_schema('sbe-schema-equities.xml')

# Encode a message
message_name = 'NewOrderSingle'
field_values = {
    'ClOrdID': 'ORDER123',
    'Symbol': 'AAPL',
    'OrdType':'Limit',
    'TimeInForce':'Day',
    'OrderCapacity':'Agency',
    'CustOrderCapacity': 'MemberTradingOnTheirOwnAccount',
    'ExecInst':'ParticipateDoNotInitiate',
    'OrderQty': 100,
    'Price': 1.5,
    'Side': 'Buy',

}
encoded_message = encode_message(schema, message_name, field_values)
print(schema)

# Decode a message
decoded_message = decode_message(schema, encoded_message)

print(f"Encoded Message: {encoded_message}")
print(f"Decoded Message: {decoded_message}")

