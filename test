class OptionsSecurityID:
    def __init__(self, value=''):
        self.value = value

    def encode(self):
        encoded_value = self.value.encode('utf-8')
        return encoded_value

    def decode(self, encoded_value):
        self.value = encoded_value.decode('utf-8')


# Import the required modules/classes
from sbe_encoder_decoder import OptionsSecurityID

# Create an instance of OptionsSecurityID
options_security_id = OptionsSecurityID()

# Set the value
options_security_id.value = 'ABCDEFGH'

# Encode the value
encoded_value = options_security_id.encode()

# Decode the encoded value
decoded_value = OptionsSecurityID()
decoded_value.decode(encoded_value)

# Print the decoded value
print(decoded_value.value)  # Output: ABCDEFGH




if message_type == 'NewOrderSingle':
        # Generate values for the fields
        sending_time = UTCTimestampNanos(int(time.time() * 10**9))
        cl_ord_id = ''.join(choices(string.ascii_uppercase + string.digits, k=20))
        options_security_id = choices(security_ids)[0]
        side = SideType(value=SideType.BUY)  # Set the side to "Buy"
        order_qty = UINT32(value=randint(1, 100))
        ord_type = OrdType(value=OrdType.LIMIT)  # Set the order type to "Limit"
        time_in_force = TimeInForceType(value=TimeInForceType.DAY)  # Set the time in force to "Day"
        exec_inst = ExecInstType(value=ExecInstType.ParticipateDoNotInitiate)  # Set the execution instructions
        trading_capacity = TradingCapacityType(value=TradingCapacityType.CUSTOMER)  # Set the trading capacity
        efid = connection_config[session_name]['EFID']
        party_id = PartyID(efid)
        party_id_source = PartyIDSource('D')
        party_role = PartyRoleType('CUSTOMER')
        parties = [PartiesGroup(party_ids=[[party_id, party_id_source, party_role]])]
        
       

        # Create an instance of NewOrderSingle and set the field values
        new_order_single = NewOrderSingle(
            sending_time=sending_time,
            cl_ord_id=cl_ord_id,
            options_security_id_35=options_security_id,
            side=side,
            order_qty=order_qty,
            ord_type=ord_type,
            time_in_force=time_in_force,
            exec_inst=exec_inst,
            trading_capacity=trading_capacity,
            PartiesGroup=parties
        )

        unsequenced_message = struct.pack('!BH', 104, 102)  # MessageType=104, MessageLength=6, TCP Header Length=102
        # Encode the NewOrderSingle instance
        encoded_message = new_order_single.encode()
        message = unsequenced_message + encoded_message

        # Print the encoded message
        print(encoded_message)

        return message

        


    elif message_type == 'ShortTwoSideBulkQuote':
        # Generate ShortTwoSideBulkQuote message
        sending_time = UTCTimestampNanos(int(time.time() * 10**9))
        cl_ord_id = ''.join(choices(string.ascii_uppercase + string.digits, k=20))
        time_in_force = TimeInForceType(0)
        exec_inst = ExecInstType(0)
        trading_capacity = TradingCapacityType(0)
        mtp_group_id = MtpGroupIDType(0)
        match_trade_prevention = MatchTradePreventionType(0)
        cancel_group_id = UINT16(0)
        risk_group_id = UINT16(0)
        efid = connection_config[session_name]['EFID']
        party_id = PartyID(efid)
        party_id_source = PartyIDSource('D')
        party_role = PartyRoleType('CUSTOMER')
        parties = [PartiesGroup(party_ids=[[party_id, party_id_source, party_role]])]
        quote1 = ShortTwoSidedQuote(list_seq_no=1, options_security_id='XYZ', bid_size=10, bid_exponent=0, bid_mantissa=100, offer_size=20, offer_exponent=0, offer_mantissa=150)
        quote2 = ShortTwoSidedQuote(list_seq_no=2, options_security_id='ABC', bid_size=15, bid_exponent=0, bid_mantissa=200, offer_size=25, offer_exponent=0, offer_mantissa=250)

        quotes = [quote1,quote2]
         
        Short_Two_Side_Bulk_Quote = ShortTwoSideBulkQuote(
            sending_time=sending_time,
            cl_ord_id=cl_ord_id,
            time_in_force=time_in_force,
            exec_inst=exec_inst,
            trading_capacity=trading_capacity,
            mtp_group_id=mtp_group_id,
            match_trade_prevention=match_trade_prevention,
            cancel_group_id=cancel_group_id,
            risk_group_id=risk_group_id,
            parties=parties,
            quotes=quotes
