import struct

def encode_message(cl_ord_id, mpid, symbol, symbol_sfx, side, order_qty, ord_type, price, time_in_force, order_capacity, cust_order_capacity, exec_inst, peg_offset_value, peg_price_type, expire_time, min_qty, display_qty, display_method, reserve_replenish_timing, display_min_incr, locate_reqd, reprice_frequency, reprice_behavior, cancel_group_id, stp_group_id, self_trade_prevention, risk_group_id, lnk_id):
    encoded_fields = [
        cl_ord_id.encode(),
        mpid.encode() if mpid else b'',
        symbol.encode(),
        symbol_sfx.encode() if symbol_sfx else b'',
        side.encode(),
        struct.pack('I', order_qty),
        ord_type.encode(),
        struct.pack('d', price) if price else b'',
        time_in_force.encode(),
        order_capacity.encode(),
        cust_order_capacity.encode(),
        exec_inst.encode(),
        struct.pack('d', peg_offset_value) if peg_offset_value else b'',
        peg_price_type.encode() if peg_price_type else b'',
        struct.pack('Q', expire_time) if expire_time else b'',
        struct.pack('I', min_qty) if min_qty else b'',
        struct.pack('I', display_qty) if display_qty else b'',
        display_method.encode() if display_method else b'',
        reserve_replenish_timing.encode() if reserve_replenish_timing else b'',
        struct.pack('I', display_min_incr) if display_min_incr else b'',
        locate_reqd.encode() if locate_reqd else b'',
        reprice_frequency.encode() if reprice_frequency else b'',
        reprice_behavior.encode() if reprice_behavior else b'',
        struct.pack('H', cancel_group_id) if cancel_group_id else b'',
        struct.pack('H', stp_group_id) if stp_group_id else b'',
        self_trade_prevention.encode() if self_trade_prevention else b'',
        struct.pack('H', risk_group_id) if risk_group_id else b'',
        lnk_id.encode() if lnk_id else b'',
    ]
    encoded_message = b''.join(encoded_fields)
    return encoded_message


cl_ord_id = "ORDER001"
mpid = "MPID001"
symbol = "AAPL"
#symbol_sfx = "SFX001"
side = "Buy"
order_qty = 100
ord_type = "Limit"
price = 100.5
time_in_force = "Day"
order_capacity = "Agency"
cust_order_capacity = "Member"
exec_inst = "FillOrKill"



encoded_message = encode_message(
    cl_ord_id, mpid, symbol, symbol_sfx, side, order_qty, ord_type, price, time_in_force,
    order_capacity, cust_order_capacity, exec_inst, peg_offset_value, peg_price_type,
    expire_time, min_qty, display_qty, display_method, reserve_replenish_timing, display_min_incr,
    locate_reqd, reprice_frequency, reprice_behavior, cancel_group_id, stp_group_id,
    self_trade_prevention, risk_group_id, lnk_id
)

print(encoded_message)

decoded_fields = decode_message(encoded_message)
print(decoded_fields)
