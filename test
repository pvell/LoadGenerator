import xml.etree.ElementTree as ET
import struct


def load_schema(schema_file):
    tree = ET.parse(schema_file)
    root = tree.getroot()
    messages = {}

    # Find the XML namespace
    namespace = root.tag.split('}')[0] + '}'

    for message_elem in root.findall(f'{namespace}message'):
        message_id = int(message_elem.get('id'))
        message_name = message_elem.get('name')
        fields = {}

        for field_elem in message_elem.findall(f'{namespace}field'):
            field_id = int(field_elem.get('id'))
            field_name = field_elem.get('name')
            field_length = int(field_elem.get('length'))
            fields[field_id] = (field_name, field_length)

        messages[message_name] = {'id': message_id, 'fields': fields}

    return messages


def encode_field(field_name, field_value, field_length):
    if field_name in ['NewOrderSingleClOrdID', 'NewOrderSingleMPID', 'NewOrderSingleSymbol', 'NewOrderSingleSymbolSfx']:
        return struct.pack(f'{field_length}s', field_value.encode('utf-8'))
    elif field_name.endswith('Type'):
        return struct.pack('B', field_value)
    elif field_name.startswith('uint'):
        return struct.pack('I', field_value)
    elif field_name.startswith('char'):
        return struct.pack('s', field_value.encode('utf-8'))
    else:
        raise ValueError(f"Unknown field type for field: {field_name}")


def encode_message(schema, template_name, field_values):
    if template_name not in schema:
        raise ValueError(f"Template '{template_name}' not found in the schema.")

    template_id = schema[template_name]['id']
    encoded_message = bytearray()

    # SBE header
    encoded_message += struct.pack('>H', 12 + 2 * len(field_values))  # BlockLength
    encoded_message += struct.pack('B', 1)  # TemplateID
    encoded_message += struct.pack('B', 1)  # SchemaID
    encoded_message += struct.pack('>H', 1)  # Version

    # Message ID
    encoded_message += struct.pack('>H', template_id)

    for field_id, field_value in field_values.items():
        field_info = schema[template_name]['fields'].get(field_id)
        if field_info is None:
            raise ValueError(f"Unknown field ID: {field_id} for template {template_name}")

        field_name, field_length = field_info
        encoded_field = encode_field(field_name, field_value, field_length)

        # Field ID
        encoded_message += struct.pack('>H', field_id)
        # Field Length
        encoded_message += struct.pack('>H', field_length)
        # Field Value
        encoded_message += encoded_field

    return encoded_message


def decode_field(field_name, encoded_value):
    if field_name in ['NewOrderSingleClOrdID', 'NewOrderSingleMPID', 'NewOrderSingleSymbol', 'NewOrderSingleSymbolSfx']:
        return encoded_value.decode('utf-8')
    elif field_name.endswith('Type'):
        return struct.unpack('B', encoded_value)[0]
    elif field_name.startswith('uint'):
        return struct.unpack('I', encoded_value)[0]
    elif field_name.startswith('char'):
        return struct.unpack('s', encoded_value)[0].decode('utf-8')
    else:
        raise ValueError(f"Unknown field type for field: {field_name}")


def decode_message(schema, encoded_message):
    block_length = struct.unpack('>H', encoded_message[:2])[0]
    template_id = struct.unpack('B', encoded_message[5:6])[0]
    template_name = next((key for key, value in schema.items() if value['id'] == template_id), None)
    fields = {}

    if template_name is None:
        raise ValueError(f"Unknown template ID: {template_id}")

    encoded_message = encoded_message[12:]

    while len(encoded_message) > 0:
        field_id = struct.unpack('>H', encoded_message[:2])[0]
        field_length = struct.unpack('>H', encoded_message[2:4])[0]
        encoded_value = encoded_message[4:4+field_length]
        field_info = schema[template_name]['fields'].get(field_id)
        if field_info is None:
            raise ValueError(f"Unknown field ID: {field_id} for template {template_name}")

        field_name, _ = field_info
        field_value = decode_field(field_name, encoded_value)
        fields[field_id] = field_value

        encoded_message = encoded_message[4+field_length:]

    return template_name, fields


schema = load_schema('sbe-schema-equities.xml')

# Encode a message
message_name = 'NewOrderSingle'
field_values = {
    1: 'ORDER123',
    3: 'AAPL',
    7: 2,  # OrdType: Limit
    9: 0,  # TimeInForce: Day
    10: 3,  # OrderCapacity: Agency
    11: 2,  # CustOrderCapacity: MemberTradingOnTheirOwnAccount
    12: 6,  # ExecInst: ParticipateDoNotInitiate
    13: 100,  # OrderQty
    14: 1.5,  # Price
    5: 1  # Side: Buy
}
encoded_message = encode_message(schema, message_name, field_values)

# Decode a message
decoded_message = decode_message(schema, encoded_message)

print(f"Encoded Message: {encoded_message}")
print(f"Decoded Message: {decoded_message}")
