class PartiesGroup:
    def __init__(self, party_ids):
        self.party_ids = party_ids

    def encode(self):
        encoded_parties = b''.join(party_id.encode() for party in self.party_ids for party_id in party)
        return encoded_parties

    def decode(self, buffer):
        num_party_ids = len(buffer) // (PartyID.SIZE + PartyIDSource.SIZE + PartyRoleType.SIZE)
        self.party_ids = []
        for i in range(num_party_ids):
            offset = i * (PartyID.SIZE + PartyIDSource.SIZE + PartyRoleType.SIZE)
            party_id = PartyID('')
            party_id.decode(buffer[offset:offset + PartyID.SIZE])
            offset += PartyID.SIZE
            party_id_source = PartyIDSource('')
            party_id_source.decode(buffer[offset:offset + PartyIDSource.SIZE])
            offset += PartyIDSource.SIZE
            party_role = PartyRoleType('')
            party_role.decode(buffer[offset:offset + PartyRoleType.SIZE])
            self.party_ids.append([party_id, party_id_source, party_role])


class PartyID:

    SIZE = 16

    def __init__(self, value):
        self.value = value

    def encode(self):
        return self.value.encode()[:16].ljust(16, b'\x00')

    def decode(self, buffer):
        self.value = buffer.decode().rstrip('\x00')


class PartyIDSource:
    SIZE = 1

    def __init__(self, value):
        self.value = value

    def encode(self):
        return self.value.encode()

    def decode(self, buffer):
        self.value = buffer.decode()


class PartyRoleType:
    SIZE = 1

    def __init__(self, value):
        self.value = value

    def encode(self):
        return self.value.encode()

    def decode(self, buffer):
        self.value = buffer.decode()
