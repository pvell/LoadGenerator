class ExecutionReportNew:
    TEMPLATE_ID = 11
    num_groups = 1
    schema_id = 1
    version = 0
    BLOCK_LENGTH = 105

    def __init__(self):
        self.sbe_header = SBEHeader(self.BLOCK_LENGTH, self.TEMPLATE_ID, self.schema_id, self.version, self.num_groups)
        self.order_id = UINT64(0)
        self.cl_ord_id = Char('')
        self.list_seq_no = UINT8(0)
        self.exec_id = UINT64(0)
        self.ord_status = OrdStatusType('')
        self.options_security_id = CHAR('')
        self.side = SideType('')
        self.order_qty = UINT32(0)
        self.ord_type = OrdType('')
        self.price = PriceType(0, 0)
        self.time_in_force = TimeInForceType(0)
        self.open_or_close = OpenOrCloseType('')
        self.exec_inst = ExecInstType(0)
        self.trading_capacity = TradingCapacityType('')
        self.reprice_frequency = RepriceFrequencyType(0)
        self.reprice_behavior = RepriceBehaviorType(0)
        self.leaves_qty = UINT32(0)
        self.cum_qty = UINT32(0)
        self.sending_time = UTCTimestampNanos(0)
        self.transact_time = UTCTimestampNanos(0)
        self.mtp_group_id = MtpGroupIDType(0)
        self.match_trade_prevention = MatchTradePreventionType(0)
        self.cancel_group_id = UINT16(0)
        self.risk_group_id = UINT16(0)
        self.RepeatingGroupDimensions = RepeatingGroupDimensions(18, 3)
        self.parties_group = PartiesGroup()

    def decode(self, buffer):
        offset = 0

        block_length, template_id = self.sbe_header.decode(buffer[offset:offset + SBEHeader.BLOCK_LENGTH])
        offset += SBEHeader.BLOCK_LENGTH

        self.order_id = UINT64(0)
        self.order_id.decode(buffer[offset:])
        offset += UINT64.SIZE

        self.cl_ord_id = Char('')
        self.cl_ord_id.decode(buffer[offset:])
        offset += Char.SIZE

        self.list_seq_no = UINT8(0)
        self.list_seq_no.decode(buffer[offset:])
        offset += UINT8.SIZE

        self.exec_id = UINT64(0)
        self.exec_id.decode(buffer[offset:])
        offset += UINT64.SIZE

        self.ord_status = OrdStatusType('')
        self.ord_status.decode(buffer[offset:])
        offset += OrdStatusType.SIZE

        self.options_security_id = CHAR('')
        self.options_security_id.decode(buffer[offset:])
        offset += CHAR.SIZE

        self.side = SideType('')
        self.side.decode(buffer[offset:])
        offset += SideType.SIZE

        self.order_qty = UINT32(0)
        self.order_qty.decode(buffer[offset:])
        offset += UINT32.SIZE

        self.ord_type = OrdType('')
        self.ord_type.decode(buffer[offset:])
        offset += OrdType.SIZE

        self.price = PriceType(0, 0)
        self.price.decode(buffer[offset:])
        offset += PriceType.SIZE

        self.time_in_force = TimeInForceType(0)
        self.time_in_force.decode(buffer[offset:])
        offset += TimeInForceType.SIZE

        self.open_or_close = OpenOrCloseType('')
        self.open_or_close.decode(buffer[offset:])
        offset += OpenOrCloseType.SIZE

        self.exec_inst = ExecInstType(0)
        self.exec_inst.decode(buffer[offset:])
        offset += ExecInstType.SIZE

        self.trading_capacity = TradingCapacityType('')
        self.trading_capacity.decode(buffer[offset:])
        offset += TradingCapacityType.SIZE

        self.reprice_frequency = RepriceFrequencyType(0)
        self.reprice_frequency.decode(buffer[offset:])
        offset += RepriceFrequencyType.SIZE

        self.reprice_behavior = RepriceBehaviorType(0)
        self.reprice_behavior.decode(buffer[offset:])
        offset += RepriceBehaviorType.SIZE

        self.leaves_qty = UINT32(0)
        self.leaves_qty.decode(buffer[offset:])
        offset += UINT32.SIZE

        self.cum_qty = UINT32(0)
        self.cum_qty.decode(buffer[offset:])
        offset += UINT32.SIZE

        self.sending_time = UTCTimestampNanos(0)
        self.sending_time.decode(buffer[offset:])
        offset += UTCTimestampNanos.SIZE

        self.transact_time = UTCTimestampNanos(0)
        self.transact_time.decode(buffer[offset:])
        offset += UTCTimestampNanos.SIZE

        self.mtp_group_id = MtpGroupIDType(0)
        self.mtp_group_id.decode(buffer[offset:])
        offset += MtpGroupIDType.SIZE

        self.match_trade_prevention = MatchTradePreventionType(0)
        self.match_trade_prevention.decode(buffer[offset:])
        offset += MatchTradePreventionType.SIZE

        self.cancel_group_id = UINT16(0)
        self.cancel_group_id.decode(buffer[offset:])
        offset += UINT16.SIZE

        self.risk_group_id = UINT16(0)
        self.risk_group_id.decode(buffer[offset:])
        offset += UINT16.SIZE

        self.RepeatingGroupDimensions = RepeatingGroupDimensions(0, 0)
        self.RepeatingGroupDimensions.decode(buffer[offset:])
        offset += RepeatingGroupDimensions.SIZE

        self.parties_group = PartiesGroup()
        self.parties_group.decode(buffer[offset:])
        offset += len(buffer) - offset

    def __str__(self):
        return (
            f"OrderID: {self.order_id.value}, ClOrdID: {self.cl_ord_id.value}, ListSeqNo: {self.list_seq_no.value}, "
            f"ExecID: {self.exec_id.value}, OrdStatus: {self.ord_status.value}, OptionsSecurityID: {self.options_security_id.value}, "
            f"Side: {self.side.value}, OrderQty: {self.order_qty.value}, OrdType: {self.ord_type.value}, Price: {self.price.mantissa}, "
            f"TimeInForce: {self.time_in_force.value}, OpenOrClose: {self.open_or_close.value}, ExecInst: {self.exec_inst.value}, "
            f"TradingCapacity: {self.trading_capacity.value}, RepriceFrequency: {self.reprice_frequency.value}, "
            f"RepriceBehavior: {self.reprice_behavior.value}, LeavesQty: {self.leaves_qty.value}, CumQty: {self.cum_qty.value}, "
            f"SendingTime: {self.sending_time.value}, TransactTime: {self.transact_time.value}, "
            f"MtpGroupID: {self.mtp_group_id.value}, MatchTradePrevention: {self.match_trade_prevention.value}, "
            f"CancelGroupID: {self.cancel_group_id.value}, RiskGroupID: {self.risk_group_id.value}, "
            f"RepeatingGroupDimensions: BlockLength={self.RepeatingGroupDimensions.block_length}, NumGroups={self.RepeatingGroupDimensions.num_groups}, "
            f"Parties: {self.parties_group.party_ids}"
        )




ER_BulkQuoyeNew:


class ExecutionReportBulkQuoteNew:
    TEMPLATE_ID = 12
    num_groups = 1
    schema_id = 1
    version = 0
    BLOCK_LENGTH = 68

    def __init__(self):
        self.sbe_header = SBEHeader(self.BLOCK_LENGTH, self.TEMPLATE_ID, self.schema_id, self.version, self.num_groups)
        self.cl_ord_id = Char('')
        self.symbol = Char('')
        self.time_in_force = TimeInForceType(0)
        self.exec_inst = ExecInstType(0)
        self.trading_capacity = TradingCapacityType('')
        self.sending_time = UTCTimestampNanos(0)
        self.transact_time = UTCTimestampNanos(0)
        self.mtp_group_id = MtpGroupIDType(0)
        self.match_trade_prevention = MatchTradePreventionType(0)
        self.cancel_group_id = UINT16(0)
        self.risk_group_id = UINT16(0)
        self.number_of_orders = UINT8(0)
        self.RepeatingGroupDimensions = RepeatingGroupDimensions(0, 0)
        self.parties_group = PartiesGroup()

    def decode(self, buffer):
        offset = 0

        block_length, template_id = self.sbe_header.decode(buffer[offset:offset + SBEHeader.BLOCK_LENGTH])
        offset += SBEHeader.BLOCK_LENGTH

        self.cl_ord_id = Char('')
        self.cl_ord_id.decode(buffer[offset:])
        offset += Char.SIZE

        self.symbol = Char('')
        self.symbol.decode(buffer[offset:])
        offset += Char.SIZE

        self.time_in_force = TimeInForceType(0)
        self.time_in_force.decode(buffer[offset:])
        offset += TimeInForceType.SIZE

        self.exec_inst = ExecInstType(0)
        self.exec_inst.decode(buffer[offset:])
        offset += ExecInstType.SIZE

        self.trading_capacity = TradingCapacityType('')
        self.trading_capacity.decode(buffer[offset:])
        offset += TradingCapacityType.SIZE

        self.sending_time = UTCTimestampNanos(0)
        self.sending_time.decode(buffer[offset:])
        offset += UTCTimestampNanos.SIZE

        self.transact_time = UTCTimestampNanos(0)
        self.transact_time.decode(buffer[offset:])
        offset += UTCTimestampNanos.SIZE

        self.mtp_group_id = MtpGroupIDType(0)
        self.mtp_group_id.decode(buffer[offset:])
        offset += MtpGroupIDType.SIZE

        self.match_trade_prevention = MatchTradePreventionType(0)
        self.match_trade_prevention.decode(buffer[offset:])
        offset += MatchTradePreventionType.SIZE

        self.cancel_group_id = UINT16(0)
        self.cancel_group_id.decode(buffer[offset:])
        offset += UINT16.SIZE

        self.risk_group_id = UINT16(0)
        self.risk_group_id.decode(buffer[offset:])
        offset += UINT16.SIZE

        self.number_of_orders = UINT8(0)
        self.number_of_orders.decode(buffer[offset:])
        offset += UINT8.SIZE

        self.RepeatingGroupDimensions = RepeatingGroupDimensions(0, 0)
        self.RepeatingGroupDimensions.decode(buffer[offset:])
        offset += RepeatingGroupDimensions.SIZE

        self.parties_group = PartiesGroup()
        self.parties_group.decode(buffer[offset:])
        offset += len(buffer) - offset

    def __str__(self):
        return (
            f"ClOrdID: {self.cl_ord_id.value}, Symbol: {self.symbol.value}, TimeInForce: {self.time_in_force.value}, "
            f"ExecInst: {self.exec_inst.value}, TradingCapacity: {self.trading_capacity.value}, SendingTime: {self.sending_time.value}, "
            f"TransactTime: {self.transact_time.value}, MtpGroupID: {self.mtp_group_id.value}, MatchTradePrevention: {self.match_trade_prevention.value}, "
            f"CancelGroupID: {self.cancel_group_id.value}, RiskGroupID: {self.risk_group_id.value}, NumberOfOrders: {self.number_of_orders.value}, "
            f"RepeatingGroupDimensions: BlockLength={self.RepeatingGroupDimensions.block_length}, NumGroups={self.RepeatingGroupDimensions.num_groups}, "
            f"Parties: {self.parties_group.party_ids}"
        )



ER_ComponentNew:


class ExecutionReportBulkQuoteNew:
    TEMPLATE_ID = 12
    num_groups = 1
    schema_id = 1
    version = 0
    BLOCK_LENGTH = 68

    def __init__(self):
        self.sbe_header = SBEHeader(self.BLOCK_LENGTH, self.TEMPLATE_ID, self.schema_id, self.version, self.num_groups)
        self.cl_ord_id = Char('')
        self.symbol = Char('')
        self.time_in_force = TimeInForceType(0)
        self.exec_inst = ExecInstType(0)
        self.trading_capacity = TradingCapacityType('')
        self.sending_time = UTCTimestampNanos(0)
        self.transact_time = UTCTimestampNanos(0)
        self.mtp_group_id = MtpGroupIDType(0)
        self.match_trade_prevention = MatchTradePreventionType(0)
        self.cancel_group_id = UINT16(0)
        self.risk_group_id = UINT16(0)
        self.number_of_orders = UINT8(0)
        self.RepeatingGroupDimensions = RepeatingGroupDimensions(0, 0)
        self.parties_group = PartiesGroup()

    def decode(self, buffer):
        offset = 0

        block_length, template_id = self.sbe_header.decode(buffer[offset:offset + SBEHeader.BLOCK_LENGTH])
        offset += SBEHeader.BLOCK_LENGTH

        self.cl_ord_id = Char('')
        self.cl_ord_id.decode(buffer[offset:])
        offset += Char.SIZE

        self.symbol = Char('')
        self.symbol.decode(buffer[offset:])
        offset += Char.SIZE

        self.time_in_force = TimeInForceType(0)
        self.time_in_force.decode(buffer[offset:])
        offset += TimeInForceType.SIZE

        self.exec_inst = ExecInstType(0)
        self.exec_inst.decode(buffer[offset:])
        offset += ExecInstType.SIZE

        self.trading_capacity = TradingCapacityType('')
        self.trading_capacity.decode(buffer[offset:])
        offset += TradingCapacityType.SIZE

        self.sending_time = UTCTimestampNanos(0)
        self.sending_time.decode(buffer[offset:])
        offset += UTCTimestampNanos.SIZE

        self.transact_time = UTCTimestampNanos(0)
        self.transact_time.decode(buffer[offset:])
        offset += UTCTimestampNanos.SIZE

        self.mtp_group_id = MtpGroupIDType(0)
        self.mtp_group_id.decode(buffer[offset:])
        offset += MtpGroupIDType.SIZE

        self.match_trade_prevention = MatchTradePreventionType(0)
        self.match_trade_prevention.decode(buffer[offset:])
        offset += MatchTradePreventionType.SIZE

        self.cancel_group_id = UINT16(0)
        self.cancel_group_id.decode(buffer[offset:])
        offset += UINT16.SIZE

        self.risk_group_id = UINT16(0)
        self.risk_group_id.decode(buffer[offset:])
        offset += UINT16.SIZE

        self.number_of_orders = UINT8(0)
        self.number_of_orders.decode(buffer[offset:])
        offset += UINT8.SIZE

        self.RepeatingGroupDimensions = RepeatingGroupDimensions(0, 0)
        self.RepeatingGroupDimensions.decode(buffer[offset:])
        offset += RepeatingGroupDimensions.SIZE

        self.parties_group = PartiesGroup()
        self.parties_group.decode(buffer[offset:])
        offset += len(buffer) - offset

    def __str__(self):
        return (
            f"ClOrdID: {self.cl_ord_id.value}, Symbol: {self.symbol.value}, TimeInForce: {self.time_in_force.value}, "
            f"ExecInst: {self.exec_inst.value}, TradingCapacity: {self.trading_capacity.value}, SendingTime: {self.sending_time.value}, "
            f"TransactTime: {self.transact_time.value}, MtpGroupID: {self.mtp_group_id.value}, MatchTradePrevention: {self.match_trade_prevention.value}, "
            f"CancelGroupID: {self.cancel_group_id.value}, RiskGroupID: {self.risk_group_id.value}, NumberOfOrders: {self.number_of_orders.value}, "
            f"RepeatingGroupDimensions: BlockLength={self.RepeatingGroupDimensions.block_length}, NumGroups={self.RepeatingGroupDimensions.num_groups}, "
            f"Parties: {self.parties_group.party_ids}"
        )


ER_Rejected:

class ExecutionReportRejected:
    TEMPLATE_ID = 14
    num_groups = 1
    schema_id = 1
    version = 0
    BLOCK_LENGTH = 64

    def __init__(self):
        self.sbe_header = SBEHeader(self.BLOCK_LENGTH, self.TEMPLATE_ID, self.schema_id, self.version, self.num_groups)
        self.cl_ord_id = Char('')
        self.list_seq_no = UINT8(0)
        self.exec_id = UINT64(0)
        self.ord_status = OrdStatusType(0)
        self.reject_reason = OrderRejectReasonCode(0)
        self.options_security_id = OptionsSecurityID('')
        self.side = SideType('')
        self.leaves_qty = UINT32(0)
        self.cum_qty = UINT32(0)
        self.sending_time = UTCTimestampNanos(0)

    def decode(self, buffer):
        offset = 0

        block_length, template_id = self.sbe_header.decode(buffer[offset:offset + SBEHeader.BLOCK_LENGTH])
        offset += SBEHeader.BLOCK_LENGTH

        self.cl_ord_id = Char('')
        self.cl_ord_id.decode(buffer[offset:])
        offset += Char.SIZE

        self.list_seq_no = UINT8(0)
        self.list_seq_no.decode(buffer[offset:])
        offset += UINT8.SIZE

        self.exec_id = UINT64(0)
        self.exec_id.decode(buffer[offset:])
        offset += UINT64.SIZE

        self.ord_status = OrdStatusType(0)
        self.ord_status.decode(buffer[offset:])
        offset += OrdStatusType.SIZE

        self.reject_reason = OrderRejectReasonCode(0)
        self.reject_reason.decode(buffer[offset:])
        offset += OrderRejectReasonCode.SIZE

        self.options_security_id = OptionsSecurityID('')
        self.options_security_id.decode(buffer[offset:])
        offset += OptionsSecurityID.SIZE

        self.side = SideType('')
        self.side.decode(buffer[offset:])
        offset += SideType.SIZE

        self.leaves_qty = UINT32(0)
        self.leaves_qty.decode(buffer[offset:])
        offset += UINT32.SIZE

        self.cum_qty = UINT32(0)
        self.cum_qty.decode(buffer[offset:])
        offset += UINT32.SIZE

        self.sending_time = UTCTimestampNanos(0)
        self.sending_time.decode(buffer[offset:])
        offset += UTCTimestampNanos.SIZE

    def __str__(self):
        return (
            f"ClOrdID: {self.cl_ord_id.value}, ListSeqNo: {self.list_seq_no.value}, ExecID: {self.exec_id.value}, "
            f"OrdStatus: {self.ord_status.value}, RejectReason: {self.reject_reason.value}, OptionsSecurityID: {self.options_security_id.value}, "
            f"Side: {self.side.value}, LeavesQty: {self.leaves_qty.value}, CumQty: {self.cum_qty.value}, SendingTime: {self.sending_time.value}"
        )



ER_Trade:

class ExecutionReportTrade:
    TEMPLATE_ID = 15
    num_groups = 1
    schema_id = 1
    version = 0
    BLOCK_LENGTH = 106

    def __init__(self):
        self.sbe_header = SBEHeader(self.BLOCK_LENGTH, self.TEMPLATE_ID, self.schema_id, self.version, self.num_groups)
        self.order_id = UINT64(0)
        self.cl_ord_id = Char('')
        self.list_seq_no = UINT8(0)
        self.trd_match_id = UINT64(0)
        self.exec_id = UINT64(0)
        self.ord_status = OrdStatusType(0)
        self.options_security_id = OptionsSecurityID('')
        self.side = SideType('')
        self.last_qty = UINT32(0)
        self.last_px = PriceType(0)
        self.leaves_qty = UINT32(0)
        self.cum_qty = UINT32(0)
        self.sending_time = UTCTimestampNanos(0)
        self.transact_time = UTCTimestampNanos(0)
        self.last_liquidity_ind = LastLiquidityIndType(0)
        self.last_mkt = ExchangeCode(0)
        self.open_or_close = OpenOrCloseType('O')
        self.trading_capacity = TradingCapacityType(0)
        self.contra_trading_capacity = TradingCapacityType(0)

    def decode(self, buffer):
        offset = 0

        block_length, template_id = self.sbe_header.decode(buffer[offset:offset + SBEHeader.BLOCK_LENGTH])
        offset += SBEHeader.BLOCK_LENGTH

        self.order_id = UINT64(0)
        self.order_id.decode(buffer[offset:])
        offset += UINT64.SIZE

        self.cl_ord_id = Char('')
        self.cl_ord_id.decode(buffer[offset:])
        offset += Char.SIZE

        self.list_seq_no = UINT8(0)
        self.list_seq_no.decode(buffer[offset:])
        offset += UINT8.SIZE

        self.trd_match_id = UINT64(0)
        self.trd_match_id.decode(buffer[offset:])
        offset += UINT64.SIZE

        self.exec_id = UINT64(0)
        self.exec_id.decode(buffer[offset:])
        offset += UINT64.SIZE

        self.ord_status = OrdStatusType(0)
        self.ord_status.decode(buffer[offset:])
        offset += OrdStatusType.SIZE

        self.options_security_id = OptionsSecurityID('')
        self.options_security_id.decode(buffer[offset:])
        offset += OptionsSecurityID.SIZE

        self.side = SideType('')
        self.side.decode(buffer[offset:])
        offset += SideType.SIZE

        self.last_qty = UINT32(0)
        self.last_qty.decode(buffer[offset:])
        offset += UINT32.SIZE

        self.last_px = PriceType(0)
        self.last_px.decode(buffer[offset:])
        offset += PriceType.MANTISSA_SIZE

        self.leaves_qty = UINT32(0)
        self.leaves_qty.decode(buffer[offset:])
        offset += UINT32.SIZE

        self.cum_qty = UINT32(0)
        self.cum_qty.decode(buffer[offset:])
        offset += UINT32.SIZE

        self.sending_time = UTCTimestampNanos(0)
        self.sending_time.decode(buffer[offset:])
        offset += UTCTimestampNanos.SIZE

        self.transact_time = UTCTimestampNanos(0)
        self.transact_time.decode(buffer[offset:])
        offset += UTCTimestampNanos.SIZE

        self.last_liquidity_ind = LastLiquidityIndType(0)
        self.last_liquidity_ind.decode(buffer[offset:])
        offset += LastLiquidityIndType.SIZE

        self.last_mkt = ExchangeCode(0)
        self.last_mkt.decode(buffer[offset:])
        offset += ExchangeCode.SIZE

        self.open_or_close = OpenOrCloseType('O')
        self.open_or_close.decode(buffer[offset:])
        offset += OpenOrCloseType.SIZE

        self.trading_capacity = TradingCapacityType(0)
        self.trading_capacity.decode(buffer[offset:])
        offset += TradingCapacityType.SIZE

        self.contra_trading_capacity = TradingCapacityType(0)
        self.contra_trading_capacity.decode(buffer[offset:])
        offset += TradingCapacityType.SIZE

    def __str__(self):
        return (
            f"OrderID: {self.order_id.value}, ClOrdID: {self.cl_ord_id.value}, ListSeqNo: {self.list_seq_no.value}, "
            f"TrdMatchID: {self.trd_match_id.value}, ExecID: {self.exec_id.value}, OrdStatus: {self.ord_status.value}, "
            f"OptionsSecurityID: {self.options_security_id.value}, Side: {self.side.value}, LastQty: {self.last_qty.value}, "
            f"LastPx: {self.last_px.value}, LeavesQty: {self.leaves_qty.value}, CumQty: {self.cum_qty.value}, SendingTime: {self.sending_time.value}, "
            f"TransactTime: {self.transact_time.value}, LastLiquidityInd: {self.last_liquidity_ind.value}, LastMkt: {self.last_mkt.value}, "
            f"OpenOrClose: {self.open_or_close.value}, TradingCapacity: {self.trading_capacity.value}, ContraTradingCapacity: {self.contra_trading_capacity.value}"
        )
