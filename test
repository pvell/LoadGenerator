import struct

# Message header definition
MESSAGE_HEADER = struct.Struct("<HHQ")

# NewOrderSingle definition
NEW_ORDER_SINGLE = struct.Struct("<6s6s6sii6s6s6sfiifiii")

# Function to encode the NewOrderSingle message
def encode_message(cl_ord_id, mpid, symbol, symbol_sfx, side, order_qty, ord_type, price,
                   time_in_force, order_capacity, cust_order_capacity, exec_inst, peg_offset_value,
                   peg_price_type, expire_time, min_qty, display_qty, display_method,
                   reserve_replenish_timing, display_min_incr, locate_reqd, reprice_frequency,
                   reprice_behavior, cancel_group_id, stp_group_id, self_trade_prevention,
                   risk_group_id, lnk_id):
    # Pack the NewOrderSingle fields
    new_order_single_packed = NEW_ORDER_SINGLE.pack(cl_ord_id.encode(), mpid.encode(), symbol.encode(),
                                                    symbol_sfx.encode(), side, order_qty, ord_type,
                                                    price, time_in_force, order_capacity,
                                                    cust_order_capacity, exec_inst, peg_offset_value,
                                                    peg_price_type, expire_time, min_qty, display_qty,
                                                    display_method, reserve_replenish_timing,
                                                    display_min_incr, locate_reqd, reprice_frequency,
                                                    reprice_behavior, cancel_group_id, stp_group_id,
                                                    self_trade_prevention, risk_group_id, lnk_id)
    # Pack the message header
    message_header = MESSAGE_HEADER.pack(1, 0, len(new_order_single_packed))

    # Concatenate the message header and the NewOrderSingle fields
    encoded_message = message_header + new_order_single_packed

    return encoded_message

# Function to decode the encoded message
def decode_message(encoded_message):
    # Unpack the message header
    header_fields = MESSAGE_HEADER.unpack_from(encoded_message)
    template_id = header_fields[0]
    schema_id = header_fields[1]
    message_size = header_fields[2]

    # Unpack the NewOrderSingle fields
    new_order_single_fields = NEW_ORDER_SINGLE.unpack_from(encoded_message, MESSAGE_HEADER.size)

    # Create a dictionary with the field names and values
    decoded_message = {
        "template_id": template_id,
        "schema_id": schema_id,
        "message_size": message_size,
        "cl_ord_id": new_order_single_fields[0].decode().strip('\x00'),
        "mpid": new_order_single_fields[1].decode().strip('\x00'),
        "symbol": new_order_single_fields[2].decode().strip('\x00'),
        "symbol_sfx": new_order_single_fields[3].decode().strip('\x00'),
        "side": new_order_single_fields[4],
        "order_qty": new_order_single_fields[5],
        "ord_type": new_order_single_fields[6],
        "price": new_order_single_fields[7],
        "time_in_force": new_order_single_fields[8],
        "order_capacity": new_order_single_fields[9],
        "cust_order_capacity": new_order_single_fields[10],
        "exec_inst": new_order_single_fields[11],
        "peg_offset_value": new_order_single_fields[12],
        "peg_price_type": new_order_single_fields[13],
        "expire_time": new_order_single_fields[14],
        "min_qty": new_order_single_fields[15],
        "display_qty": new_order_single_fields[16],
        "display_method": new_order_single_fields[17],
        "reserve_replenish_timing": new_order_single_fields[18],
        "display_min_incr": new_order_single_fields[19],
        "locate_reqd": new_order_single_fields[20],
        "reprice_frequency": new_order_single_fields[21],
        "reprice_behavior": new_order_single_fields[22],
        "cancel_group_id": new_order_single_fields[23],
        "stp_group_id": new_order_single_fields[24],
        "self_trade_prevention": new_order_single_fields[25],
        "risk_group_id": new_order_single_fields[26],
        "lnk_id": new_order_single_fields[27],
    }

    return decoded_message




Traceback (most recent call last):
  File "/home/pvellanki/loadgenerator/sbe/sbe_load_generator.py", line 35, in <module>
    encoded_message = encode_message(
  File "/home/pvellanki/loadgenerator/sbe/sbe_encoder_decoder.py", line 17, in encode_message
    new_order_single_packed = NEW_ORDER_SINGLE.pack(cl_ord_id.encode(), mpid.encode(), symbol.encode(),
struct.error: pack expected 15 items for packing (got 28)
