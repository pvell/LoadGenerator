from sbe import Encoder, Decoder
from sbe.types import *

# Define the schema
schema_xml = """
<your_schema_xml_here>
"""

# Define the input message
input_message = {
    "SendingTime": UTCTimestampNanos(123456789),
    "ClOrdID": NewOrderSingleClOrdID("ORD123456789"),
    "OptionsSecurityID": NewOrderSingleOptionsSecurityID("OPT123456"),
    "Side": SideType.Buy,
    "OrderQty": UInt32(100),
    "OrdType": OrdType.Limit,
    "Price": PriceType(10.5),
    "TimeInForce": TimeInForceType.GoodTillCancel,
    "OpenOrClose": OpenOrCloseType.Open,
    "ExecInst": ExecInstType.DoNotIncrease,
    "TradingCapacity": TradingCapacityType.Principal,
    "RepriceFrequency": RepriceFrequencyType(5),
    "RepriceBehavior": RepriceBehaviorType.CancelAndReprice,
    "MtpGroupID": UInt16(1),
    "MatchTradePrevention": MatchTradePreventionType.Enabled,
    "CancelGroupID": UInt16(2),
    "RiskGroupID": UInt16(3),
    "Parties": [
        {
            "PartyID": NewOrderSinglePartyID("Party1"),
            "PartyIDSource": "1",
            "PartyRole": UInt8(1)
        },
        {
            "PartyID": NewOrderSinglePartyID("Party2"),
            "PartyIDSource": "2",
            "PartyRole": UInt8(2)
        }
    ]
}

# Create an instance of the Encoder
encoder = Encoder(schema_xml)

# Encode the input message
encoded_message = encoder.encode_message("NewOrderSingle", input_message)

# Print the encoded message
print("Encoded message:")
print(encoded_message)

# Create an instance of the Decoder
decoder = Decoder(schema_xml)

# Decode the encoded message
decoded_message = decoder.decode_message("NewOrderSingle", encoded_message)

# Print the decoded message
print("\nDecoded message:")
print(decoded_message)
