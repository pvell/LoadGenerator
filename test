import configparser
import random
import time
import quickfix as fix

# Global variables
sessions = {}

# Class representing the FIX application
class MyApplication(fix.Application):
    def __init__(self, template_file, message_weights, message_rate):
        super().__init__()
        self.template_file = template_file
        self.message_weights = message_weights
        self.message_rate = message_rate
        self.session_id = None

    def onCreate(self, sessionID):
        print("Session created -", sessionID.toString())
        self.session_id = sessionID

    def fromAdmin(self, message, sessionID):
        global sessions
        session_id = sessionID.toString()
        incoming_msg_seq_num = int(message.getHeader().getField(34))
        msg_type = message.getHeader().getField(35)

        if msg_type == 'A':  # Logon message
            if incoming_msg_seq_num == 1:
                print(f"Session established for {session_id}")
                sessions[session_id] = True
        elif msg_type == '5':  # Logout message
            print(f"Session disconnected for {session_id}")
            sessions[session_id] = False

    def onLogout(self, sessionID):
        print("Logout initiated -", sessionID.toString())

    def generate_message(self, template):
        # Replace other placeholders in the message template as needed
        message = template.replace('<SeqNum>', str(get_outgoing_seq_num(self.session_id)))
        message = message.replace('<SendingTime>', fix.UtcTimeStamp().getString())

        # Calculate the CheckSum
        checksum = calculate_checksum(message)

        # Calculate the message length (excluding SOH characters)
        message_length = len(message) - message.count('|')

        # Replace the placeholders for message length and CheckSum
        message = message.replace('<BodyLength>', str(message_length))
        message = message.replace('<CheckSum>', checksum)

        return message

    def generate_load(self):
        # Read the template file and extract message templates
        with open(self.template_file, 'r') as file:
            templates = file.read().splitlines()

        # Generate messages based on weights
        load = []
        for msg_type, weight in self.message_weights.items():
            if msg_type in templates:
                template = templates[templates.index(msg_type) + 1]
                for _ in range(weight):
                    message = self.generate_message(template)
                    load.append(message)

        return load

    def run(self):
        # Initialize FIX settings
        settings = fix.SessionSettings(self.connection_config_file)

        # Initialize FIX application
        application = fix.SocketInitiator(self, fix.FileStoreFactory(settings), settings)

        # Start the FIX sessions
        application.start()

        # Wait for sessions to be established
        while not all(sessions.values()):
            time.sleep(1)

        # Generate and send messages
        load = self.generate_load()

        start_time = time.time()
        message_count = 0

        while True:
            elapsed_time = time.time() - start_time

            if elapsed_time >= self.message_rate:
                break

            if message_count >= len(load):
                message_count = 0

            message = fix.Message(load[message_count])
            fix.Session.sendToTarget(message, self.session_id)

            message_count += 1

            time.sleep(1)

        # Stop the FIX sessions
        application.stop()

# Read configuration from config.ini

config = configparser.ConfigParser()
config.read('config.ini')

# Load configuration values
template_file = config.get('LoadGenerator', 'template_file')
connection_config_file = config.get('LoadGenerator', 'connection_config_file')
log_file = config.get('LoadGenerator', 'log_file')
message_rate = float(config.get('LoadGenerator', 'message_rate'))
send_duration = int(config.get('LoadGenerator', 'send_duration'))

message_weights = dict(config.items('MessageTypes'))

# Initialize the FIX application
app = MyApplication(template_file, message_weights, message_rate)
app.connection_config_file = connection_config_file

# Run the FIX application
app.run()
