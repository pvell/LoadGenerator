class NewOrderSingle:
    TEMPLATE_ID = 1
    BLOCK_LENGTH = 7

    def __init__(self, **kwargs):
        self.sbe_header = SBEHeader(self.BLOCK_LENGTH, self.TEMPLATE_ID, 0, 0, 1)
        self.fields = {
            'sending_time': UTCTimestampNanos(0),
            'cl_ord_id': Char(''),
            'time_in_force': TimeInForceType(0),
            'exec_inst': ExecInstType(0),
            'trading_capacity': TradingCapacityType(0),
            'mtp_group_id': MtpGroupIDType(0),
            'match_trade_prevention': MatchTradePreventionType(0),
            'cancel_group_id': UINT16(0),
            'risk_group_id': UINT16(0)
        }

        for field in kwargs:
            if field in self.fields:
                self.fields[field] = kwargs[field]

    def encode(self):
        encoded_header = self.sbe_header.encode()
        encoded_fields = [self.fields[field].encode() for field in self.fields]
        encoded_message = encoded_header + b''.join(encoded_fields)
        return encoded_message

    def decode(self, buffer):
        offset = 0

        block_length, template_id, schema_id, version, num_groups = self.sbe_header.decode(buffer[offset:])
        offset += self.BLOCK_LENGTH

        for field in self.fields:
            self.fields[field].decode(buffer[offset:])
            offset += self.fields[field].SIZE

    def __getattr__(self, field_name):
        if field_name in self.fields:
            return self.fields[field_name]
        else:
            raise AttributeError(f"'NewOrderSingle' object has no attribute '{field_name}'")

    def __setattr__(self, field_name, value):
        if field_name == 'sbe_header':
            self.__dict__[field_name] = value
        elif field_name in self.fields:
            self.fields[field_name] = value
        else:
            self.__dict__[field_name] = value





# Create an instance of NewOrderSingle
order = NewOrderSingle(
    sending_time=UTCTimestampNanos(1623976800000000000),
    cl_ord_id=Char('ORD001'),
    time_in_force=TimeInForceType(1),
    exec_inst=ExecInstType(2),
    trading_capacity=TradingCapacityType(3),
    mtp_group_id=MtpGroupIDType(4),
    match_trade_prevention=MatchTradePreventionType(5),
    cancel_group_id=UINT16(6),
    risk_group_id=UINT16(7)
)

# Encode the NewOrderSingle instance
encoded_message = order.encode()

# Print the encoded message
print(encoded_message)





class NewOrderSingle:
    TEMPLATE_ID = 1
    num_groups = 1
    schema_id = 1
    version = 266
    BLOCK_LENGTH = 7

    def __init__(self, **kwargs):
        self.sbe_header = SBEHeader(self.BLOCK_LENGTH, self.TEMPLATE_ID, self.schema_id, self.version, self.num_groups)
        self.fields = {
            'sending_time': kwargs.get('sending_time', UTCTimestampNanos(0)),
            'cl_ord_id': kwargs.get('cl_ord_id', Char('')),
            'options_security_id_35': kwargs.get('options_security_id_35', Char('')),
            'side': kwargs.get('side', Char('')),
            'order_qty': kwargs.get('order_qty', UINT32(0)),
            'ord_type': kwargs.get('ord_type', Char('')),
            'price': kwargs.get('price', PriceType(0, 0)),
            'time_in_force': kwargs.get('time_in_force', TimeInForceType(0)),
            'open_or_close': kwargs.get('open_or_close', OpenOrCloseType('O')),
            'exec_inst': kwargs.get('exec_inst', ExecInstType(0)),
            'trading_capacity': kwargs.get('trading_capacity', TradingCapacityType(0)),
            'reprice_frequency': kwargs.get('reprice_frequency', RepriceFrequencyType(0)),
            'reprice_behavior': kwargs.get('reprice_behavior', RepriceBehaviorType(0)),
            'mtp_group_id': kwargs.get('mtp_group_id', MtpGroupIDType(0)),
            'match_trade_prevention': kwargs.get('match_trade_prevention', MatchTradePreventionType(0)),
            'cancel_group_id': kwargs.get('cancel_group_id', UINT16(0)),
            'risk_group_id': kwargs.get('risk_group_id', UINT16(0)),
            'parties': kwargs.get('parties', []),
        }

    def encode(self):
        encoded_header = self.sbe_header.encode()
        encoded_fields = [field.encode() for field in self.fields.values()]
        encoded_message = encoded_header + b''.join(encoded_fields)
        return encoded_message


# Example usage:
sending_time = UTCTimestampNanos(int(time.time() * 10**9))
cl_ord_id = ''.join(choices(string.ascii_uppercase + string.digits, k=20))
options_security_id = choices(security_ids)[0]
side = SideType.BUY  # Assuming a BUY order, you can customize this
order_qty = UINT32(randint(1, 100))
ord_type = OrdType.LIMIT  # Assuming a LIMIT order, you can customize this
time_in_force = TimeInForceType.DAY  # Assuming a GTC order, you can customize this
exec_inst = ExecInstType.ParticipateDoNotInitiate  # Assuming primary peg and display price instructions, you can customize this
trading_capacity = TradingCapacityType.CUSTOMER  # Assuming principal capacity, you can customize this
parties = [Party('EFID', 'D', 'CUSTOMER')]  # Assuming a single party, you can customize this

# Create an instance of NewOrderSingle and set the field values
new_order_single = NewOrderSingle(
    sending_time=sending_time,
    cl_ord_id=cl_ord_id,
    options_security_id_35=options_security_id,
    side=side,
    order_qty=order_qty,
    ord_type=ord_type,
    time_in_force=time_in_force,
    exec_inst=exec_inst,
    trading_capacity=trading_capacity,
    parties=parties
)

def generate_message(message_type):
    if message_type == 'NewOrderSingle':
        sending_time = UTCTimestampNanos(int(time.time() * 10**9))
        cl_ord_id = ''.join(choices(string.ascii_uppercase + string.digits, k=20))
        options_security_id = choices(security_ids)[0]
        side = SideType.BUY  # Assuming a BUY order, you can customize this
        order_qty = UINT32(randint(1, 100))
        ord_type = OrdType.LIMIT  # Assuming a LIMIT order, you can customize this
        time_in_force = TimeInForceType.DAY  # Assuming a GTC order, you can customize this
        exec_inst = ExecInstType.ParticipateDoNotInitiate  # Assuming primary peg and display price instructions, you can customize this
        trading_capacity = TradingCapacityType.CUSTOMER  # Assuming principal capacity, you can customize this
        parties = [Party('EFID', 'D', 'CUSTOMER')]  # Assuming a single party, you can customize this

        print(sending_time,cl_ord_id,options_security_id,side,order_qty,ord_type,time_in_force,exec_inst,trading_capacity,parties)

        # Create an instance of NewOrderSingle and set the field values
        new_order_single = NewOrderSingle(
            sending_time=sending_time,
            cl_ord_id=cl_ord_id,
            options_security_id_35=options_security_id,
            side=side,
            order_qty=order_qty,
            ord_type=ord_type,
            time_in_force=time_in_force,
            exec_inst=exec_inst,
            trading_capacity=trading_capacity,
            parties=parties
        )

        # Encode the NewOrderSingle instance
        encoded_message = new_order_single.encode()

        # Print the encoded message
        print(encoded_message)

        return encoded_message


