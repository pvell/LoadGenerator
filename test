import struct

# Decode boolean value
def decode_boolean(buffer, offset):
    value = struct.unpack_from('>B', buffer, offset)[0]
    return value != 0, offset + 1

# Decode price value
def decode_price(buffer, offset):
    exponent = struct.unpack_from('>b', buffer, offset)[0]
    mantissa = struct.unpack_from('>Q', buffer, offset + 1)[0]
    value = mantissa * 10 ** exponent
    return value, offset + 9

# Decode short price value
def decode_short_price(buffer, offset):
    exponent = struct.unpack_from('>b', buffer, offset)[0]
    mantissa = struct.unpack_from('>H', buffer, offset + 1)[0]
    value = mantissa * 10 ** exponent
    return value, offset + 3

# Decode UTC timestamp in nanoseconds
def decode_utc_timestamp_nanos(buffer, offset):
    unit = struct.unpack_from('>B', buffer, offset)[0]
    time = struct.unpack_from('>Q', buffer, offset + 1)[0]
    return time, offset + 9

# Decode repeating group dimensions
def decode_repeating_group_dimensions(buffer, offset):
    block_length = struct.unpack_from('>B', buffer, offset)[0]
    num_in_group = struct.unpack_from('>B', buffer, offset + 1)[0]
    return block_length, num_in_group, offset + 2

# Decode enumeration value
def decode_enum(buffer, offset, encoding_type):
    if encoding_type == 'uint8':
        value = struct.unpack_from('>B', buffer, offset)[0]
        return value, offset + 1
    elif encoding_type == 'char':
        value = struct.unpack_from('>c', buffer, offset)[0]
        return value.decode('utf-8'), offset + 1
    elif encoding_type == 'uint16':
        value = struct.unpack_from('>H', buffer, offset)[0]
        return value, offset + 2
    else:
        raise ValueError('Unsupported encoding type: ' + encoding_type)

# Example usage
buffer = b'\x01\x00\x00\x00\x00\x00\x00\x00\x00'
offset = 0

boolean_value, offset = decode_boolean(buffer, offset)
print('Boolean value:', boolean_value)

price_value, offset = decode_price(buffer, offset)
print('Price value:', price_value)

short_price_value, offset = decode_short_price(buffer, offset)
print('Short price value:', short_price_value)

utc_timestamp, offset = decode_utc_timestamp_nanos(buffer, offset)
print('UTC timestamp (nanoseconds):', utc_timestamp)

block_length, num_in_group, offset = decode_repeating_group_dimensions(buffer, offset)
print('Block length:', block_length)
print('Number in group:', num_in_group)

enum_value, offset = decode_enum(buffer, offset, 'uint8')
print('Enum value:', enum_value)
