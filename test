class PriceType:
    MANTISSA_SIZE = 16
    EXPONENT = -8

    def __init__(self, mantissa):
        self.mantissa = mantissa

    def encode(self):
        return pack('>Q', self.mantissa).rjust(self.MANTISSA_SIZE, b'\x00')

    def decode(self, buffer):
        self.mantissa = unpack_from('>Q', buffer)[0]



class ShortPriceType:
    MANTISSA_SIZE = 2
    EXPONENT = -2

    def __init__(self, mantissa):
        self.mantissa = mantissa

    def encode(self):
        return pack('>Q', self.mantissa << 48)  # Pad the mantissa to eight bytes with leading zeros

    def decode(self, buffer):
        self.mantissa = unpack_from('>Q', buffer)[0] >> 48  # Shift the mantissa back to its original position





# ... (previous parts of the script)

# Generate the timestamp for the file name up to minutes
timestamp = datetime.datetime.now().strftime('%Y-%m-%d_%H-%M')
output_file_name = f'trade_report_{timestamp}.xlsx'

# Create a Pandas Excel writer using the 'openpyxl' engine and pass the Workbook object 'wb'
with pd.ExcelWriter(output_file_name, engine='openpyxl', mode='w', if_sheet_exists='replace') as writer:
    for batch_start in tqdm(range(0, len(root_trade), batch_size)):
        batch_end = min(batch_start + batch_size, len(root_trade))
        batch_data = root_trade[batch_start:batch_end]
        
        # ... (process_batch and other parts of the loop)
        
        # Process the batch and write to the Excel sheet
        processed_batch_data = process_batch(batch_data_frame, sub_id_to_rpt_ids)
        sheet_name = f'Batch_{batch_start}'
        pd.DataFrame(processed_batch_data).to_excel(writer, sheet_name=sheet_name, index=False)

print(f"Processing completed. Result saved to '{output_file_name}'.")

