generated_message = "8=FIXT.1.19=21035=D34=6249=QAXMXE1352=20230707-18:03:43.26656=MXOP11=30750718=h38=10040=244=854=255=AMD59=060=20230707-18:03:43.26677=O201=1202=100447=D448=QAX1452=66453=1541=2309151815=621035=A004000110=219"

fields = ['453', '448', '447', '452']
rearranged_fields = []

for field in fields:
    start_index = generated_message.find(field + '=')
    if start_index != -1:
        end_index = generated_message.find('=', start_index + len(field) + 1)
        if end_index != -1:
            value = generated_message[start_index + len(field) + 1: end_index]
            rearranged_fields.append(field + '=' + value)

rearranged_message = ''.join(rearranged_fields)

print(rearranged_message)




def send_new_order_single(self, order_type, time_in_force, order_qty, symbol, exec_inst=''):
    with open(self.app.template_file, 'r') as file:
        template_messages = file.readlines()

    for template_message in template_messages:
        placeholders = {
            '<ClOrdID>': self.app.generate_clordid(),
            '<OrderQty>': str(order_qty),
            '<Symbol>': symbol,
            '<OrdType>': order_type,
            '<TimeInForce>': time_in_force,
            '<ExecInst>': exec_inst
        }
        message = replace_placeholders(template_message, placeholders)

        new_order_message = fix.Message()
        new_order_message.setString(message, False, self.app.message_factory)

        # Create the repeating group
        party_group = fix.Group(453, 448, 447, 452)

        # Add party details to the repeating group
        party_group.setField(448, "QAX1")
        party_group.setField(447, "D")
        party_group.setField(452, "66")

        # Add the repeating group to the message
        new_order_message.addGroup(party_group)

        fix.Session.sendToTarget(new_order_message, self.session_id)

        time.sleep(2)

        self.assertTrue(self.app.execution_report_received)
        exec_report = self.app.last_execution_report
        cl_ord_id = exec_report.getField(11)

        validate_execution_report(exec_report, order_qty=order_qty, symbol=symbol, order_type=order_type, tif=time_in_force)
        self.assertEqual(exec_report.getField(39), '0')



2
Traceback (most recent call last):
  File "fix_load_generator.py", line 275, in <module>
    app.run()
  File "fix_load_generator.py", line 245, in run
    message = self.generate_message(load[message_count], session_id)
  File "fix_load_generator.py", line 97, in generate_message
    party_group = fix.Group(453, 448, 447, 452)
  File "/usr/local/lib64/python3.6/site-packages/quickfix.py", line 1538, in __init__
    this = _quickfix.new_Group(*args)
NotImplementedError: Wrong number or type of arguments for overloaded function 'new_Group'.
  Possible C/C++ prototypes are:
    FIX::Group::Group(int,int)
    FIX::Group::Group(int,int,int const [])
    FIX::Group::Group(int,int,message_order const &)
    FIX::Group::Group(FIX::Group const &)

