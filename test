def generate_load(self):
    # Read the template file and extract message templates
    with open(self.template_file, 'r') as file:
        templates = file.readlines()

    # Generate messages based on weights
    load = []
    for template in templates:
        message_type = self.get_message_type(template)
        if message_type and message_type in self.message_weights:
            weight = int(self.message_weights[message_type])
            print(f"Adding {weight} instances of message type {message_type}")
            load.extend([template.strip()] * weight)

    print(f"Generated load: {load}")
    random.shuffle(load)
    load_length = len(load)
    iterations = int(self.message_rate * self.send_duration)

    # Repeat load if necessary to achieve desired send duration
    if iterations > load_length:
        quotient, remainder = divmod(iterations, load_length)
        print(f"Repeating load: {quotient} times, with remainder: {remainder}")
        load = load * quotient + load[:remainder]
    else:
        load = load[:iterations]

    return load
    
    
    
def get_message_type(self, message):
    fields = message.split('|')
    for field in fields:
        if field.startswith('35='):
            return field.split('=')[1]
    return None

