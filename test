def decode_message(schema, encoded_message):
    block_length = struct.unpack('>H', encoded_message[0:2])[0]
    template_id = struct.unpack('B', encoded_message[2:3])[0]
    schema_id = struct.unpack('B', encoded_message[3:4])[0]
    version = struct.unpack('>H', encoded_message[4:6])[0]
    message_id = struct.unpack('>H', encoded_message[6:8])[0]

    for message_name, message_info in schema.items():
        if message_info['id'] == message_id:
            fields = message_info['fields']
            break
    else:
        raise ValueError(f"Message with ID {message_id} not found in the schema.")

    decoded_fields = {}
    encoded_fields_count = struct.unpack('>H', encoded_message[8:10])[0]
    offset = 10
    for _ in range(encoded_fields_count):
        field_id = struct.unpack('>H', encoded_message[offset:offset + 2])[0]
        field_length = struct.unpack('>H', encoded_message[offset + 2:offset + 4])[0]
        encoded_field = encoded_message[offset + 4:offset + 4 + field_length]
        if field_id in fields:
            field_type = fields[field_id]
            decoded_value = decode_field(field_type, encoded_field)
            decoded_fields[field_id] = decoded_value
        offset += 4 + field_length

    return message_name, decoded_fields
    
    
    
    
    git clone https://github.com/real-logic/simple-binary-encoding.git


path/to/sbe-tool -d schema_directory -o output_directory --package python my_schema.xml

