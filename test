class MyApplication(fix.Application):

Capturing ClordId's

# ... (Existing code)

    def fromApp(self, message, sessionID):
        msg_type = fix.MsgType()
        message.getHeader().getField(msg_type)

        if msg_type.getValue() == fix.MsgType_ExecutionReport:
            cl_ord_id = fix.ClOrdID()
            exec_report = fix.ExecutionReport()
            message.getField(cl_ord_id)
            message.getField(exec_report)
            self.last_execution_report = exec_report

            # Check if the execution report matches the conditions
            if exec_report.getField(39).getString() == '0' or exec_report.getField(39).getString() == '150':
                self.execution_report_received = True
                
                # Extract ClOrdID and OrdID from the execution report
                clordid = cl_ord_id.getString()
                ordid = exec_report.getField(fix.OrderID()).getString()

                # Write ClOrdID and OrdID to the text file
                self.write_clordid_ordid_to_file(clordid, ordid)


Adding order cancels:

class MyApplication(fix.Application):
    def __init__(self, message_weights, message_rate):
        # Existing code...
        self.captured_clordids = []  # Initialize an empty list to store the captured ClOrdIDs



class MyApplication(fix.Application):
    # Existing code...

    def fromApp(self, message, sessionID):
        msg_type = fix.MsgType()
        message.getHeader().getField(msg_type)

        if msg_type.getValue() == fix.MsgType_ExecutionReport:
            cl_ord_id = fix.ClOrdID()
            exec_report = fix.ExecutionReport()
            message.getField(cl_ord_id)
            message.getField(exec_report)
            self.last_execution_report = exec_report

            # Check if the execution report matches the conditions
            if exec_report.getField(39).getString() == '0' or exec_report.getField(39).getString() == '150':
                self.execution_report_received = True
                
                # Extract ClOrdID and OrdID from the execution report
                clordid = cl_ord_id.getString()
                ordid = exec_report.getField(fix.OrderID()).getString()

                # Write ClOrdID and OrdID to the text file
                self.write_clordid_ordid_to_file(clordid, ordid)

                # Store the captured ClOrdID in the list
                self.captured_clordids.append(clordid)




class MyApplication(fix.Application):
    # Existing code...

    def send_order_cancel_request(self, orig_cl_ord_id):
        if not self.captured_clordids:
            print("No captured ClOrdIDs to generate order cancel.")
            return

        # Select a random ClOrdID from the list of captured ClOrdIDs
        selected_clordid = random.choice(self.captured_clordids)

        # Create the OrderCancelRequest message
        message = fix.Message()
        # Set the required fields for OrderCancelRequest
        # For example:
        message.getHeader().setField(fix.MsgType(fix.MsgType_OrderCancelRequest))
        message.setField(fix.ClOrdID(self.generate_clordid()))
        message.setField(fix.OrigClOrdID(selected_clordid))
        # Set other fields as required for the cancel request

        # Send the OrderCancelRequest message
        fix.Session.sendToTarget(message, self.session_id)



class MyApplication(fix.Application):
    def __init__(self, message_weights, message_rate):
        super().__init__()
        # Existing code...
        self.session_sequence_numbers = {}  # Dictionary to store session-specific sequence numbers

    def onCreate(self, sessionID):
        print("Session created -", sessionID.toString())
        self.sessions[sessionID] = fix.Session.lookupSession(sessionID)

        target_comp_id = sessionID.getTargetCompID().getString()
        self.session_sequence_numbers[sessionID.toString()] = int(config.get(target_comp_id, "next_sequence_number"))

    # Rest of the code...






