import struct

# Define the SBE message structure

NEW_ORDER_SINGLE = struct.Struct("!16s16s6s2sBI16sB4sBBIIfHHHBBH")

# Function to encode a NewOrderSingle message
def encode_message():
    cl_ord_id = "ORDER000001"
    mpid = "MPID001"
    symbol = "AAPL"
    symbol_sfx = ""
    side = 1  # Buy side
    order_qty = 100
    ord_type = 2  # Limit order
    price = 150.0
    time_in_force = 0  # Day order
    order_capacity = 1  # Agency
    cust_order_capacity = 1  # Member trading for their own account
    exec_inst = 1  # Immediate or Cancel
    peg_offset_value = 0.0
    peg_price_type = 0  # Trailing stop peg
    expire_time = 0
    min_qty = 0
    display_qty = 0
    display_method = 0  # Initial
    reserve_replenish_timing = 0  # Immediate
    display_min_incr = 0
    locate_reqd = 'N'
    reprice_frequency = 0  # Standing limit
    reprice_behavior = 0  # Aggressive
    cancel_group_id = 0
    stp_group_id = 0
    self_trade_prevention = 0  # Decrease Qty
    risk_group_id = 0
    lnk_id = "LINK001"

    new_order_single_packed = NEW_ORDER_SINGLE.pack(cl_ord_id.encode(), mpid.encode(), symbol.encode(),
                                                    symbol_sfx.encode(), side, order_qty, ord_type, price,
                                                    time_in_force, order_capacity, cust_order_capacity,
                                                    exec_inst, peg_offset_value, peg_price_type,
                                                    expire_time, min_qty, display_qty, display_method,
                                                    reserve_replenish_timing, display_min_incr, locate_reqd,
                                                    reprice_frequency, reprice_behavior, cancel_group_id,
                                                    stp_group_id, self_trade_prevention, risk_group_id,
                                                    lnk_id.encode())
    return new_order_single_packed

# Function to decode a NewOrderSingle message
def decode_message(packed_message):
    cl_ord_id, mpid, symbol, symbol_sfx, side, order_qty, ord_type, price, time_in_force, \
    order_capacity, cust_order_capacity, exec_inst, peg_offset_value, peg_price_type, expire_time, \
    min_qty, display_qty, display_method, reserve_replenish_timing, display_min_incr, locate_reqd, \
    reprice_frequency, reprice_behavior, cancel_group_id, stp_group_id, self_trade_prevention, \
    risk_group_id, lnk_id = NEW_ORDER_SINGLE.unpack(packed_message)
    
    # Decode the fields if necessary
    cl_ord_id = cl_ord_id.decode().strip()
    mpid = mpid.decode().strip()
    symbol = symbol.decode().strip()
    symbol_sfx = symbol_sfx.decode().strip()
    lnk_id = lnk_id.decode().strip()
    
    # Return the decoded field values
    return cl_ord_id, mpid, symbol, symbol_sfx, side, order_qty, ord_type, price, time_in_force, \
    order_capacity, cust_order_capacity, exec_inst, peg_offset_value, peg_price_type, expire_time, \
    min_qty, display_qty, display_method, reserve_replenish_timing, display_min_incr, locate_reqd, \
    reprice_frequency, reprice_behavior, cancel_group_id, stp_group_id, self_trade_prevention, \
    risk_group_id, lnk_id

# Encode a NewOrderSingle message
encoded_message = encode_message()
print("Encoded message:", encoded_message)

# Decode a packed message
decoded_fields = decode_message(encoded_message)
print("Decoded fields:", decoded_fields)
