from struct import pack, unpack_from


class SBEHeader:
    BLOCK_LENGTH = 7

    def __init__(self, template_id):
        self.block_length = self.BLOCK_LENGTH
        self.template_id = template_id
        self.schema_id = 0
        self.version = 0
        self.num_groups = 0

    def encode(self):
        return pack('>HBBHH', self.block_length, self.template_id, self.schema_id, self.version, self.num_groups)

    @classmethod
    def decode(cls, buffer):
        block_length, template_id, schema_id, version, num_groups = unpack_from('>HBBHH', buffer)
        return cls(template_id), block_length


class PriceType:
    def __init__(self, mantissa, exponent):
        self.mantissa = mantissa
        self.exponent = exponent

    def encode(self):
        return pack('>biQ', self.exponent, -8, self.mantissa)

    @classmethod
    def decode(cls, buffer):
        exponent, _, mantissa = unpack_from('>biQ', buffer)
        return cls(mantissa, exponent)


class Uint32:
    def __init__(self, value):
        self.value = value

    def encode(self):
        return pack('>I', self.value)

    @classmethod
    def decode(cls, buffer):
        value, = unpack_from('>I', buffer)
        return cls(value)


class ShortPriceType:
    def __init__(self, exponent, mantissa):
        self.exponent = exponent
        self.mantissa = mantissa

    def encode(self):
        return pack('>bQ', self.exponent, self.mantissa)

    @classmethod
    def decode(cls, buffer):
        exponent, mantissa = unpack_from('>bQ', buffer)
        return cls(exponent, mantissa)

    def __str__(self):
        return f"Exponent: {self.exponent}, Mantissa: {self.mantissa}"


class UTCTimestampNanos:
    SIZE = 8

    def __init__(self, timestamp):
        self.timestamp = timestamp

    def encode(self):
        return pack('>Q', self.timestamp)

    @classmethod
    def decode(cls, buffer):
        timestamp, = unpack_from('>Q', buffer)
        return cls(timestamp)


class Party:
    def __init__(self, party_id: str, party_id_source: str, party_role: str):
        self.party_id = party_id
        self.party_id_source = party_id_source
        self.party_role = party_role

    def encode(self):
        return pack('>4s2s2s', self.party_id.encode(), self.party_id_source.encode(), self.party_role.encode())

    @classmethod
    def decode(cls, buffer):
        party_id, party_id_source, party_role = unpack_from('>4s2s2s', buffer)
        return cls(party_id.decode(), party_id_source.decode(), party_role.decode())


class Char:
    SIZE = 1

    def __init__(self, value):
        self.value = value

    def encode(self):
        return pack('s', self.value.encode())

    @classmethod
    def decode(cls, buffer):
        value, = unpack_from('s', buffer)
        return cls(value.decode())


class TimeInForceType:
    SIZE = 1

    def __init__(self, value):
        self.value = value

    def encode(self):
        return pack('B', self.value)

    @classmethod
    def decode(cls, buffer):
        value, = unpack_from('B', buffer)
        return cls(value)


class ExecInstType:
    SIZE = 1

    def __init__(self, value):
        self.value = value

    def encode(self):
        return pack('B', self.value)

    @classmethod
    def decode(cls, buffer):
        value, = unpack_from('B', buffer)
        return cls(value)


class TradingCapacityType:
    SIZE = 1

    def __init__(self, value):
        self.value = value

    def encode(self):
        return pack('B', self.value)

    @classmethod
    def decode(cls, buffer):
        value, = unpack_from('B', buffer)
        return cls(value)


class MtpGroupIDType:
    SIZE = 2

    def __init__(self, value):
        self.value = value

    def encode(self):
        return pack('>H', self.value)

    @classmethod
    def decode(cls, buffer):
        value, = unpack_from('>H', buffer)
        return cls(value)


class MatchTradePreventionType:
    SIZE = 1

    def __init__(self, value):
        self.value = value

    def encode(self):
        return pack('B', self.value)

    @classmethod
    def decode(cls, buffer):
        value, = unpack_from('B', buffer)
        return cls(value)


class UINT16:
    SIZE = 2

    def __init__(self, value):
        self.value = value

    def encode(self):
        return pack('>H', self.value)

    @classmethod
    def decode(cls, buffer):
        value, = unpack_from('>H', buffer)
        return cls(value)


class RepeatingGroupDimensions:
    SIZE = 2

    def __init__(self, value):
        self.value = value

    def encode(self):
        return pack('>H', self.value)

    @classmethod
    def decode(cls, buffer):
        value, = unpack_from('>H', buffer)
        return cls(value)


class PartyID:
    SIZE = 4

    def __init__(self, value):
        self.value = value

    def encode(self):
        return pack('>I', self.value)

    @classmethod
    def decode(cls, buffer):
        value, = unpack_from('>I', buffer)
        return cls(value)


class PartiesGroup:
    def __init__(self, party_id, party_id_source, party_role):
        self.party_id = party_id
        self.party_id_source = party_id_source
        self.party_role = party_role

    def encode(self):
        return self.party_id.encode() + self.party_id_source.encode() + self.party_role.encode()

    @classmethod
    def decode(cls, buffer):
        party_id = PartyID.decode(buffer)
        party_id_source = Char.decode(buffer[PartyID.SIZE:])
        party_role = Char.decode(buffer[PartyID.SIZE + Char.SIZE:])
        return cls(party_id, party_id_source, party_role)


class NewOrderSingle:
    MESSAGE_SIZE = 35

    def __init__(self, timestamp, cl_ord_id, symbol, price, order_qty, side, time_in_force, exec_inst, trading_capacity,
                 party_id, party_id_source, party_role):
        self.timestamp = timestamp
        self.cl_ord_id = cl_ord_id
        self.symbol = symbol
        self.price = price
        self.order_qty = order_qty
        self.side = side
        self.time_in_force = time_in_force
        self.exec_inst = exec_inst
        self.trading_capacity = trading_capacity
        self.party_id = party_id
        self.party_id_source = party_id_source
        self.party_role = party_role

    def encode(self):
        return (
            self.timestamp.encode()
            + self.cl_ord_id.encode()
            + self.symbol.encode()
            + self.price.encode()
            + self.order_qty.encode()
            + self.side.encode()
            + self.time_in_force.encode()
            + self.exec_inst.encode()
            + self.trading_capacity.encode()
            + self.party_id.encode()
            + self.party_id_source.encode()
            + self.party_role.encode()
        )

   @classmethod
	def decode(cls, buffer):
	    timestamp, header_length = UTCTimestampNanos.decode(buffer)
	    cl_ord_id = UINT16.decode(buffer[header_length:])
	    symbol = Char.decode(buffer[header_length + UINT16.SIZE:])
	    price, price_length = ShortPriceType.decode(buffer[header_length + UINT16.SIZE + Char.SIZE:])
	    order_qty = Uint32.decode(buffer[header_length + UINT16.SIZE + Char.SIZE + price_length:])
	    side = Char.decode(buffer[header_length + UINT16.SIZE + Char.SIZE + price_length + Uint32.SIZE:])
	    time_in_force = TimeInForceType.decode(buffer[header_length + UINT16.SIZE + Char.SIZE + price_length + Uint32.SIZE + Char.SIZE:])
	    exec_inst = ExecInstType.decode(buffer[header_length + UINT16.SIZE + Char.SIZE + price_length + Uint32.SIZE + Char.SIZE + TimeInForceType.SIZE:])
	    trading_capacity = TradingCapacityType.decode(buffer[header_length + UINT16.SIZE + Char.SIZE + price_length + Uint32.SIZE + Char.SIZE + TimeInForceType.SIZE + ExecInstType.SIZE:])
	    party_id, party_id_length = PartyID.decode(buffer[header_length + UINT16.SIZE + Char.SIZE + price_length + Uint32.SIZE + Char.SIZE + TimeInForceType.SIZE + ExecInstType.SIZE + TradingCapacityType.SIZE:])
	    party_id_source = Char.decode(buffer[header_length + UINT16.SIZE + Char.SIZE + price_length + Uint32.SIZE + Char.SIZE + TimeInForceType.SIZE + ExecInstType.SIZE + TradingCapacityType.SIZE + party_id_length:])
	    party_role = Char.decode(buffer[header_length + UINT16.SIZE + Char.SIZE + price_length + Uint32.SIZE + Char.SIZE + TimeInForceType.SIZE + ExecInstType.SIZE + TradingCapacityType.SIZE + party_id_length + Char.SIZE:])
	    
	    return cls(
	        timestamp,
	        cl_ord_id,
	        symbol,
	        price,
	        order_qty,
	        side,
	        time_in_force,
	        exec_inst,
	        trading_capacity,
	        party_id,
	        party_id_source,
	        party_role,
	    )

        return cls(
            timestamp,
            cl_ord_id,
            symbol,
            price,
            order_qty,
            side,
            time_in_force,
            exec_inst,
            trading_capacity,
            party_id,
            party_id_source,
            party_role,
        )


header = SBEHeader(100)
new_order_single = NewOrderSingle(
    UTCTimestampNanos(1234567890),
    UINT16(100),
    Char('AAPL'),
    ShortPriceType(2, 25000000000),
    Uint32(1000),
    Char('B'),
    TimeInForceType(1),
    ExecInstType(0),
    TradingCapacityType(1),
    PartyID(1234),
    Char('4'),
    Char('1'),
)

# Encode and decode
encoded_header = header.encode()
decoded_header, block_length = SBEHeader.decode(encoded_header)
encoded_message = new_order_single.encode()
decoded_message = NewOrderSingle.decode(encoded_message)

# Print decoded values
print("Decoded Header:")
print("Block Length:", block_length)
print("Template ID:", decoded_header.template_id)

print("\nDecoded Message:")
print("Timestamp:", decoded_message.timestamp.timestamp)
print("ClOrdID:", decoded_message.cl_ord_id.value)
print("Symbol:", decoded_message.symbol.value)
print("Price:", decoded_message.price.mantissa, "x 10^", decoded_message.price.exponent)
print("OrderQty:", decoded_message.order_qty.value)
print("Side:", decoded_message.side.value)
print("TimeInForce:", decoded_message.time_in_force.value)
print("ExecInst:", decoded_message.exec_inst.value)
print("TradingCapacity:", decoded_message.trading_capacity.value)
print("PartyID:", decoded_message.party_id.value)
print("PartyIDSource:", decoded_message.party_id_source.value)
print("PartyRole:", decoded_message.party_role.value)
