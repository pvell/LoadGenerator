class NewOrderSingle:
    TEMPLATE_ID = 1
    BLOCK_LENGTH = 7

    def __init__(self, **kwargs):
        self.sbe_header = SBEHeader(self.BLOCK_LENGTH, self.TEMPLATE_ID, 0, 0, 1)
        self.fields = {
            'sending_time': UTCTimestampNanos(0),
            'cl_ord_id': Char(''),
            'time_in_force': TimeInForceType(0),
            'exec_inst': ExecInstType(0),
            'trading_capacity': TradingCapacityType(0),
            'mtp_group_id': MtpGroupIDType(0),
            'match_trade_prevention': MatchTradePreventionType(0),
            'cancel_group_id': UINT16(0),
            'risk_group_id': UINT16(0)
        }

        for field in kwargs:
            if field in self.fields:
                self.fields[field] = kwargs[field]

    def encode(self):
        encoded_header = self.sbe_header.encode()
        encoded_fields = [self.fields[field].encode() for field in self.fields]
        encoded_message = encoded_header + b''.join(encoded_fields)
        return encoded_message

    def decode(self, buffer):
        offset = 0

        block_length, template_id, schema_id, version, num_groups = self.sbe_header.decode(buffer[offset:])
        offset += self.BLOCK_LENGTH

        for field in self.fields:
            self.fields[field].decode(buffer[offset:])
            offset += self.fields[field].SIZE

    def __getattr__(self, field_name):
        if field_name in self.fields:
            return self.fields[field_name]
        else:
            raise AttributeError(f"'NewOrderSingle' object has no attribute '{field_name}'")

    def __setattr__(self, field_name, value):
        if field_name == 'sbe_header':
            self.__dict__[field_name] = value
        elif field_name in self.fields:
            self.fields[field_name] = value
        else:
            self.__dict__[field_name] = value





# Create an instance of NewOrderSingle
order = NewOrderSingle(
    sending_time=UTCTimestampNanos(1623976800000000000),
    cl_ord_id=Char('ORD001'),
    time_in_force=TimeInForceType(1),
    exec_inst=ExecInstType(2),
    trading_capacity=TradingCapacityType(3),
    mtp_group_id=MtpGroupIDType(4),
    match_trade_prevention=MatchTradePreventionType(5),
    cancel_group_id=UINT16(6),
    risk_group_id=UINT16(7)
)

# Encode the NewOrderSingle instance
encoded_message = order.encode()

# Print the encoded message
print(encoded_message)
