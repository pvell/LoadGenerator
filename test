def generate_load(self):
    # Read the template file and extract message templates
    with open(self.template_file, 'r') as file:
        templates = file.readlines()

    # Generate messages based on weights
    load = []
    for template in templates:
        message_type = self.get_message_type(template)
        if message_type and message_type in self.message_weights:
            weight = int(self.message_weights[message_type])
            print(f"Adding {weight} instances of message type {message_type}")
            load.extend([template.strip()] * weight)

    print(f"Generated load: {load}")
    random.shuffle(load)
    load_length = len(load)
    iterations = int(self.message_rate * self.send_duration)

    # Repeat load if necessary to achieve desired send duration
    if iterations > load_length:
        quotient, remainder = divmod(iterations, load_length)
        print(f"Repeating load: {quotient} times, with remainder: {remainder}")
        load = load * quotient + load[:remainder]
    else:
        load = load[:iterations]

    return load
    
    
    
def get_message_type(self, message):
    fields = message.split('|')
    for field in fields:
        if field.startswith('35='):
            return field.split('=')[1]
    return None
    
    
    
    
    
    
    
    
    
    
    import configparser

class LoadGenerator:
    def __init__(self, config_file):
        self.config = configparser.ConfigParser()
        self.config.read(config_file)
        self.template_file = self.config.get('LoadGenerator', 'template_file')
        self.connection_config_file = self.config.get('LoadGenerator', 'connection_config_file')
        self.log_file = self.config.get('LoadGenerator', 'log_file')
        self.message_rate = int(self.config.get('LoadGenerator', 'message_rate'))
        self.send_duration = int(self.config.get('LoadGenerator', 'send_duration'))
        self.heartbeat_interval = int(self.config.get('LoadGenerator', 'heartbeat_interval'))
        self.message_weights = dict(self.config.items('MessageTypes'))

    def generate_load(self):
        # Read the template file and extract message templates
        with open(self.template_file, 'r') as file:
            templates = file.readlines()

        # Generate messages based on weights
        load = []
        for template in templates:
            message_type = self.get_message_type(template)
            if message_type and message_type in self.message_weights:
                weight = int(self.message_weights[message_type])
                load.extend([template.strip()] * weight)

        random.shuffle(load)
        load_length = len(load)
        iterations = int(self.message_rate * self.send_duration)

        # Repeat load if necessary to achieve desired send duration
        if iterations > load_length:
            quotient, remainder = divmod(iterations, load_length)
            load = load * quotient + load[:remainder]
        else:
            load = load[:iterations]

        return load

    def get_message_type(self, template):
        # Extract the message type from the template
        # This implementation assumes the message type is always located at position 35 in the template
        fields = template.split('|')
        for field in fields:
            if field.startswith('35='):
                return field.split('=')[1]
        return None

['a', 'd', '1', 'f', '5']
weights: [1, 100, 1, 1, 1]
weight: 1



pvellanki@qa2434:~/loadgenerator$ python3 LG5.py 
Session created - FIXT.1.1:EXP01_14->MEMX
['d', 'f']
weights: [100, 1]
Generated load: []
Traceback (most recent call last):
  File "/home/pvellanki/loadgenerator/LG5.py", line 230, in <module>
    app.run()
  File "/home/pvellanki/loadgenerator/LG5.py", line 187, in run
    load = self.generate_load()
  File "/home/pvellanki/loadgenerator/LG5.py", line 150, in generate_load
    quotient, remainder = divmod(iterations, load_length)
ZeroDivisionError: integer division or modulo by zero
