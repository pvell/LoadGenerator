from struct import pack, unpack_from

class OrderReplaceRequest:
    TEMPLATE_ID = 3
    num_groups = 1
    schema_id = 1
    version = 266
    BLOCK_LENGTH = 86

    def __init__(self, **kwargs):
        self.sbe_header = SBEHeader(self.BLOCK_LENGTH, self.TEMPLATE_ID, self.schema_id, self.version, self.num_groups)
        self.sending_time = kwargs.get('sending_time', UTCTimestampNanos(0))
        self.order_id = kwargs.get('order_id', UINT64(0))
        self.cl_ord_id = kwargs.get('cl_ord_id', Char(''))
        self.list_seq_no = kwargs.get('list_seq_no', UINT8(0))
        self.orig_cl_ord_id = kwargs.get('orig_cl_ord_id', Char(''))
        self.options_security_id = kwargs.get('options_security_id', OptionsSecurityID(''))
        self.side = kwargs.get('side', SideType(''))
        self.order_qty = kwargs.get('order_qty', UINT32(0))
        self.ord_type = kwargs.get('ord_type', OrdType(0))
        self.price = kwargs.get('price', PriceType(0, 0))

    def encode(self):
        encoded_header = self.sbe_header.encode()
        encoded_sending_time = self.sending_time.encode()
        encoded_order_id = self.order_id.encode()
        encoded_cl_ord_id = self.cl_ord_id.encode()
        encoded_list_seq_no = self.list_seq_no.encode()
        encoded_orig_cl_ord_id = self.orig_cl_ord_id.encode()
        encoded_options_security_id = self.options_security_id.encode()
        encoded_side = self.side.encode()
        encoded_order_qty = self.order_qty.encode()
        encoded_ord_type = self.ord_type.encode()
        encoded_price = self.price.encode()

        encoded_message = (
            encoded_header +
            encoded_sending_time +
            encoded_order_id +
            encoded_cl_ord_id +
            encoded_list_seq_no +
            encoded_orig_cl_ord_id +
            encoded_options_security_id +
            encoded_side +
            encoded_order_qty +
            encoded_ord_type +
            encoded_price
        )

        return encoded_message

    def decode(self, buffer):
        offset = 0
        block_length, template_id, schema_id, version, num_groups = SBEHeader.decode(buffer)
        self.sbe_header = SBEHeader(block_length, template_id, schema_id, version, num_groups)
        offset += SBEHeader.SIZE

        self.sending_time = UTCTimestampNanos(0)
        self.sending_time.decode(buffer[offset:offset + UTCTimestampNanos.SIZE])
        offset += UTCTimestampNanos.SIZE

        self.order_id = UINT64(0)
        self.order_id.decode(buffer[offset:offset + UINT64.SIZE])
        offset += UINT64.SIZE

        self.cl_ord_id = Char('')
        self.cl_ord_id.decode(buffer[offset:offset + Char.SIZE])
        offset += Char.SIZE

        self.list_seq_no = UINT8(0)
        self.list_seq_no.decode(buffer[offset:offset + UINT8.SIZE])
        offset += UINT8.SIZE

        self.orig_cl_ord_id = Char('')
        self.orig_cl_ord_id.decode(buffer[offset:offset + Char.SIZE])
        offset += Char.SIZE

        self.options_security_id = OptionsSecurityID('')
        self.options_security_id.decode(buffer[offset:offset + OptionsSecurityID.SIZE])
        offset += OptionsSecurityID.SIZE

        self.side = SideType('')
        self.side.decode(buffer[offset:offset + SideType.SIZE])
        offset += SideType.SIZE

        self.order_qty = UINT32(0)
        self.order_qty.decode(buffer[offset:offset + UINT32.SIZE])
        offset += UINT32.SIZE

        self.ord_type = OrdType(0)
        self.ord_type.decode(buffer[offset:offset + OrdType.SIZE])
        offset += OrdType.SIZE

        self.price = PriceType(0, 0)
        self.price.decode(buffer[offset:offset + PriceType.SIZE])
