class ShortTwoSidedQuote:
    SIZE = 25

    def __init__(self, list_seq_no=None, options_security_id=None, bid_size=None, bid_exponent=None,bid_mantissa=None, offer_size=None,offer_exponent=None,offer_mantissa=None):
        self.list_seq_no = UINT8(list_seq_no)
        self.options_security_id = Char(options_security_id)
        self.bid_size = UINT16(bid_size)
        self.bid_px = ShortPriceType(bid_exponent,bid_mantissa)
        self.offer_size = UINT16(offer_size)
        self.offer_px = ShortPriceType(offer_exponent,offer_mantissa)

    def encode(self):
        encoded_list_seq_no = self.list_seq_no.encode()
        encoded_options_security_id = self.options_security_id.encode()
        encoded_bid_size = self.bid_size.encode()
        encoded_bid_px = self.bid_px.encode()
        encoded_offer_size = self.offer_size.encode()
        encoded_offer_px = self.offer_px.encode()

        return encoded_list_seq_no + encoded_options_security_id + encoded_bid_size + encoded_bid_px + \
               encoded_offer_size + encoded_offer_px



class ShortTwoSideBulkQuote:
    TEMPLATE_ID = 2
    num_groups = 2
    schema_id = 1
    version = 266
    BLOCK_LENGTH = 96

    def __init__(self, **kwargs):
        self.sbe_header = SBEHeader(self.BLOCK_LENGTH, self.TEMPLATE_ID, self.schema_id, self.version, self.num_groups)
        self.sending_time = kwargs.get('sending_time', UTCTimestampNanos(0))
        self.cl_ord_id = kwargs.get('cl_ord_id', Char(''))
        self.time_in_force = kwargs.get('time_in_force', TimeInForceType(0))
        self.exec_inst = kwargs.get('exec_inst', ExecInstType(0))
        self.trading_capacity = kwargs.get('trading_capacity', TradingCapacityType(0))
        self.mtp_group_id = kwargs.get('mtp_group_id', MtpGroupIDType(0))
        self.match_trade_prevention = kwargs.get('match_trade_prevention', MatchTradePreventionType(0))
        self.cancel_group_id = kwargs.get('cancel_group_id', UINT16(0))
        self.risk_group_id = kwargs.get('risk_group_id', UINT16(0))
        quote_entries = len(kwargs.get('quotes', []))
        party_entries = len(kwargs.get('parties', []))
        self.no_party_ids = kwargs.get('repeating_group_dimensions', RepeatingGroupDimensions(18, party_entries))
        self.parties = kwargs.get('parties', PartiesGroup())
        self.no_quote_entries = kwargs.get('no_quote_entries', RepeatingGroupDimensions(15, quote_entries))
        self.quotes = kwargs.get('quotes',[ShortTwoSidedQuote()])

    def encode(self):
        encoded_header = self.sbe_header.encode()
        encoded_sending_time = self.sending_time.encode()
        encoded_cl_ord_id = self.cl_ord_id.encode()
        encoded_time_in_force = self.time_in_force.encode()
        encoded_exec_inst = self.exec_inst.encode()
        encoded_trading_capacity = self.trading_capacity.encode()
        encoded_mtp_group_id = self.mtp_group_id.encode()
        encoded_match_trade_prevention = self.match_trade_prevention.encode()
        encoded_cancel_group_id = self.cancel_group_id.encode()
        encoded_risk_group_id = self.risk_group_id.encode()
        encoded_parties = self.parties.encode()

        encoded_quotes = b''
        for quote in self.quotes:
            encoded_quotes += quote.encode()

        encoded_message = (
            encoded_header
            + encoded_sending_time
            + encoded_cl_ord_id
            + encoded_time_in_force
            + encoded_exec_inst
            + encoded_trading_capacity
            + encoded_mtp_group_id
            + encoded_match_trade_prevention
            + encoded_cancel_group_id
            + encoded_risk_group_id
            + encoded_parties
            + encoded_quotes
        )

        return encoded_message




  quotes=[
        ShortTwoSidedQuote(list_seq_no=1, options_security_id='XYZ', bid_size=10, bid_exponent=0, bid_mantissa=100, offer_size=20, offer_exponent=0, offer_mantissa=150),
        ShortTwoSidedQuote(list_seq_no=2, options_security_id='ABC', bid_size=15, bid_exponent=0, bid_mantissa=200, offer_size=25, offer_exponent=0, offer_mantissa=250)
    ]



[[<sbe_encoder_decoder.PartyID object at 0x7f61ec0e1f30>, <sbe_encoder_decoder.PartyIDSource object at 0x7f61ec0e1f90>, <sbe_encoder_decoder.PartyRoleType object at 0x7f61ec0e1ff0>]]

class PartiesGroup:
    def __init__(self, party_ids=None):
        self.party_ids = party_ids or []
        print(party_ids)
     

    def encode(self):
        encoded_parties = b''.join(party_obj.encode() for party_obj in self.party_ids)
        return encoded_parties

