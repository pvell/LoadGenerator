import xml.etree.ElementTree as ET
import struct


def load_schema(schema_file):
    tree = ET.parse(schema_file)
    root = tree.getroot()
    messages = {}

    # Find the XML namespace
    namespace = root.tag.split('}')[0] + '}'

    for message_elem in root.findall(f'{namespace}message'):
        message_id = int(message_elem.get('id'))
        message_name = message_elem.get('name')
        fields = {}

        for field_elem in message_elem.findall(f'.//{namespace}field'):
            field_id = int(field_elem.get('id'))
            field_type = field_elem.get('type')
            fields[field_id] = field_type

        messages[message_name] = {'id': message_id, 'fields': fields}

    return messages


def decode_field(field_type, encoded_value):
    if field_type == 'char':
        return encoded_value.decode('ascii')
    elif field_type == 'int8':
        return struct.unpack('>b', encoded_value)[0]
    elif field_type == 'int16':
        return struct.unpack('>h', encoded_value)[0]
    elif field_type == 'int32':
        return struct.unpack('>i', encoded_value)[0]
    elif field_type == 'int64':
        return struct.unpack('>q', encoded_value)[0]
    elif field_type == 'uint8':
        return struct.unpack('>B', encoded_value)[0]
    elif field_type == 'uint16':
        return struct.unpack('>H', encoded_value)[0]
    elif field_type == 'uint32':
        return struct.unpack('>I', encoded_value)[0]
    elif field_type == 'uint64':
        return struct.unpack('>Q', encoded_value)[0]
    elif field_type == 'float':
        return struct.unpack('>f', encoded_value)[0]
    elif field_type == 'double':
        return struct.unpack('>d', encoded_value)[0]
    elif field_type == 'string':
        return encoded_value.decode('ascii')
    else:
        raise ValueError(f"Unknown field type: {field_type}")


def decode_message(schema, encoded_message):
    message_id = struct.unpack('>H', encoded_message[:2])[0]
    if message_id not in schema:
        raise ValueError(f"Message ID '{message_id}' not found in the schema.")

    message_name = next(key for key, value in schema.items() if value['id'] == message_id)
    message = schema[message_name]
    fields = message['fields']

    decoded_fields = {}
    field_count = struct.unpack('>H', encoded_message[2:4])[0]
    offset = 4

    for _ in range(field_count):
        field_id = struct.unpack('>H', encoded_message[offset:offset + 2])[0]
        field_length = struct.unpack('>H', encoded_message[offset + 2:offset + 4])[0]
        encoded_value = encoded_message[offset + 4:offset + 4 + field_length]

        if field_id in fields:
            field_type = fields[field_id]
            decoded_value = decode_field(field_type, encoded_value)
            decoded_fields[field_id] = decoded_value

        offset += 4 + field_length

    return message_name, decoded_fields


if __name__ == '__main__':
    schema_file = 'sbe-schema.xml'
    schema = load_schema(schema_file)

    encoded_message = b'\x00\x01\x00\x13\x00\x34\x0a\xc4'  # Example encoded message

    message_name, decoded_fields = decode_message(schema, encoded_message)
    print(f"Decoded message: {message_name}")
    print(f"Decoded fields: {decoded_fields}")
