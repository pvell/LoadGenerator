def encode_field(field_name, field_value):
    if field_name == "BooleanType":
        return int(field_value)
    elif field_name == "PriceType":
        return struct.pack('>q', int(field_value['Mantissa'] * 10 ** field_value['Exponent']))
    elif field_name == "ShortPriceType":
        return struct.pack('>H', int(field_value['Mantissa'] * 10 ** field_value['Exponent']))
    elif field_name == "UTCTimestampNanos":
        return struct.pack('>Q', field_value['Time'])
    elif field_name == "RepeatingGroupDimensions":
        return struct.pack('>BB', field_value['blockLength'], field_value['numInGroup'])
    elif field_name == "ExecInstType" or field_name == "MassCancelInstType" or field_name == "SideType" or field_name == "OrdType" or field_name == "TimeInForceType" or field_name == "OpenOrCloseType" or field_name == "TradingCapacityType" or field_name == "RepriceFrequencyType" or field_name == "RepriceBehaviorType" or field_name == "OrdStatusType" or field_name == "CxlRejResponseToType" or field_name == "LastLiquidityIndType" or field_name == "MatchTradePreventionType" or field_name == "CancelReasonCode" or field_name == "OrderRejectReasonCode" or field_name == "CxlRejReasonCode":
        return str(field_value)
    elif field_name == "NewOrderSingleClOrdID" or field_name == "NewOrderSingleOptionsSecurityID" or field_name == "NewOrderSinglePartyID" or field_name == "char":
        return field_value.encode('utf-8')
    else:
        raise ValueError("Invalid field name: " + field_name)



def decode_field(field_name, field_value):
    if field_name == "BooleanType":
        return bool(field_value)
    elif field_name == "PriceType":
        mantissa = struct.unpack('>q', field_value)[0]
        exponent = -8
        return {'Mantissa': mantissa / 10 ** exponent, 'Exponent': exponent}
    elif field_name == "ShortPriceType":
        mantissa = struct.unpack('>H', field_value)[0]
        exponent = -2
        return {'Mantissa': mantissa / 10 ** exponent, 'Exponent': exponent}
    elif field_name == "UTCTimestampNanos":
        return {'Time': struct.unpack('>Q', field_value)[0]}
    elif field_name == "RepeatingGroupDimensions":
        block_length, num_in_group = struct.unpack('>BB', field_value)
        return {'blockLength': block_length, 'numInGroup': num_in_group}
    elif field_name == "ExecInstType" or field_name == "MassCancelInstType" or field_name == "SideType" or field_name == "OrdType" or field_name == "TimeInForceType" or field_name == "OpenOrCloseType" or field_name == "TradingCapacityType" or field_name == "RepriceFrequencyType" or field_name == "RepriceBehaviorType" or field_name == "OrdStatusType" or field_name == "CxlRejResponseToType" or field_name == "LastLiquidityIndType" or field_name == "MatchTradePreventionType" or field_name == "CancelReasonCode" or field_name == "OrderRejectReasonCode" or field_name == "CxlRejReasonCode":
        return chr(field_value)
    elif field_name == "NewOrderSingleClOrdID" or field_name == "NewOrderSingleOptionsSecurityID" or field_name == "NewOrderSinglePartyID" or field_name == "char":
        return field_value.decode('utf-8')
    else:
        raise ValueError("Invalid field name: " + field_name)
        
        
        
        Traceback (most recent call last):
  File "/home/pvellanki/loadgenerator/sbe/sbe-tool.py", line 172, in <module>
    encoded_message = encode_message(schema, 'NewOrderSingle', field_values)
  File "/home/pvellanki/loadgenerator/sbe/sbe-tool.py", line 72, in encode_message
    encoded_field = encode_field(field_value, field_type)
  File "/home/pvellanki/loadgenerator/sbe/sbe-tool.py", line 61, in encode_field
    raise ValueError("Invalid field name: " + field_name)
TypeError: can only concatenate str (not "int") to str
