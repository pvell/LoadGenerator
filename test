import sbe

# Step 1: Parse the schema
with open('sbe-schema.xml', 'r') as f:
    schema = sbe.Schema.parse(f)

# Step 2: Define the message ID and input message for encoding
message_id = 1

# Step 3: Set field values in the message object
obj = {
    'SendingTime': 1623155790000000000,
    'ClOrdID': 'ABC123',
    'OptionsSecurityID': 'XYZ456',
    'Side': 1,  # Assuming 'Side' field expects an integer
    'OrderQty': 100,
    'OrdType': 1,  # Assuming 'OrdType' field expects an integer
    'Price': 5678.0,
    'TimeInForce': 3,  # Assuming 'TimeInForce' field expects an integer
    'OpenOrClose': 1,  # Assuming 'OpenOrClose' field expects an integer
    'ExecInst': 4,  # Assuming 'ExecInst' field expects an integer
    'TradingCapacity': 1,  # Assuming 'TradingCapacity' field expects an integer
    'RepriceFrequency': 1,  # Assuming 'RepriceFrequency' field expects an integer
    'RepriceBehavior': 1,  # Assuming 'RepriceBehavior' field expects an integer
    'MtpGroupID': 1,
    'MatchTradePrevention': 1,  # Assuming 'MatchTradePrevention' field expects an integer
    'CancelGroupID': 2,
    'RiskGroupID': 3,
    'Parties': [
        {'PartyID': 'PARTY1', 'PartyIDSource': 'D', 'PartyRole': 1},
        {'PartyID': 'PARTY2', 'PartyIDSource': 'D', 'PartyRole': 2}
    ]
    # Add values for other fields of message_id = 1
    # ...
}

# Step 6: Encoding
encoded = schema.encode(schema.messages[message_id], obj)

# Print the encoded bytes
print("Encoded message:")
print(encoded)

# Step 7: Decoding
decoded = schema.decode(encoded)

# Print the decoded message
print("Decoded message:")
print(decoded)
