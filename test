import socket

# TCP/IP connection details
host = '127.0.0.1'
port = 8080

# Token and header details
user = 'your_username'
password = 'your_password'
token = f'{user}:{password}'

# Login request
message_type = b'\x64'  # Message Type = 100 (decimal)
token_type = b'P'  # Token Type = 'P'
token_length = len(token).to_bytes(2, byteorder='big')
header = message_type + token_type + token_length
message = header + token.encode('utf-8')

# Create a socket and establish the connection
client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client_socket.connect((host, port))

# Send the login request
client_socket.sendall(message)

# Receive and handle the response
response = client_socket.recv(1024)  # Adjust buffer size as per your requirement

if response:
    print("Response:", response.decode('utf-8'))
else:
    print("No response received.")

# Close the socket
client_socket.close()


Login Request from SF to Port:




import socket
import struct

# TCP/IP connection details
host = '127.0.0.1'
port = 8080

# Token and header details
user = 'expro01'
password = 'expro_01pwd'
token = f'{user}:{password}'

# Login request
message_type = 100
token_type = 'P'
token_length = len(token)

# Calculate message length (header + token)
message_length = 3 + token_length

# Construct the login request
header = struct.pack('!HB', message_length, message_type)
login_request = header + token_type.encode('utf-8') + token.encode('utf-8')

# Create a socket and establish the connection
client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client_socket.connect((host, port))

# Send the login request
client_socket.sendall(login_request)

# Receive and handle the response
response_header = client_socket.recv(6)
response_type, response_length = struct.unpack('!IH', response_header)

if response_type == 1:  # Login Accepted
    response_message = client_socket.recv(response_length)
    print("Login Accepted:", response_message.decode('utf-8'))
elif response_type == 2:  # Login Rejected
    response_message = client_socket.recv(response_length)
    print("Login Rejected:", response_message.decode('utf-8'))
    client_socket.close()
    exit()  # Exit the script gracefully after login rejection
else:
    print("Invalid response received.")
    client_socket.close()
    exit()  # Exit the script if an invalid response is received

# Continue with the session
while True:
    response_header = client_socket.recv(6)
    response_type, response_length = struct.unpack('!IH', response_header)

    if response_type == 3:  # Start of Session
        response_message = client_socket.recv(response_length)
        print("Start of Session:", response_message.decode('utf-8'))
        break
    else:
        print("Invalid response received.")
        client_socket.close()
        exit()  # Exit the script if an invalid response is received

# Close the socket
client_socket.close()

