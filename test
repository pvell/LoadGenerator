 # Generate values for the fields
        sending_time = UTCTimestampNanos(int(time.time() * 10**9))
        cl_ord_id = ''.join(choices(string.ascii_uppercase + string.digits, k=20))
        options_security_id = choices(security_ids)[0]
        side = SideType(value=SideType.BUY)  # Set the side to "Buy"
        order_qty = UINT32(value=randint(1, 100))
        ord_type = OrdType(value=OrdType.LIMIT)  # Set the order type to "Limit"
        time_in_force = TimeInForceType(value=TimeInForceType.DAY)  # Set the time in force to "Day"
        exec_inst = ExecInstType(value=ExecInstType.ParticipateDoNotInitiate)  # Set the execution instructions
        trading_capacity = TradingCapacityType(value=TradingCapacityType.CUSTOMER)  # Set the trading capacity
        efid = connection_config[session_name]['EFID']
        print(efid)
        party_id = PartyID(efid)
        party_id_source = PartyIDSource('D')
        party_role = PartyRoleType('CUSTOMER')
        parties = [PartiesGroup(party_ids=[[party_id, party_id_source, party_role]])]
        print(sending_time,cl_ord_id,options_security_id,side,order_qty,ord_type,time_in_force,exec_inst,trading_capacity,parties)
       

        # Create an instance of NewOrderSingle and set the field values
        new_order_single = NewOrderSingle(
            sending_time=sending_time,
            cl_ord_id=cl_ord_id,
            options_security_id_35=options_security_id,
            side=side,
            order_qty=order_qty,
            ord_type=ord_type,
            time_in_force=time_in_force,
            exec_inst=exec_inst,
            trading_capacity=trading_capacity,
            PartiesGroup=parties
        )

        unsequenced_message = struct.pack('!BH', 104, 102)  # MessageType=104, MessageLength=6, TCP Header Length=102
        # Encode the NewOrderSingle instance
        encoded_message = new_order_single.encode()
        message = unsequenced_message + encoded_message

        # Print the encoded message
        print(encoded_message)

        return message







class NewOrderSingle:
    TEMPLATE_ID = 1
    num_groups = 1
    schema_id = 1
    version = 266
    BLOCK_LENGTH = 96

    def __init__(self, **kwargs):
        self.sbe_header = SBEHeader(self.BLOCK_LENGTH, self.TEMPLATE_ID, self.schema_id, self.version, self.num_groups )
        self.sending_time = kwargs.get('sending_time', UTCTimestampNanos(0))
        self.cl_ord_id = kwargs.get('cl_ord_id', Char(''))
        self.options_security_id = kwargs.get('options_security_id', Char(''))
        self.side = kwargs.get('side', SideType(''))
        self.order_qty = kwargs.get('order_qty', UINT32(0))
        self.ord_type = kwargs.get('ord_type', Char(''))
        self.price = kwargs.get('price', PriceType(0,0))
        self.time_in_force = kwargs.get('time_in_force', TimeInForceType(0))
        self.open_or_close = kwargs.get('open_or_close', OpenOrCloseType('O'))
        self.exec_inst = kwargs.get('exec_inst', ExecInstType(0))
        self.trading_capacity = kwargs.get('trading_capacity', TradingCapacityType(0))
        self.reprice_frequency = kwargs.get('reprice_frequency', RepriceFrequencyType(0))
        self.reprice_behavior = kwargs.get('reprice_behavior', RepriceBehaviorType(0))
        self.mtp_group_id = kwargs.get('mtp_group_id', MtpGroupIDType(0))
        self.match_trade_prevention = kwargs.get('match_trade_prevention', MatchTradePreventionType(0))
        self.cancel_group_id = kwargs.get('cancel_group_id', UINT16(0))
        self.risk_group_id = kwargs.get('risk_group_id', UINT16(0))
        self.RepeatingGroupDimensions = kwargs.get('repeating_group_dimensions', RepeatingGroupDimensions(18,3))
        self.parties_group = kwargs.get('parties_group',PartiesGroup() )
        print(self.PartiesGroup)

    def encode(self):
        encoded_header = self.sbe_header.encode()
        encoded_sending_time = self.sending_time.encode()
        encoded_cl_ord_id = self.cl_ord_id.encode()
        encoded_options_security_id = self.options_security_id.encode()
        encoded_side = self.side.encode()
        encoded_order_qty = self.order_qty.encode()
        encoded_ord_type = self.ord_type.encode()
        encoded_price = self.price.encode()
        encoded_time_in_force = self.time_in_force.encode()
        encoded_open_or_close = self.open_or_close.encode()
        encoded_exec_inst = self.exec_inst.encode()
        encoded_trading_capacity = self.trading_capacity.encode()
        encoded_reprice_frequency = self.reprice_frequency.encode()
        encoded_reprice_behavior = self.reprice_behavior.encode()
        encoded_mtp_group_id = self.mtp_group_id.encode()
        encoded_match_trade_prevention = self.match_trade_prevention.encode()
        encoded_cancel_group_id = self.cancel_group_id.encode()
        encoded_risk_group_id = self.risk_group_id.encode()
        encoded_RepeatingGroupDimensions = self.RepeatingGroupDimensions.encode()
        encoded_parties = self.parties_group.encode()

        encoded_message = (
            encoded_header +
            encoded_sending_time +
            encoded_cl_ord_id +
            encoded_options_security_id +
            encoded_side +
            encoded_order_qty +
            encoded_ord_type +
            encoded_price +
            encoded_time_in_force +
            encoded_open_or_close +
            encoded_exec_inst +
            encoded_trading_capacity +
            encoded_reprice_frequency +
            encoded_reprice_behavior +
            encoded_mtp_group_id +
            encoded_match_trade_prevention +
            encoded_cancel_group_id +
            encoded_risk_group_id +
            encoded_RepeatingGroupDimensions +
            encoded_parties
        )

        return encoded_message
