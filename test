elif message_type.lower() == "ordercancel":
    # Generate OrderCancelRequest message using captured ClOrdIDs
    if self.captured_clordids:
        clordid = random.choice(self.captured_clordids)
        side = self.captured_clordid_side_mapping.get(clordid, "UNKNOWN")
        message = fix.Message()
        sending_time = datetime.datetime.utcnow().strftime('%Y%m%d-%H:%M:%S.%f')[:-3]
        message.setField(60, sending_time)
        message.getHeader().setField(fix.BeginString(session_id.getBeginString().getString()))
        message.getHeader().setField(fix.MsgType(fix.MsgType_OrderCancelRequest))
        message.getHeader().setField(fix.SenderCompID(session_id.getSenderCompID().getString()))
        message.getHeader().setField(fix.TargetCompID(session_id.getTargetCompID().getString()))
        message.getHeader().setField(fix.MsgSeqNum(self.get_outgoing_seq_num(session_id)))
        message.setField(fix.ClOrdID(self.generate_clordid()))

        message.setField(fix.OrigClOrdID(clordid))
        message.setField(fix.Side(side))
        print(clordid, side)
    else:
        # Handle the case when no captured ClOrdIDs are available
        print("No captured ClOrdIDs available for order cancel")
        return fix.Message()  # Return an empty message indicating no ClOrdIDs

    return message if message is not None else fix.Message()  # Return the generated message if not None, otherwise return an empty message

# ... (rest of the code remains the same)
