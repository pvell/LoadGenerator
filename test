import configparser
import random
import time
import quickfix as fix

# Global variables
sessions = {}

# Function to handle the fromAdmin message
def fromAdmin(message, session):
    global sessions
    session_id = session.getSessionID()
    incoming_msg_seq_num = int(message.getHeader().getField(34))
    msg_type = message.getHeader().getField(35)

    if msg_type == fix.MsgType_Logon:  # Logon message
        if incoming_msg_seq_num == 1:
            print(f"Session established for {session_id}")
            sessions[session_id] = True
    elif msg_type == fix.MsgType_Logout:  # Logout message
        print(f"Session disconnected for {session_id}")
        sessions[session_id] = False

# Function to generate a random ClOrdID
def generate_clordid():
    return str(random.randint(100000, 999999))

# Function to generate a random message based on weightage
def generate_message(template, message_weights, session_id):
    # Calculate total weightage
    total_weight = sum(message_weights.values())

    # Generate a random number within the total weightage
    random_num = random.randint(1, total_weight)

    # Find the message type based on the random number
    cumulative_weight = 0
    for msg_type, weight in message_weights.items():
        cumulative_weight += weight
        if random_num <= cumulative_weight:
            # Replace placeholders in the template with the message type, ClOrdID, and outgoing sequence number
            message = template.replace('<MsgType>', msg_type)
            message = message.replace('<ClOrdID>', generate_clordid())
            message = message.replace('<SeqNum>', str(get_outgoing_seq_num(session_id)))
            message = message.replace('<SendingTime>', fix.UtcTimeStamp().getString())

            # Calculate the message length (excluding SOH characters)
            message_length = len(message) - message.count('|')

            # Calculate the CheckSum
            checksum = calculate_checksum(message)

            # Replace the placeholders for message length and CheckSum
            message = message.replace('<BodyLength>', str(message_length))
            message = message.replace('<CheckSum>', checksum)

            # Append the CheckSum to the message
            message += f'|10={checksum}|'

            return message

# Function to calculate the CheckSum (Tag 10) for a given FIX message
def calculate_checksum(message):
    checksum = sum(ord(c) for c in message) % 256
    return f'{checksum:03}'  # Ensure the CheckSum is three digits

# Function to get the outgoing sequence number for a session
def get_outgoing_seq_num(session_id):
    session = fix.Session.lookupSession(fix.SessionID(session_id))
    if session is not None:
        return session.getNextSenderMsgSeqNum()

# Function to increment the outgoing sequence number for a session
def increment_outgoing_seq_num(session_id):
    session = fix.Session.lookupSession(fix.SessionID(session_id))
    if session is not None:
        session.incrementNextSenderMsgSeqNum()

# Function to send heartbeat messages at a specified interval
def send_heartbeats(session_id, interval):
    while sessions[session_id]:
        session = fix.Session.lookupSession(fix.SessionID(session_id))
        if session is not None:
            heartbeat_message = fix.Message()
            heartbeat_message.getHeader().setField(34, str(get_outgoing_seq_num(session_id)))
            fix.Session.sendToTarget(heartbeat_message, session_id)
            increment_outgoing_seq_num(session_id)
        time.sleep(interval)

# Function to send messages at the specified rate for a duration
def send_messages(template, message_weights, session_id, rate, duration):
    start_time = time.time()
    end_time = start_time + duration

    while time.time() < end_time:
        message = generate_message(template, message_weights, session_id)
        session = fix.Session.lookupSession(fix.SessionID(session_id))
        if session is not None:
            fix.Session.sendToTarget(message, session_id)
            increment_outgoing_seq_num(session_id)

        time.sleep(1 / rate)

    # Disconnect session after duration
    session = fix.Session.lookupSession(fix.SessionID(session_id))
    if session is not None:
        session.disconnect("Time's up")

def main():
    # Load the connections configuration file
    connections = configparser.ConfigParser()
    connections.read('connections.cfg')

    # Read the initiator settings from the [DEFAULT] section
    initiator_settings = connections["DEFAULT"]

    # Create and configure the SessionSettings object
    settings = fix.SessionSettings()

    # Set the initiator settings
    for key, value in initiator_settings.items():
        settings.setAttr(key, value)

    # Create the message store factory
    store_factory = fix.FileStoreFactory(settings)

    # Create the application
    class MyApplication(fix.Application):
        def __init__(self):
            super().__init__()

        def fromAdmin(self, message, session_id):
            fromAdmin(message, session_id)

        # Implement other application methods as needed

    # Initialize the application
    application = MyApplication()

    # Create the initiator
    initiator = fix.SocketInitiator(application, store_factory, settings)

    # Start the initiator
    initiator.start()

    # Access the sessions created by the initiator
    session_ids = initiator.getSessions()

    # Store the session IDs and their connection status
    for session_id in session_ids:
        sessions[session_id.toString()] = True

    # Join the initiator thread
    initiator.join()

if __name__ == '__main__':
    main()
    
    
    
    
    
    
    
    
    
    
    
    
    import configparser
import quickfix as fix

def send_logon(template_file, connections_file):
    # Load the template and connections configurations
    config = configparser.ConfigParser()
    config.read('config.ini')

    # Read the template file path
    template_path = config.get('CONFIG', 'TemplateFile')

    # Read the connections file path
    connections_path = config.get('CONFIG', 'ConnectionsFile')

    # Create and configure the SessionSettings object
    settings = fix.SessionSettings(connections_path)

    # Create the message store factory
    store_factory = fix.FileStoreFactory(settings)

    # Create the application
    application = fix.NullApplication()

    # Initialize the message factory
    message_factory = fix.DefaultMessageFactory()

    # Create the initiator
    initiator = fix.SocketInitiator(application, store_factory, settings, message_factory)

    # Start the initiator
    initiator.start()

    # Create a session ID based on the settings
    session_id = fix.SessionID(settings.get().getString('BeginString'),
                               settings.get().getString('SenderCompID'),
                               settings.get().getString('TargetCompID'))

    # Create a logon message
    logon_message = fix.Message()
    logon_message.getHeader().setField(35, fix.MsgType_Logon)

    # Send the logon message
    fix.Session.sendToTarget(logon_message, session_id)

    # Wait for the logon message to be sent
    fix.Session.flush()

    # Stop the initiator
    initiator.stop()

if __name__ == '__main__':
    send_logon('template_file.txt', 'connections.cfg')

