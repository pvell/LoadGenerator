import xml.etree.ElementTree as ET

def load_schema(schema_file):
    tree = ET.parse(schema_file)
    root = tree.getroot()

    messages = {}

    # Find the XML namespace
    namespace = root.tag.split('}')[0] + '}'

    type_counter = 1

    # Load message definitions
    for message_elem in root.iter(f'{namespace}message'):
        message_id = int(message_elem.attrib["id"])
        message_name = message_elem.attrib["name"]
        fields = {}

        for field_elem in message_elem.iter(f'{namespace}field'):
            field_id = int(field_elem.attrib["id"])
            field_name = field_elem.attrib["name"]
            field_type = field_elem.attrib.get("type")
            fields[field_id] = field_type

        messages[message_name] = {
            "id": message_id,
            "fields": fields
        }

    # Load type definitions
    for type_elem in root.iter(f'{namespace}type'):
        type_name = type_elem.attrib["name"]
        type_fields = {}

        for sub_type_elem in type_elem.iter(f'{namespace}type'):
            sub_type_name = sub_type_elem.attrib["name"]
            sub_type_primitive = sub_type_elem.attrib.get("primitiveType")
            type_fields[sub_type_name] = sub_type_primitive

        if not type_fields:
            type_fields[type_name] = type_elem.text

        messages[type_name] = {
            "id": type_counter,
            "fields": type_fields
        }

        type_counter += 1

    return messages

def encode_message(schema_file, message_name, field_values):
    schema = load_schema(schema_file)
    message = schema.get(message_name)

    if not message:
        raise ValueError(f"Invalid message name '{message_name}'")

    encoded_fields = []

    for field_id, field_type in message["fields"].items():
        field_value = field_values.get(field_id, None)
        encoded_field = encode_field(field_id, field_value, field_type, schema)
        encoded_fields.append(encoded_field)

    encoded_message = "".join(encoded_fields)
    return encoded_message

def encode_field(field_id, field_value, field_type, schema):
    if field_type in schema:
        # Field type is a composite or nested type
        composite_fields = schema[field_type]["fields"]
        encoded_sub_fields = []

        for sub_field_id, sub_field_type in composite_fields.items():
            sub_field_value = field_value.get(sub_field_id, None)
            encoded_sub_field = encode_field(sub_field_id, sub_field_value, sub_field_type, schema)
            encoded_sub_fields.append(encoded_sub_field)

        encoded_value = "".join(encoded_sub_fields)
    else:
        # Field type is a primitive type
        encoded_value = str(field_value) if field_value is not None else ""

    return encoded_value

# Example usage
schema_file = "sbe-schema-options.xml"
message_name = "NewOrderSingle"
field_values = {
    1: "CLORD12345",
    2: "MPID123",
    3: "AAPL",
    4: "SFX",
    5: "BUY",
    6: 100,
    7: "LIMIT",
    8: 99.99,
    9: "DAY",
    10: "CAPACITY",
    11: "CUST_CAP",
}

encoded_message = encode_message(schema_file, message_name, field_values)
print("Encoded Message:", encoded_message)
