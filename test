class MyApplication(fix.Application):

Capturing ClordId's

# ... (Existing code)

    def fromApp(self, message, sessionID):
        msg_type = fix.MsgType()
        message.getHeader().getField(msg_type)

        if msg_type.getValue() == fix.MsgType_ExecutionReport:
            cl_ord_id = fix.ClOrdID()
            exec_report = fix.ExecutionReport()
            message.getField(cl_ord_id)
            message.getField(exec_report)
            self.last_execution_report = exec_report

            # Check if the execution report matches the conditions
            if exec_report.getField(39).getString() == '0' or exec_report.getField(39).getString() == '150':
                self.execution_report_received = True
                
                # Extract ClOrdID and OrdID from the execution report
                clordid = cl_ord_id.getString()
                ordid = exec_report.getField(fix.OrderID()).getString()

                # Write ClOrdID and OrdID to the text file
                self.write_clordid_ordid_to_file(clordid, ordid)


Adding order cancels:

class MyApplication(fix.Application):
    def __init__(self, message_weights, message_rate):
        # Existing code...
        self.captured_clordids = []  # Initialize an empty list to store the captured ClOrdIDs



class MyApplication(fix.Application):
    # Existing code...

    def fromApp(self, message, sessionID):
        msg_type = fix.MsgType()
        message.getHeader().getField(msg_type)

        if msg_type.getValue() == fix.MsgType_ExecutionReport:
            cl_ord_id = fix.ClOrdID()
            exec_report = fix.ExecutionReport()
            message.getField(cl_ord_id)
            message.getField(exec_report)
            self.last_execution_report = exec_report

            # Check if the execution report matches the conditions
            if exec_report.getField(39).getString() == '0' or exec_report.getField(39).getString() == '150':
                self.execution_report_received = True
                
                # Extract ClOrdID and OrdID from the execution report
                clordid = cl_ord_id.getString()
                ordid = exec_report.getField(fix.OrderID()).getString()

                # Write ClOrdID and OrdID to the text file
                self.write_clordid_ordid_to_file(clordid, ordid)

                # Store the captured ClOrdID in the list
                self.captured_clordids.append(clordid)















# ...

class MyApplication(fix.Application):
    # ... (your existing code)

    def run(self):
        settings = fix.SessionSettings(self.connection_config_file)
        
        # Iterate through all the sections in the settings
        for session_id in settings.getSections():
            # Get the session-specific settings
            session_settings = settings.get(session_id)

            # Set the NextSenderSeqNum and NextTargetSeqNum
            session_settings.setString("NextSenderSeqNum", "3938")  # Set your desired value
            session_settings.setString("NextTargetSeqNum", "3938")  # Set your desired value
            
            # Create the session
            session = fix.Session(session_settings, self, fix.FileStoreFactory(session_settings), fix.ScreenLogFactory(session_settings))
            
            # Store the session
            self.sessions[session_id] = session

            # ... (your existing code)

        application = fix.SocketInitiator(self, fix.FileStoreFactory(settings), settings)
        application.start()

        # ... (your existing code)




class MyApplication(fix.Application):
    # ... (your existing code)

    def onLogon(self, sessionID):
        print("Logon Successful -", sessionID.toString())

        # Get the session's sequence numbers for incoming messages
        session = fix.Session.lookupSession(sessionID)
        next_incoming_seq_num = session.getExpectedTargetNum()

        # Adjust the session's outgoing sequence numbers
        self.sessions[sessionID].setNextSenderMsgSeqNum(next_incoming_seq_num + 1)

    def generate_message(self, message_type, session_id):
        # ... (your existing code)

        # Adjust sequence numbers based on the next incoming sequence number
        next_incoming_seq_num = self.sessions[session_id].getExpectedTargetNum()
        self.sessions[session_id].setNextSenderMsgSeqNum(next_incoming_seq_num + 1)
        self.sessions[session_id].setNextTargetMsgSeqNum(next_incoming_seq_num + 1)

        # Create the message based on the adjusted sequence numbers
        message = fix.Message()
        message.getHeader().setField(fix.BeginString(session_id.getBeginString().getString()))
        message.getHeader().setField(fix.MsgType(fix.MsgType_NewOrderSingle))
        message.getHeader().setField(fix.SenderCompID(session_id.getSenderCompID().getString()))
        message.getHeader().setField(fix.TargetCompID(session_id.getTargetCompID().getString()))
        message.getHeader().setField(fix.MsgSeqNum(self.get_outgoing_seq_num(session_id)))

        # ... (your existing code)

        return message

    # ... (your existing code)

