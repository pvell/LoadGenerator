if message_type == 'NewOrderSingle':
    # Generate values for the fields
    sending_time = UTCTimestampNanos(int(time.time() * 10**9))
    cl_ord_id = ''.join(choices(string.ascii_uppercase + string.digits, k=20))
    options_security_id = OptionsSecurityID(choices(security_ids)[0])
    side = SideType(value=SideType.BUY)  # Set the side to "Buy"
    order_qty = UINT32(value=randint(1, 100))
    ord_type = OrdType(value=OrdType.LIMIT)  # Set the order type to "Limit"
    time_in_force = TimeInForceType(value=TimeInForceType.DAY)  # Set the time in force to "Day"
    exec_inst = ExecInstType(value=ExecInstType.ParticipateDoNotInitiate)  # Set the execution instructions
    trading_capacity = TradingCapacityType(value=TradingCapacityType.CUSTOMER)  # Set the trading capacity
    efid = connection_config[session_name]['EFID']
    party_id = PartyID(efid)
    party_id_source = PartyIDSource('D')
    party_role = PartyRoleType('CUSTOMER')
    parties = [PartiesGroup(party_ids=[[party_id, party_id_source, party_role]])]

    # Create an instance of NewOrderSingle and set the field values
    new_order_single = NewOrderSingle(
        sending_time=sending_time,
        cl_ord_id=cl_ord_id,
        options_security_id=options_security_id,
        side=side,
        order_qty=order_qty,
        ord_type=ord_type,
        time_in_force=time_in_force,
        exec_inst=exec_inst,
        trading_capacity=trading_capacity,
        parties=parties
    )

    unsequenced_message = struct.pack('!BH', 104, 102)  # MessageType=104, MessageLength=6, TCP Header Length=102
    # Encode the NewOrderSingle instance
    encoded_message = new_order_single.encode()
    message = unsequenced_message + encoded_message

    # Print the encoded message
    print(encoded_message)

    return message


elif message_type == 'ShortTwoSideBulkQuote':
    # Generate ShortTwoSideBulkQuote message
    sending_time = UTCTimestampNanos(int(time.time() * 10**9))
    cl_ord_id = ''.join(choices(string.ascii_uppercase + string.digits, k=20))
    time_in_force = TimeInForceType(0)
    exec_inst = ExecInstType(0)
    trading_capacity = TradingCapacityType(0)
    mtp_group_id = MtpGroupIDType(0)
    match_trade_prevention = MatchTradePreventionType(0)
    cancel_group_id = UINT16(0)
    risk_group_id = UINT16(0)
    efid = connection_config[session_name]['EFID']
    party_id = PartyID(efid)
    party_id_source = PartyIDSource('D')
    party_role = PartyRoleType('CUSTOMER')
    parties = [PartiesGroup(party_ids=[[party_id, party_id_source, party_role]])]
    quote1 = ShortTwoSidedQuote(list_seq_no=1, options_security_id=OptionsSecurityID('XYZ'), bid_size=10, bid_exponent=0, bid_mantissa=100, offer_size=20, offer_exponent=0, offer_mantissa=150)
    quote2 = ShortTwoSidedQuote(list_seq_no=2, options_security_id=OptionsSecurityID('ABC'), bid_size=15, bid_exponent=0, bid_mantissa=200, offer_size=25, offer_exponent=0, offer_mantissa=250)

    quotes = [quote1, quote2]

    short_two_side_bulk_quote = ShortTwoSideBulkQuote(
        sending_time=sending_time,
        cl_ord_id=cl_ord_id,
        time_in_force=time_in_force,
        exec_inst=exec_inst,
        trading_capacity=trading_capacity,
        mtp_group_id=mtp_group_id,
        match_trade_prevention=match_trade_prevention,
        cancel_group_id=cancel_group_id,
        risk_group_id=risk_group_id,
        parties=parties,
        quotes=quotes
    )













class ShortTwoSideBulkQuote:
    TEMPLATE_ID = 2
    num_groups = 2
    schema_id = 1
    version = 266
    BLOCK_LENGTH = 96

    def __init__(self, **kwargs):
        self.sbe_header = SBEHeader(self.BLOCK_LENGTH, self.TEMPLATE_ID, self.schema_id, self.version, self.num_groups)
        self.sending_time = kwargs.get('sending_time', UTCTimestampNanos(0))
        self.cl_ord_id = kwargs.get('cl_ord_id', Char(''))
        self.options_security_id = kwargs.get('options_security_id', OptionsSecurityID(''))
        self.time_in_force = kwargs.get('time_in_force', TimeInForceType(0))
        self.exec_inst = kwargs.get('exec_inst', ExecInstType(0))
        self.trading_capacity = kwargs.get('trading_capacity', TradingCapacityType(0))
        self.mtp_group_id = kwargs.get('mtp_group_id', MtpGroupIDType(0))
        self.match_trade_prevention = kwargs.get('match_trade_prevention', MatchTradePreventionType(0))
        self.cancel_group_id = kwargs.get('cancel_group_id', UINT16(0))
        self.risk_group_id = kwargs.get('risk_group_id', UINT16(0))
        quote_entries = len(kwargs.get('quotes', []))

    def encode(self):
        encoded_sbe_header = self.sbe_header.encode()
        encoded_sending_time = self.sending_time.encode()
        encoded_cl_ord_id = self.cl_ord_id.encode()
        encoded_options_security_id = self.options_security_id.encode()
        encoded_time_in_force = self.time_in_force.encode()
        encoded_exec_inst = self.exec_inst.encode()
        encoded_trading_capacity = self.trading_capacity.encode()
        encoded_mtp_group_id = self.mtp_group_id.encode()
        encoded_match_trade_prevention = self.match_trade_prevention.encode()
        encoded_cancel_group_id = self.cancel_group_id.encode()
        encoded_risk_group_id = self.risk_group_id.encode()
        encoded_RepeatingGroupDimensions = RepeatingGroupDimensions(quote_entries, 1).encode()
        encoded_quotes = b''

        for quote in kwargs.get('quotes', []):
            encoded_quote = quote.encode()
            encoded_quotes += encoded_quote

        encoded_message = (
            encoded_sbe_header
            + encoded_sending_time
            + encoded_cl_ord_id
            + encoded_options_security_id
            + encoded_time_in_force
            + encoded_exec_inst
            + encoded_trading_capacity
            + encoded_mtp_group_id
            + encoded_match_trade_prevention
            + encoded_cancel_group_id
            + encoded_risk_group_id
            + encoded_RepeatingGroupDimensions
            + encoded_quotes
        )

        return encoded_message

    def decode(self, buffer):
        offset = 0

        block_length, template_id = self.sbe_header.decode(buffer[offset:offset + SBEHeader.BLOCK_LENGTH])
        offset += SBEHeader.BLOCK_LENGTH

        self.sending_time = UTCTimestampNanos(0)
        self.sending_time.decode(buffer[offset:])
        offset += UTCTimestampNanos.SIZE

        self.cl_ord_id = Char('')
        self.cl_ord_id.decode(buffer[offset:])
        offset += Char.SIZE

        self.options_security_id = OptionsSecurityID('')
        self.options_security_id.decode(buffer[offset:])
        offset += OptionsSecurityID.SIZE

        self.time_in_force = TimeInForceType(0)
        self.time_in_force.decode(buffer[offset:])
        offset += TimeInForceType.SIZE

        self.exec_inst = ExecInstType(0)
        self.exec_inst.decode(buffer[offset:])
        offset += ExecInstType.SIZE

        self.trading_capacity = TradingCapacityType(0)
        self.trading_capacity.decode(buffer[offset:])
        offset += TradingCapacityType.SIZE

        self.mtp_group_id = MtpGroupIDType(0)
        self.mtp_group_id.decode(buffer[offset:])
        offset += MtpGroupIDType.SIZE

        self.match_trade_prevention = MatchTradePreventionType(0)
        self.match_trade_prevention.decode(buffer[offset:])
        offset += MatchTradePreventionType.SIZE

        self.cancel_group_id = UINT16(0)
        self.cancel_group_id.decode(buffer[offset:])
        offset += UINT16.SIZE

        self.risk_group_id = UINT16(0)
        self.risk_group_id.decode(buffer[offset:])
        offset += UINT16.SIZE

        self.RepeatingGroupDimensions = RepeatingGroupDimensions(0, 0)
        self.RepeatingGroupDimensions.decode(buffer[offset:])
        offset += RepeatingGroupDimensions.SIZE

        self.quotes = []

        for i in range(self.RepeatingGroupDimensions.num_groups):
            quote = ShortTwoSideQuote()
            quote.decode(buffer[offset:])
            self.quotes.append(quote)
            offset += ShortTwoSideQuote.SIZE


class ShortTwoSideQuote:
    SIZE = 20

    def __init__(self, bid_size=0, bid_px=0, offer_size=0, offer_px=0):
        self.bid_size = UINT16(bid_size)
        self.bid_px = ShortPriceType(bid_px)
        self.offer_size = UINT16(offer_size)
        self.offer_px = ShortPriceType(offer_px)

    def encode(self):
        encoded_bid_size = self.bid_size.encode()
        encoded_bid_px = self.bid_px.encode()
        encoded_offer_size = self.offer_size.encode()
        encoded_offer_px = self.offer_px.encode()

        return encoded_bid_size + encoded_bid_px + encoded_offer_size + encoded_offer_px

    def decode(self, buffer):
        offset = 0

        self.bid_size = UINT16(0)
        self.bid_size.decode(buffer[offset:])
        offset += UINT16.SIZE

        self.bid_px = ShortPriceType(0)
        self.bid_px.decode(buffer[offset:])
        offset += ShortPriceType.SIZE

        self.offer_size = UINT16(0)
        self.offer_size.decode(buffer[offset:])
        offset += UINT16.SIZE

        self.offer_px = ShortPriceType(0)
        self.offer_px.decode(buffer[offset:])
        offset += ShortPriceType.SIZE
