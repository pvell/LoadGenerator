class NewOrderSingle:
    TEMPLATE_ID = 1

    def __init__(self, sending_time, cl_ord_id, options_security_id_35, side, order_qty, ord_type, price, time_in_force,
                 open_or_close, exec_inst, trading_capacity, reprice_frequency, reprice_behavior, mtp_group_id,
                 match_trade_prevention, cancel_group_id, risk_group_id, parties):
        self.sbe_header = SBEHeader(self.TEMPLATE_ID)
        self.sending_time = sending_time
        self.cl_ord_id = cl_ord_id
        self.options_security_id_35 = options_security_id_35
        self.side = side
        self.order_qty = order_qty
        self.ord_type = ord_type
        self.price = price
        self.time_in_force = time_in_force
        self.open_or_close = open_or_close
        self.exec_inst = exec_inst
        self.trading_capacity = trading_capacity
        self.reprice_frequency = reprice_frequency
        self.reprice_behavior = reprice_behavior
        self.mtp_group_id = mtp_group_id
        self.match_trade_prevention = match_trade_prevention
        self.cancel_group_id = cancel_group_id
        self.risk_group_id = risk_group_id
        self.parties = parties

    def encode(self):
        encoded_header = self.sbe_header.encode()
        encoded_sending_time = self.sending_time.encode()
        encoded_cl_ord_id = self.cl_ord_id.encode()
        encoded_options_security_id_35 = self.options_security_id_35.encode()
        encoded_side = self.side.encode()
        encoded_order_qty = self.order_qty.encode()
        encoded_ord_type = self.ord_type.encode()
        encoded_price = b'' if self.price is None else self.price.encode()
        encoded_time_in_force = self.time_in_force.encode()
        encoded_open_or_close = b'' if self.open_or_close is None else self.open_or_close.encode()
        encoded_exec_inst = self.exec_inst.encode()
        encoded_trading_capacity = self.trading_capacity.encode()
        encoded_reprice_frequency = b'' if self.reprice_frequency is None else self.reprice_frequency.encode()
        encoded_reprice_behavior = b'' if self.reprice_behavior is None else self.reprice_behavior.encode()
        encoded_mtp_group_id = b'' if self.mtp_group_id is None else self.mtp_group_id.encode()
        encoded_match_trade_prevention = b'' if self.match_trade_prevention is None else self.match_trade_prevention.encode()
        encoded_cancel_group_id = b'' if self.cancel_group_id is None else self.cancel_group_id.encode()
        encoded_risk_group_id = b'' if self.risk_group_id is None else self.risk_group_id.encode()
        encoded_parties = b'' if self.parties is None else self.parties.encode()

        encoded_message = encoded_header + encoded_sending_time + encoded_cl_ord_id + encoded_options_security_id_35 + \
            encoded_side + encoded_order_qty + encoded_ord_type + encoded_price + encoded_time_in_force + \
            encoded_open_or_close + encoded_exec_inst + encoded_trading_capacity + encoded_reprice_frequency + \
            encoded_reprice_behavior + encoded_mtp_group_id + encoded_match_trade_prevention + \
            encoded_cancel_group_id + encoded_risk_group_id + encoded_parties

        return encoded_message

    def decode(self, buffer):
        offset = 0

        block_length, template_id = self.sbe_header.decode(buffer[offset:])
        offset += SBEHeader.BLOCK_LENGTH

        self.sending_time = UTCTimestampNanos(0)
        self.sending_time.decode(buffer[offset:])
        offset += UTCTimestampNanos.SIZE

        self.cl_ord_id = Char('')
        self.cl_ord_id.decode(buffer[offset:])
        offset += Char.SIZE

        self.options_security_id_35 = Char('')
        self.options_security_id_35.decode(buffer[offset:])
        offset += Char.SIZE

        self.side = SideType('')
        self.side.decode(buffer[offset:])
        offset += SideType.SIZE

        self.order_qty = UINT32(0)
        self.order_qty.decode(buffer[offset:])
        offset += UINT32.SIZE

        self.ord_type = OrdType('')
        self.ord_type.decode(buffer[offset:])
        offset += OrdType.SIZE

        self.price = PriceType(0.0)
        self.price.decode(buffer[offset:])
        offset += PriceType.SIZE

        self.time_in_force = TimeInForceType(0)
        self.time_in_force.decode(buffer[offset:])
        offset += TimeInForceType.SIZE

        self.open_or_close = OpenOrCloseType('')
        self.open_or_close.decode(buffer[offset:])
        offset += OpenOrCloseType.SIZE

        self.exec_inst = ExecInstType(0)
        self.exec_inst.decode(buffer[offset:])
        offset += ExecInstType.SIZE

        self.trading_capacity = TradingCapacityType(0)
        self.trading_capacity.decode(buffer[offset:])
        offset += TradingCapacityType.SIZE

        self.reprice_frequency = RepriceFrequencyType('')
        self.reprice_frequency.decode(buffer[offset:])
        offset += RepriceFrequencyType.SIZE

        self.reprice_behavior = RepriceBehaviorType('')
        self.reprice_behavior.decode(buffer[offset:])
        offset += RepriceBehaviorType.SIZE

        if template_id >= 2:
            self.mtp_group_id = MtpGroupIDType(0)
            self.mtp_group_id.decode(buffer[offset:])
            offset += MtpGroupIDType.SIZE

            if template_id >= 4:
                self.match_trade_prevention = MatchTradePreventionType(0)
                self.match_trade_prevention.decode(buffer[offset:])
                offset += MatchTradePreventionType.SIZE

                if template_id >= 6:
                    self.cancel_group_id = UINT16(0)
                    self.cancel_group_id.decode(buffer[offset:])
                    offset += UINT16.SIZE

                    if template_id >= 8:
                        self.risk_group_id = UINT16(0)
                        self.risk_group_id.decode(buffer[offset:])
                        offset += UINT16.SIZE

                        if template_id >= 10:
                            self.parties = Party.decode(buffer[offset:])
                            offset += Party.SIZE

        return offset



# Create an instance of NewOrderSingle
order = NewOrderSingle(
    sending_time=UTCTimestampNanos(1234567890),
    cl_ord_id=Char('ORDER001'),
    options_security_id_35=Char('OPT123'),
    side=SideType('BUY'),
    order_qty=UINT32(100),
    ord_type=OrdType('LIMIT'),
    price=PriceType(10.5),
    time_in_force=TimeInForceType('GTC'),
    open_or_close=OpenOrCloseType('OPEN'),
    exec_inst=ExecInstType(0),
    trading_capacity=TradingCapacityType('CUSTOMER'),
    reprice_frequency=None,
    reprice_behavior=None,
    mtp_group_id=None,
    match_trade_prevention=None,
    cancel_group_id=None,
    risk_group_id=None,
    parties=Party('PARTY001', 'CLIENT', 'TRADER')
)

# Encode the order
encoded_order = order.encode()

# Print the encoded order
print(encoded_order)




    new_order_single = NewOrderSingle()
TypeError: NewOrderSingle.__init__() missing 18 required positional arguments: 'sending_time', 'cl_ord_id', 'options_security_id_35', 'side', 'order_qty', 'ord_type', 'price', 'time_in_force', 'open_or_close', 'exec_inst', 'trading_capacity', 'reprice_frequency', 'reprice_behavior', 'mtp_group_id', 'match_trade_prevention', 'cancel_group_id', 'risk_group_id', and 'parties'

