import configparser
import random
import time
import quickfix as fix

# Global variables
sessions = {}

# Custom Application class
class MyApplication(fix.Application):
    def __init__(self):
        super().__init__()
        self.session_id = None

    def onCreate(self, sessionID):
        print("Session created -", sessionID.toString())
        self.session_id = sessionID

    # Implement other required methods of the Application class


# Function to handle the fromAdmin message
def fromAdmin(message, session):
    global sessions
    session_id = session.getSessionID()
    incoming_msg_seq_num = int(message.getHeader().getField(34))
    msg_type = message.getHeader().getField(35)

    if msg_type == 'A':  # Logon message
        if incoming_msg_seq_num == 1:
            print(f"Session established for {session_id}")
            sessions[session_id] = True
    elif msg_type == '5':  # Logout message
        print(f"Session disconnected for {session_id}")
        sessions[session_id] = False

# Function to generate a random message based on weightage
def generate_message(template, message_weights, session_id):
    # Calculate total weightage
    total_weight = sum(message_weights.values())
    
    # Generate a random number within the total weightage
    random_num = random.randint(1, total_weight)
    
    # Find the message type based on the random number
    cumulative_weight = 0
    for msg_type, weight in message_weights.items():
        cumulative_weight += weight
        if random_num <= cumulative_weight:
            # Replace placeholders in the template with the message type, ClOrdID, and outgoing sequence number
            message = template.replace('<MsgType>', msg_type)
            message = message.replace('<ClOrdID>', generate_clordid())
            message = message.replace('<SeqNum>', str(get_outgoing_seq_num(session_id)))
            message = message.replace('<SendingTime>', fix.UtcTimeStamp().getString())
            
            # Calculate the CheckSum
            checksum = calculate_checksum(message)
            
            # Calculate the message length (excluding SOH characters)
            message_length = len(message) - message.count('|')
            
            # Replace the placeholders for message length and CheckSum
            message = message.replace('<BodyLength>', str(message_length))
            message = message.replace('<CheckSum>', checksum)
            
            return message

# Function to calculate the CheckSum (Tag 10) for a given FIX message
def calculate_checksum(message):
    checksum = sum(ord(c) for c in message) % 256
    return f'{checksum:03}'  # Ensure the CheckSum is three digits

# Function to generate a unique ClOrdID for each message
def generate_clordid():
    return str(int(time.time()))

# Function to get the outgoing sequence number for a session
def get_outgoing_seq_num(session_id):
    return fix.Session.lookupSession(session_id).getResponder().getNextSenderMsgSeqNum()

# Function to send messages and heartbeats
def send_messages(template, message_weights, message_rate, send_duration):
    start_time = time.time()
    end_time = start_time + send_duration

    while time.time() < end_time:
        for session_id in sessions.keys():
            if sessions[session_id]:
                session = fix.Session.lookupSession(session_id)

                # Generate and send a random message
                message = generate_message(template, message_weights, session_id)
                session.send(message)

                # Send a heartbeat message
                heartbeat = fix.Message()
                heartbeat.getHeader().setField(35, '0')
                session.send(heartbeat)

        # Sleep based on the desired message rate
        time.sleep(1 / message_rate)

# Read configuration from config.ini file
config = configparser.ConfigParser()
config.read('config.ini')

template_file = config.get('LoadGenerator', 'template_file')
connection_config_file = config.get('LoadGenerator', 'connection_config_file')
message_rate = float(config.get('LoadGenerator', 'message_rate'))
heartbeat_interval = float(config.get('LoadGenerator', 'heartbeat_interval'))
log_file = config.get('LoadGenerator', 'log_file')
send_duration = int(config.get('LoadGenerator', 'send_duration'))

# Load the template file
with open(template_file, 'r') as file:
    template = file.read()

# Load the connection configuration file
connections = configparser.ConfigParser()
connections.read(connection_config_file)

# Get the message types and their weights
message_weights = dict(connections.items('MessageTypes'))

# Initialize FIX settings and application
settings = fix.SessionSettings(connection_config_file)
application = MyApplication()
storeFactory = fix.FileStoreFactory(settings)
logFactory = fix.FileLogFactory(settings)

# Create the FIX initiator
initiator = fix.SocketInitiator(application, storeFactory, settings, logFactory)

# Start the FIX sessions
initiator.start()

# Wait for sessions to be established
while not all(sessions.values()):
    time.sleep(1)

# Send messages and heartbeats
send_messages(template, message_weights, message_rate, send_duration)

# Stop the FIX sessions
initiator.stop()
