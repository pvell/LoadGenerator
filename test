   # Generate ShortTwoSideBulkQuote message
        sending_time = UTCTimestampNanos(int(time.time() * 10**9))
        cl_ord_id = ''.join(choices(string.ascii_uppercase + string.digits, k=20))
        time_in_force = TimeInForceType(0)
        exec_inst = ExecInstType(0)
        trading_capacity = TradingCapacityType(0)
        mtp_group_id = MtpGroupIDType(0)
        match_trade_prevention = MatchTradePreventionType(0)
        cancel_group_id = UINT16(0)
        risk_group_id = UINT16(0)
        efid = connection_config[session_name]['EFID']
        party_id = PartyID(efid)
        party_id_source = PartyIDSource('D')
        party_role = PartyRoleType('CUSTOMER')
        parties = [PartiesGroup(party_ids=[[party_id, party_id_source, party_role]])]
        quotes = [
            ShortTwoSidedQuote(1, 'ABC', 10, 0, 100.0, 15, 0, 110.0),  
            ShortTwoSidedQuote(2, 'XYZ', 20, 0, 120.0, 25, 0, 122.0) 
        ]

        Short_Two_Side_Bulk_Quote = ShortTwoSideBulkQuote(
            sending_time=sending_time,
            cl_ord_id=cl_ord_id,
            time_in_force=time_in_force,
            exec_inst=exec_inst,
            trading_capacity=trading_capacity,
            mtp_group_id=mtp_group_id,
            match_trade_prevention=match_trade_prevention,
            cancel_group_id=cancel_group_id,
            risk_group_id=risk_group_id,
            parties=parties,
            quotes=quotes
        )

        # Encode the ShortTwoSideBulkQuote instance
        encoded_message = Short_Two_Side_Bulk_Quote.encode()
        unsequenced_message = struct.pack('!BH', 104, 102)  # MessageType=104, MessageLength=6, TCP Header Length=102
        message = unsequenced_message + encoded_message

        # Print the encoded message
        print(message)
        return message




class ShortTwoSideBulkQuote:
    TEMPLATE_ID = 2
    num_groups = 2
    schema_id = 1
    version = 266
    BLOCK_LENGTH = 96


    def __init__(self, **kwargs ):
        self.sbe_header = SBEHeader(self.BLOCK_LENGTH, self.TEMPLATE_ID, self.schema_id, self.version, self.num_groups )
        self.sending_time = kwargs.get('sending_time', UTCTimestampNanos(0))
        self.cl_ord_id = kwargs.get('cl_ord_id', Char(''))
        self.time_in_force = kwargs.get('time_in_force', TimeInForceType(0))
        self.exec_inst = kwargs.get('exec_inst', ExecInstType(0))
        self.trading_capacity = kwargs.get('trading_capacity', TradingCapacityType(0))
        self.mtp_group_id = kwargs.get('mtp_group_id', MtpGroupIDType(0))
        self.match_trade_prevention = kwargs.get('match_trade_prevention', MatchTradePreventionType(0))
        self.cancel_group_id = kwargs.get('cancel_group_id', UINT16(0))
        self.risk_group_id = kwargs.get('risk_group_id', UINT16(0))
        quote_entries = len(kwargs.get('quotes', []))
        party_entries = len(kwargs.get('parties', []))
        self.no_party_ids = kwargs.get('repeating_group_dimensions', RepeatingGroupDimensions(18,party_entries))
        self.parties = kwargs.get('parties',PartiesGroup() )
        self.no_quote_entries = kwargs.get(RepeatingGroupDimensions(15,quote_entries))
        self.quotes = kwargs.get('quotes', ShortTwoSidedQuote())

    def encode(self):
        encoded_header = self.sbe_header.encode()
        encoded_sending_time = self.sending_time.encode()
        encoded_cl_ord_id = self.cl_ord_id.encode()
        encoded_time_in_force = self.time_in_force.encode()
        encoded_exec_inst = self.exec_inst.encode()
        encoded_trading_capacity = self.trading_capacity.encode()
        encoded_mtp_group_id = b'' if self.mtp_group_id is None else self.mtp_group_id.encode()
        encoded_match_trade_prevention = b'' if self.match_trade_prevention is None else \
            self.match_trade_prevention.encode()
        encoded_cancel_group_id = b'' if self.cancel_group_id is None else self.cancel_group_id.encode()
        encoded_risk_group_id = b'' if self.risk_group_id is None else self.risk_group_id.encode()

        encoded_parties = b'' if self.parties is None else self.parties.encode()

        encoded_quotes = b'' if self.quotes is None else self.quotes.encode()

        encoded_message = encoded_header + encoded_sending_time + encoded_cl_ord_id + encoded_time_in_force + \
            encoded_exec_inst + encoded_trading_capacity + encoded_mtp_group_id + encoded_match_trade_prevention + \
            encoded_cancel_group_id + encoded_risk_group_id + encoded_parties + encoded_quotes

        return encoded_message




class ShortTwoSidedQuote:
    SIZE = 25

    def __init__(self, list_seq_no, options_security_id, bid_size, bid_exponent,bid_mantissa, offer_size,offer_exponent,offer_mantissa):
        self.list_seq_no = UINT8(list_seq_no)
        self.options_security_id = Char(options_security_id)
        self.bid_size = UINT16(bid_size)
        self.bid_px = ShortPriceType(bid_exponent,bid_mantissa)
        self.offer_size = UINT16(offer_size)
        self.offer_px = ShortPriceType(offer_exponent,offer_mantissa)

    def encode(self):
        encoded_list_seq_no = self.list_seq_no.encode()
        encoded_options_security_id = self.options_security_id.encode()
        encoded_bid_size = self.bid_size.encode()
        encoded_bid_px = self.bid_px.encode()
        encoded_offer_size = self.offer_size.encode()
        encoded_offer_px = self.offer_px.encode()

        return encoded_list_seq_no + encoded_options_security_id + encoded_bid_size + encoded_bid_px + \
               encoded_offer_size + encoded_offer_px


Failed to establish session for Session1: ShortTwoSidedQuote.__init__() missing 8 required positional arguments: 'list_seq_no', 'options_security_id', 'bid_size', 'bid_exponent', 'bid_mantissa', 'offer_size', 'offer_exponent', and 'offer_mantissa'
