import configparser
import quickfix as fix

class MyApplication(fix.Application):
    def __init__(self):
        super().__init__()

    def onCreate(self, sessionID):
        print("Session created -", sessionID.toString())

    def onLogon(self, sessionID):
        print("Logged on -", sessionID.toString())

    def onLogout(self, sessionID):
        print("Logged out -", sessionID.toString())

    def toAdmin(self, message, sessionID):
        print("Sending admin message -", message.toString())

    def fromAdmin(self, message, sessionID):
        print("Receiving admin message -", message.toString())

    def toApp(self, message, sessionID):
        print("Sending application message -", message.toString())

    def fromApp(self, message, sessionID):
        print("Receiving application message -", message.toString())

def get_session_id():
    # Load the configuration from config.ini
    config = configparser.ConfigParser()
    config.read('config.ini')

    # Read the configuration values
    connection_config_file = config.get('LoadGenerator', 'connection_config_file')

    # Create the SessionSettings object
    settings = fix.SessionSettings(connection_config_file)

    # Create the message store factory
    store_factory = fix.FileStoreFactory(settings)

    # Create the application
    application = MyApplication()

    # Create the initiator
    initiator = fix.SocketInitiator(application, store_factory, settings)

    # Start the initiator
    initiator.start()

    # Wait for the session to logon
    while not fix.Session.isLoggedOn():
        fix.sleep(1)

    # Get the sessions
    sessions = list(fix.Session.getSessions())

    # Check if there are any sessions
    if len(sessions) > 0:
        session_id = sessions[0].getSessionID()
        print("Session ID:", session_id.toString())
    else:
        print("No sessions found")

    # Stop the initiator
    initiator.stop()

def main():
    get_session_id()

if __name__ == '__main__':
    main()
