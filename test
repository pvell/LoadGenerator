import socket
import struct
import time
import sbe

# Load the SBE schema
schema_file = 'sbe-schema-equities.xml'
schema = sbe.load_schema(schema_file)

# TCP/IP connection details
host = '10.2.128.10'
port = 30076

# Token and header details
user = 'exactpro6'
password = 'expro6pwd'
token = f'{user}:{password}'

# Login request
message_type = 100
token_type = 'P'  # Assuming token type is always 'P'
token_length = len(token)
header = struct.pack('!BHB', message_type, token_length + 1, token_type.encode('utf-8')[0])
message = header + token.encode('utf-8')

# Create a socket and establish the connection
client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client_socket.connect((host, port))

# Set socket to binary mode
client_socket.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)

# Send the login request
client_socket.sendall(message)


# Wait for the Login Accepted message
response_header = client_socket.recv(2)
response_type, response_length = struct.unpack('!BB', response_header)

if response_type == 1:  # Login Accepted
    response_message = client_socket.recv(response_length)
    print("Login Accepted:")
elif response_type == 2:  # Login Rejected
    response_message = client_socket.recv(response_length)
    print("Login Rejected:")
    client_socket.close()
    exit()  # Exit the script gracefully after login rejection
elif response_type == 3:  # Start of Session
    response_message = client_socket.recv(response_length)
    session_id = struct.unpack('!Q', response_message[:8])[0]
    print("Start of Session. Session ID:", session_id)
else:
    print("Invalid response received.")
    client_socket.close()
    exit()  # Exit the script if an invalid response is received

# Send the MassCancelRequest message
mass_cancel_fields = {
    11: "CLORD12345",  # ClOrdID
    55: "AAPL",  # Side
}
mass_cancel_message_name = 'MassCancelRequest'
encoded_mass_cancel_message = sbe.encode_message(schema, mass_cancel_message_name, mass_cancel_fields)
client_socket.send(encoded_mass_cancel_message)

# Handle the response for the MassCancelRequest message
response_header = client_socket.recv(2)
response_length = struct.unpack('!H', response_header)[0]

if response_type > 0:  # ExecutionReport
    response_message = client_socket.recv(response_length)
    print(response_message)
else:
    print("Invalid response received for MassCancelRequest.")

# Send the NewOrderMessage
new_order_fields = {
    528: "A",
    582: 1,
    18: 4,
    11: "CLORD67890",  # ClOrdID
    55: "AAPL",
    54: "SELL",  # Side
    38: 50,  # OrderQty
    44: 101.5,  # Price
    40: "LIMIT",  # OrdType
    59: "DAY",  # TimeInForce
}
new_order_message_name = 'NewOrderSingle'
encoded_new_order_message = sbe.encode_message(schema, new_order_message_name, new_order_fields)
client_socket.send(encoded_new_order_message)

# Handle the response for the NewOrderMessage
response_header = client_socket.recv(2)
response_length = struct.unpack('!H', response_header)[0]

if response_length > 0:  # ExecutionReport
    response_message = client_socket.recv(response_length)
    print(response_message)
else:
    print("Invalid response received for NewOrderMessage.")

# Close the client socket
client_socket.close()



essageHeader={
    blockLength=96;
    templateId=1;
    schemaId=1;
    version=266
};
ClOrdID=1686623958147;
Symbol=UBER;
Side=Sell(2);
OrderQty=300;
OrdType=Limit(2);
Price=15;
TimeInForce=Day(0);
OrderCapacity=Agency(A);
CustOrderCapacity=MemberTradingOnTheirOwnAccount(1);
ExecInst=4;
RepriceFrequency=SingleReprice(0);
RepriceBehavior=RepriceLockRepriceCross(2);
UnsequencedMessage={
    TCPHeader={
        MessageLength=102;
        MessageType=104
    }    
}

00000000: 6800 6600 6001 0101 0a31 3638 3636 3233 hf`
1686623 
00000010: 3935 3831 3437 0000 0000 0000 0055 4245 958147UBE 
00000020: 5200 0000 0000 0000 0032 0000 012c 3200 R2,2 
00000030: 0000 0000 e4e1 c030 4101 0004 8000 0000 äáÀ0A 
00000040: 0000 0000 ffff ffff ffff ffff ffff ffff ÿÿÿÿÿÿÿÿÿÿÿÿ 
00000050: ffff ffff ff00 ffff ffff ff00 0002 ffff ÿÿÿÿÿÿÿÿÿÿÿÿ 
00000060: ffff ffff ff00 0000 00                  ÿÿÿÿÿ 


bytearray(b'\x00\x05\x01\x01\x01\n\x00\x01')


    <sbe:message blockLength="96" id="1" name="NewOrderSingle">
        <field id="1" name="ClOrdID" type="NewOrderSingleClOrdID"/>
        <field id="2" name="MPID" presence="optional" type="NewOrderSingleMPID"/>
        <field id="3" name="Symbol" type="NewOrderSingleSymbol"/>
        <field id="4" name="SymbolSfx" presence="optional" type="NewOrderSingleSymbolSfx"/>
        <field id="5" name="Side" type="SideType"/>
        <field id="6" name="OrderQty" type="uint32"/>
        <field id="7" name="OrdType" type="OrdType"/>
        <field id="8" name="Price" presence="optional" type="PriceType"/>
        <field id="9" name="TimeInForce" type="TimeInForceType"/>
        <field id="10" name="OrderCapacity" type="OrderCapacityType"/>
        <field id="11" name="CustOrderCapacity" type="CustOrderCapacityType"/>
        <field id="12" name="ExecInst" type="ExecInstType"/>
        <field id="13" name="PegOffsetValue" presence="optional" type="PriceType"/>
        <field id="14" name="PegPriceType" presence="optional" type="PegType"/>
        <field id="15" name="ExpireTime" presence="optional" type="UTCTimestampNanos"/>
        <field id="16" name="MinQty" presence="optional" type="uint32"/>
        <field id="17" name="DisplayQty" presence="optional" type="uint32"/>
        <field id="18" name="DisplayMethod" presence="optional" type="DispMethodType"/>
        <field id="19" name="ReserveReplenishTiming" presence="optional" type="ReserveReplenishTimingType"/>
        <field id="20" name="DisplayMinIncr" presence="optional" type="uint32"/>
        <field id="21" name="LocateReqd" presence="optional" type="char"/>
        <field id="22" name="RepriceFrequency" presence="optional" type="RepriceFrequencyType"/>
        <field id="23" name="RepriceBehavior" presence="optional" type="RepriceBehaviorType"/>
        <field id="24" name="CancelGroupId" presence="optional" type="uint16"/>
        <field id="25" name="StpGroupId" presence="optional" type="uint16"/>
        <field id="26" name="SelfTradePrevention" presence="optional" type="SelfTradePreventionType"/>
        <field id="27" name="RiskGroupId" presence="optional" type="uint16"/>
        <field id="28" name="LnkId" presence="optional" type="NewOrderSingleLnkId"/>
    </sbe:message>
    
    
    
    import sbe

# Load the SBE schema
schema_file = 'sbe-schema-equities.xml'
schema = sbe.load_schema(schema_file)

# Encoded message bytes
encoded_message = bytearray(b'\x00\x05\x01\x01\x01\n\x00\x01')

# Decode the message using the schema
message_name = 'NewOrderSingle'
decoded_message = sbe.decode_message(schema, message_name, encoded_message)

# Print the decoded fields
print(f"{message_name} Decoded Message:")
for field_id, field_value in decoded_message.items():
    print(f"Field ID: {field_id}, Field Value: {field_value}")


