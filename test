# New Order Single
# New Order Single
cl_ord_id = '1686883344217'
mpid = None  # Null value
symbol = 'UBER'
symbol_sfx = None  # Null value
side = 2  # Sell
order_qty = 300
ord_type = 2  # Limit
price = None  # Null value
time_in_force = '0'  # Day
order_capacity = 'A'  # Agency
cust_order_capacity = 1  # MemberTradingOnTheirOwnAccount
exec_inst = 0
peg_offset_value = None  # Null value
peg_price_type = None  # Null value
expire_time = None  # Null value
min_qty = None  # Null value
display_qty = None  # Null value
display_method = None  # Null value
reserve_replenish_timing = None  # Null value
display_min_incr = None  # Null value
locate_reqd = None  # Null value
reprice_frequency = None  # Null value
reprice_behavior = None  # Null value
cancel_group_id = None  # Null value
stp_group_id = None  # Null value
self_trade_prevention = None  # Null value
risk_group_id = None  # Null value
lnk_id = None  # Null value

# SBE Header
BlockLength = 96
TemplateID = 1
SchemaID = 1
Version = 266
new_order_single_header = struct.pack('!HBBH', BlockLength, TemplateID, SchemaID, Version)



# Unsequenced Message
unsequenced_message_header = struct.pack('!BH', 104, 102)  # MessageType=104, MessageLength=6, TCP Header Length=102
unsequenced_message_body = struct.pack('!H', 102)  # TCP Header MessageLength=102, MessageType=104
unsequenced_message = unsequenced_message_header

new_order_single_body = struct.pack('!16s4s6s6sBIBdBBB2s8sB8sIIBB4sBBBHHBHI',
                                    cl_ord_id.encode('utf-8'),
                                    mpid.encode('utf-8') if mpid else b'\xFF',
                                    symbol.encode('utf-8'),
                                    symbol_sfx.encode('utf-8') if symbol_sfx else b'\xFF',
                                    side,
                                    order_qty,
                                    ord_type,
                                    price if price else 0.0,
                                    time_in_force.encode('utf-8'),
                                    order_capacity.encode('utf-8'),
                                    cust_order_capacity,
                                    exec_inst.to_bytes(2, 'big'),
                                    peg_offset_value if peg_offset_value else 0.0,
                                    peg_price_type if peg_price_type else b'\xFF',
                                    expire_time if expire_time else 0,
                                    min_qty if min_qty else 0,
                                    display_qty if display_qty else 0,
                                    display_method if display_method else b'\xFF',
                                    reserve_replenish_timing if reserve_replenish_timing else b'\xFF',
                                    display_min_incr if display_min_incr else 0,
                                    locate_reqd if locate_reqd else b'\xFF',
                                    reprice_frequency if reprice_frequency else 0,
                                    reprice_behavior if reprice_behavior else b'\xFF',
                                    cancel_group_id if cancel_group_id else 0,
                                    stp_group_id if stp_group_id else 0,
                                    self_trade_prevention if self_trade_prevention else 0,
                                    risk_group_id if risk_group_id else 0,
                                    lnk_id if lnk_id else 0
                                    )




# Print the hex representation
hex_representation = new_order_single_body.hex()
print(hex_representation)


# Send the New Order Single with Unsequenced Message
client_socket.sendall(unsequenced_message + new_order_single_header + new_order_single_body )

# Receive and handle the response
response_header = client_socket.recv(3)
print(response_header)
response_type, response_length = struct.unpack('!B H', response_header)
print(response_type, response_length)

# Close the socket
client_socket.close()
