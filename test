import socket
import struct

# TCP/IP connection details
host = '127.0.0.1'
port = 8080

# Token and header details
user = 'your_username'
password = 'your_password'
token = f'{user}:{password}'

# Login request
message_type = 100
token_type = 'P'  # Assuming token type is always 'P'
token_length = len(token)
header = struct.pack('!IHc', message_type, token_length, token_type.encode('utf-8'))
message = header + token.encode('utf-8')

# Create a socket and establish the connection
client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client_socket.connect((host, port))

# Set socket to binary mode
client_socket.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)

# Send the login request
client_socket.sendall(message)

# Receive and handle the response
response_header = client_socket.recv(6)
response_type, response_length = struct.unpack('!IH', response_header)

if response_type == 1:  # Login Accepted
    response_message = client_socket.recv(response_length)
    print("Login Accepted:", response_message.decode('utf-8'))
elif response_type == 2:  # Login Rejected
    response_message = client_socket.recv(response_length)
    print("Login Rejected:", response_message.decode('utf-8'))
    client_socket.close()
    exit()  # Exit the script gracefully after login rejection
else:
    print("Invalid response received.")
    client_socket.close()
    exit()  # Exit the script if an invalid response is received

# Continue with the session
while True:
    response_header = client_socket.recv(6)
    response_type, response_length = struct.unpack('!IH', response_header)

    if response_type == 3:  # Start of Session
        response_message = client_socket.recv(response_length)
        print("Start of Session:", response_message.decode('utf-8'))
        break
    else:
        print("Invalid response received.")
        client_socket.close()
        exit()  # Exit the script if an invalid response is received

# Close the socket
client_socket.close()



(myenv) pvellanki@qa2434:~/loadgenerator/sbe$ python3 test3.py
b'\x00\x00\x00d\x00\x14Pexpro_01:expro_01pwd'
b'\x00\x00\x00d\x00\x14Pexpro_01:expro_01pwd'
sent login request)
Traceback (most recent call last):
  File "/home/pvellanki/loadgenerator/sbe/test3.py", line 34, in <module>
    response_header = client_socket.recv(6)
ConnectionResetError: [Errno 104] Connection reset by peer




