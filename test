import struct

def encode_message(
    cl_ord_id,
    mpid,
    symbol,
    symbol_sfx,
    side,
    order_qty,
    ord_type,
    price,
    time_in_force,
    order_capacity,
    cust_order_capacity,
    exec_inst,
    peg_offset_value,
    peg_price_type,
    expire_time,
    min_qty,
    display_qty,
    display_method,
    reserve_replenish_timing,
    display_min_incr,
    locate_reqd,
    reprice_frequency,
    reprice_behavior,
    cancel_group_id,
    stp_group_id,
    self_trade_prevention,
    risk_group_id,
    lnk_id,
):
    cl_ord_id_bytes = cl_ord_id.encode("ascii")
    mpid_bytes = mpid.encode("ascii")
    symbol_bytes = symbol.encode("ascii")
    symbol_sfx_bytes = symbol_sfx.encode("ascii")

    message = struct.pack(
        ">H",
        len(cl_ord_id_bytes) + 1,
    )
    message += cl_ord_id_bytes + b"\x00"
    message += struct.pack(
        ">H",
        len(mpid_bytes) + 1,
    )
    message += mpid_bytes + b"\x00"
    message += struct.pack(
        ">H",
        len(symbol_bytes) + 1,
    )
    message += symbol_bytes + b"\x00"
    message += struct.pack(
        ">H",
        len(symbol_sfx_bytes) + 1,
    )
    message += symbol_sfx_bytes + b"\x00"
    message += struct.pack(
        ">iQHHdBBBdidiBBHHBHH",
        side,
        order_qty,
        ord_type,
        price,
        time_in_force,
        order_capacity,
        cust_order_capacity,
        exec_inst,
        peg_offset_value,
        peg_price_type,
        expire_time,
        min_qty,
        display_qty,
        display_method,
        reserve_replenish_timing,
        display_min_incr,
        locate_reqd,
        reprice_frequency,
        reprice_behavior,
        cancel_group_id,
        stp_group_id,
        self_trade_prevention,
        risk_group_id,
        lnk_id,
    )

    return message

def decode_message(message):
    cl_ord_id_len = struct.unpack(">H", message[:2])[0]
    cl_ord_id = message[2:2 + cl_ord_id_len - 1].decode("ascii")
    message = message[2 + cl_ord_id_len:]

    mpid_len = struct.unpack(">H", message[:2])[0]
    mpid = message[2:2 + mpid_len - 1].decode("ascii")
    message = message[2 + mpid_len:]

    symbol_len = struct.unpack(">H", message[:2])[0]
    symbol = message[2:2 + symbol_len - 1].decode("ascii")
    message = message[2 + symbol_len:]

    symbol_sfx_len = struct.unpack(">H", message[:2])[0]
    symbol_sfx = message[2:2 + symbol_sfx_len - 1].decode("ascii")
    message = message[2 + symbol_sfx_len:]

    (
        side,
        order_qty,
        ord_type,
        price,
        time_in_force,
        order_capacity,
        cust_order_capacity,
        exec_inst,
        peg_offset_value,
        peg_price_type,
        expire_time,
        min_qty,
        display_qty,
        display_method,
        reserve_replenish_timing,
        display_min_incr,
        locate_reqd,
        reprice_frequency,
        reprice_behavior,
        cancel_group_id,
        stp_group_id,
        self_trade_prevention,
        risk_group_id,
        lnk_id,
    ) = struct.unpack(">iQHHdBBBdidiBBHHBHH", message)

    return (
        cl_ord_id,
        mpid,
        symbol,
        symbol_sfx,
        side,
        order_qty,
        ord_type,
        price,
        time_in_force,
        order_capacity,
        cust_order_capacity,
        exec_inst,
        peg_offset_value,
        peg_price_type,
        expire_time,
        min_qty,
        display_qty,
        display_method,
        reserve_replenish_timing,
        display_min_incr,
        locate_reqd,
        reprice_frequency,
        reprice_behavior,
        cancel_group_id,
        stp_group_id,
        self_trade_prevention,
        risk_group_id,
        lnk_id,
    )
