import configparser
import random
import time

# Global variables
outgoing_msg_seq_num = 1
incoming_msg_seq_num = 1

# Function to increment outgoing message sequence number
def increment_msg_seq_num():
    global outgoing_msg_seq_num
    outgoing_msg_seq_num += 1
    return outgoing_msg_seq_num

# Function to handle the fromAdmin message
def fromAdmin(message, session):
    global incoming_msg_seq_num
    msg_type = message.getHeader().getField(35)

    if msg_type == 'A':  # Logon message
        if message.isSetField(34):  # Check if MsgSeqNum field is present
            incoming_msg_seq_num = int(message.getHeader().getField(34))
            print("Received Logon Acknowledgement. Incoming MsgSeqNum:", incoming_msg_seq_num)
            session.setSessionState(True)  # Claim session as established
    elif msg_type == '5':  # Logout message
        # Handle logout message
        print("Received Logout message")
        session.setSessionState(False)  # Update session state as disconnected

# Function to generate a random message
def generate_message(template):
    # Logic to generate a random message based on the template
    # Replace this with your custom logic to generate messages from the template
    return template.replace("<SeqNum>", str(increment_msg_seq_num()))

# Function to send messages at the specified rate for a duration
def send_messages(template, rate, duration):
    start_time = time.time()
    end_time = start_time + duration

    while time.time() < end_time:
        message = generate_message(template)
        send_message(message)

        # Delay to achieve the desired message rate
        time.sleep(1 / rate)

# Read configuration from config.ini file
config = configparser.ConfigParser()
config.read('config.ini')

template_file = config.get('LoadGenerator', 'template_file')
connection_config_file = config.get('LoadGenerator', 'connection_config_file')
message_rate = float(config.get('LoadGenerator', 'message_rate'))

# Load the template file
with open(template_file, 'r') as file:
    template = file.read()

# Establish FIX session and send load
# ...

# Handle logon reject and resend logon with correct MsgSeqNum
if logon_rejected:
    incoming_msg_seq_num = logon_rejected_seq_num + 1
    logon_message.getHeader().setField(34, incoming_msg_seq_num)  # Set correct MsgSeqNum
    send_message(logon_message)

# Generate and send messages at the specified rate for the duration
send_messages(template, message_rate, duration)

# Logout from the FIX session
# ...
