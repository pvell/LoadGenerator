while len(receive_buffer) >= 3:
    # Find the start of a valid message (a byte with value 0)
    start_index = receive_buffer.find(b'\x00')

    if start_index == -1:
        # No valid message found, break the loop
        break

    # Check if the complete header is in the buffer
    if len(receive_buffer) < start_index + 3:
        break

    # Extract the complete header
    header_bytes = receive_buffer[start_index:start_index + 3]

    # Unpack the header
    message_type, message_length = struct.unpack('!BH', header_bytes)

    print('header_bytes:', header_bytes)
    print('message_type:', message_type)
    print('message_length:', message_length)

    if message_type == 0:
        # Handle heartbeat message
        print('Heartbeat message')
        # Update the receive buffer for the next iteration
        receive_buffer = receive_buffer[start_index + 3:]
        continue

    # Check if the complete message is in the buffer
    if len(receive_buffer) < start_index + 3 + message_length:
        break

    # Extract the complete message
    complete_message = receive_buffer[start_index + 3:start_index + 3 + message_length]
    print('Complete message:', complete_message)

    # Process the complete message based on the message type
    self.handle_sbe_message(complete_message, message_type)

    # Update the receive buffer for the next iteration
    receive_buffer = receive_buffer[start_index + 3 + message_length:]
