import sqlite3
import glob
import re

# Define the regular expression pattern for matching .db files
db_pattern = r'*10-*.db'

# Specify the output consolidated database file
consolidated_db_file = 'consolidated_data.db'

# Connect to the consolidated database
consolidated_conn = sqlite3.connect(consolidated_db_file)

# Create a cursor
consolidated_cursor = consolidated_conn.cursor()

# Iterate through database files matching the pattern
for db_file in glob.glob(db_pattern):
    # Extract the month and year from the file name (assuming the format is YYYY-MM.db)
    match = re.match(r'(\d{4}-\d{2}).db', db_file)
    if match:
        month_year = match.group(1)
        # Connect to the individual database
        conn = sqlite3.connect(db_file)
        cursor = conn.cursor()

        # Attach the individual database to the consolidated database
        cursor.execute(f"ATTACH DATABASE '{db_file}' AS {month_year}")

        # Copy data from the individual database to the consolidated database
        query = f"INSERT INTO consolidated_data SELECT * FROM {month_year}.grouped_trades_summary"
        consolidated_cursor.execute(query)

        # Detach the individual database
        cursor.execute(f"DETACH DATABASE {month_year}")
        conn.close()

# Commit changes to the consolidated database
consolidated_conn.commit()

# Group data by the specified columns
query = """
SELECT Side, Sub_ID, Ultimate_Clearing_Firm, Entering_Firm_Col1, EXCH, TRANS_TYPE, SUM(Total_Quantity)
FROM consolidated_data
GROUP BY Side, Sub_ID, Ultimate_Clearing_Firm, Entering_Firm_Col1, EXCH, TRANS_TYPE
"""
result = consolidated_cursor.execute(query)

# Print or process the grouped data as needed
for row in result:
    print(row)  # You can replace this with your desired handling of the data

# Close the consolidated database connection
consolidated_conn.close()
