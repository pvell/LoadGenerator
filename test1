import quickfix as fix
import time
import datetime
import os


class MyApplication(fix.Application):
    def __init__(self):
        super().__init__()
        self.log_file_path = self.get_log_file()
        self.log_directory = "log"

    def fromApp(self, message, sessionID):
        # Log the received message to the specified file
        with open(self.log_file_path, "a") as log_file:
            log_file.write(f"Received FIX Message: {message.toString()}\n")

    def toApp(self, message, sessionID):
        pass

    def fromAdmin(self, message, sessionID):
        pass

    def toAdmin(self, message, sessionID):
        pass

    def get_log_file(self):
        os.makedirs(self.log_directory, exist_ok=True)
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H")
        log_file_name = f"log_file_{timestamp}.log"
        print(os.path.join(self.log_directory, log_file_name))
        return os.path.join(self.log_directory, log_file_name)


    def run(self):
        settings = fix.SessionSettings(self.connection_config_file)
        application = fix.SocketInitiator(self, fix.FileStoreFactory(settings), settings)
        application.start()

        time.sleep(1)

        application.stop()


app = MyApplication()
app.connection_config_file = "acceptor.cfg"


# Run the FIX application
app.run()






Traceback (most recent call last):
  File "smartsFIX.py", line 45, in <module>
    app = MyApplication()
  File "smartsFIX.py", line 10, in __init__
    self.log_file_path = self.get_log_file()
  File "smartsFIX.py", line 28, in get_log_file
    os.makedirs(self.log_directory, exist_ok=True)
  File "/usr/local/lib64/python3.6/site-packages/quickfix.py", line 39558, in <lambda>
    __getattr__ = lambda self, name: _swig_getattr(self, Application, name)
  File "/usr/local/lib64/python3.6/site-packages/quickfix.py", line 83, in _swig_getattr
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))
AttributeError: 'Application' object has no attribute 'log_directory'
