New Grouped table script:

import sqlite3

# Connect to the original SQLite database
conn = sqlite3.connect('trades_81.db')

# Get a list of distinct 'EXCH' values from the original table
distinct_exchanges = conn.execute('SELECT DISTINCT EXCH FROM trades').fetchall()

# Iterate through each distinct 'EXCH' value
for exchange in distinct_exchanges:
    exchange_name = exchange[0]
    
    # Create a new table for the current exchange to store the query results
    conn.execute(f'''CREATE TABLE IF NOT EXISTS grouped_trades_{exchange_name} (
                        Side TEXT,
                        Sub_ID TEXT,
                        Rpt_ID TEXT,
                        Ultimate_Clearing_Firm TEXT,
                        Entering_Firm_Col1 TEXT,
                        EXCH TEXT,
                        TRANS_TYPE TEXT,
                        BIZ_DT TEXT,
                        CFI TEXT,
                        PREVLY_RPTD TEXT,
                        RPT_TYP TEXT,
                        MTCH_STAT TEXT,
                        Quantity INTEGER  -- Add the Quantity column
                     )''')

    # Query the data from the original table for the current exchange with grouping
    query = f"""
        INSERT INTO grouped_trades_{exchange_name} (Side, Sub_ID, Rpt_ID, Ultimate_Clearing_Firm, Entering_Firm_Col1, EXCH, TRANS_TYPE, BIZ_DT, CFI, PREVLY_RPTD, RPT_TYP, MTCH_STAT, Quantity)
        SELECT 
            t.Side,
            MAX(CASE WHEN t.Sub_ID != '' AND t.Sub_ID IS NOT NULL THEN t.Sub_ID END) AS Sub_ID,
            t.Rpt_ID,
            MAX(CASE WHEN t.Ultimate_Clearing_Firm != '' AND t.Ultimate_Clearing_Firm IS NOT NULL THEN t.Ultimate_Clearing_Firm END) AS Ultimate_Clearing_Firm,
            MAX(CASE WHEN t.Entering_Firm_Col1 != '' AND t.Entering_Firm_Col1 IS NOT NULL THEN t.Entering_Firm_Col1 END) AS Entering_Firm_Col1,
            t.EXCH,
            t.TRANS_TYPE,
            t.BIZ_DT,
            t.CFI,
            t.PREVLY_RPTD,
            t.RPT_TYP,
            t.MTCH_STAT,
            t.Quantity
        FROM trades t
        WHERE t.EXCH = ?
        GROUP BY t.Rpt_ID, t.Side, t.Quantity
    """

    # Execute the query to insert the data into the new table for the current exchange
    conn.execute(query, (exchange_name,))

# Commit the changes and close the connection to the original database
conn.commit()
conn.close()

print("Data has been successfully inserted into the grouped_trades tables.")





Run the stream further


Create a table where you have a exchange column (all exchanges possible), sum of qty of all trades where sub_ID = C, trans_type =0, side=1(side1_qty) , sum of qty of all trades where sub_ID = C, trans_type =0, side=2 (side2_qty),
 ,sum of qty of all trades where sub_ID = C, trans_type =1 or 4, side=1(side1_bust_qty) , sum of qty of all trades where sub_ID = C, trans_type =1 or 4, side=2 (side2_bust_qty),


 import sqlite3

# Connect to the SQLite database
conn = sqlite3.connect('trades_81.db')

# Create a new table to store the aggregated data
conn.execute('''CREATE TABLE IF NOT EXISTS common_aggregates (
                    EXCH TEXT,
                    Side1_Qty INTEGER,
                    Side2_Qty INTEGER,
                    Side1_Bust_Qty INTEGER,
                    Side2_Bust_Qty INTEGER
                 )''')

# Define a list of exchange codes
exchanges = ["MEMX", "EMLD", "BATO", "C2OX", "EDGO", "GMNI", "MCRY", "MPRL", "XASE", "XBOX", "XBXO", "XCBO", "XISX", "XMIO", "XNDQ", "XPHO", "XPSE"]  # Replace with the actual exchange codes

# Loop through each exchange and calculate the aggregated quantities
for exchange in exchanges:
    query = f"""
        INSERT INTO common_aggregates (EXCH, Side1_Qty, Side2_Qty, Side1_Bust_Qty, Side2_Bust_Qty)
        SELECT 
            '{exchange}' AS EXCH,
            SUM(CASE WHEN Sub_ID = 'C' AND TRANS_TYPE = '0' AND Side = '1' THEN Quantity ELSE 0 END) AS Side1_Qty,
            SUM(CASE WHEN Sub_ID = 'C' AND TRANS_TYPE = '0' AND Side = '2' THEN Quantity ELSE 0 END) AS Side2_Qty,
            SUM(CASE WHEN Sub_ID = 'C' AND (TRANS_TYPE = '1' OR TRANS_TYPE = '4') AND Side = '1' THEN Quantity ELSE 0 END) AS Side1_Bust_Qty,
            SUM(CASE WHEN Sub_ID = 'C' AND (TRANS_TYPE = '1' OR TRANS_TYPE = '4') AND Side = '2' THEN Quantity ELSE 0 END) AS Side2_Bust_Qty
        FROM grouped_trades_{exchange}
    """
    
    # Execute the query to insert the aggregated data into the new table
    conn.execute(query)

# Commit the changes and close the connection
conn.commit()
conn.close()

print("Aggregated data has been successfully inserted into the 'common_aggregates' table.")



import sqlite3
import sys

db_name = sys.argv[1]

# List of exchanges
exchanges = ["MEMX", "EMLD", "BATO", "C2OX", "EDGO", "GMNI", "MCRY", "MPRL", "XASE", "XBOX", "XBXO", "XCBO", "XISX", "XMIO", "XNDQ", "XPHO", "XPSE"]

# Connect to the SQLite database
conn = sqlite3.connect(db_name)
cursor = conn.cursor()

# Create a summary table with dynamic columns for each exchange
cursor.execute(f'''CREATE TABLE IF NOT EXISTS summary (
                    Ultimate_Clearing_Firm TEXT,
                    {', '.join([f"{exchange} INTEGER" for exchange in exchanges])}
                 )''')

# Commit the changes to create the summary table
conn.commit()

# Iterate through each exchange to populate the summary table
for exchange in exchanges:
    table_name = f'grouped_trades_summary_{exchange}'
     # Check if the table exists in the database
    cursor = conn.cursor()
    cursor.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name='{table_name}';")
    result = cursor.fetchone()
    cursor.close()

    if result:
        # Calculate the sum of quantities for each Ultimate_Clearing_Firm in the exchange-specific table
        query = f'''
            INSERT INTO summary (Ultimate_Clearing_Firm, {exchange})
            SELECT Ultimate_Clearing_Firm, SUM(Total_Quantity)
            FROM grouped_trades_summary_{exchange}
            GROUP BY Ultimate_Clearing_Firm
        '''
        conn.execute(query)

# Commit the changes to populate the summary table
conn.commit()

# Close the connection
conn.close()







import sqlite3
import sys

db_name = sys.argv[1]

# List of exchanges
exchanges = ["MEMX", "EMLD", "BATO", "C2OX", "EDGO", "GMNI", "MCRY", "MPRL", "XASE", "XBOX", "XBXO", "XCBO", "XISX", "XMIO", "XNDQ", "XPHO", "XPSE"]

# Connect to the SQLite database
conn = sqlite3.connect(db_name)


# Create a summary table with dynamic columns for each exchange
conn.execute(f'''CREATE TABLE IF NOT EXISTS summary (
                    Ultimate_Clearing_Firm TEXT PRIMARY KEY,
                    {', '.join([f"{exchange} INTEGER" for exchange in exchanges])}
                 )''')



# Iterate through each exchange to populate the summary table
for exchange in exchanges:
    table_name = f'grouped_trades_summary_{exchange}'
     # Check if the table exists in the database
    
    cursor = conn.cursor()
    cursor.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name='{table_name}';")
    result = cursor.fetchone()
    cursor.close()
    

    if result:
        # Calculate the sum of quantities for each Ultimate_Clearing_Firm in the exchange-specific table
        query = f'''
            INSERT INTO summary (Ultimate_Clearing_Firm, {exchange})
            SELECT Ultimate_Clearing_Firm, SUM(Total_Quantity)
            FROM grouped_trades_summary_{exchange}
            GROUP BY Ultimate_Clearing_Firm
        '''
        conn.execute(query)
    else:
        continue


# Commit the changes to populate the summary table
conn.commit()

# Close the connection
conn.close()




pvellanki@qa2434:~/orsa$ python3 OCCSummary.py 06-16.db
Traceback (most recent call last):
  File "/home/pvellanki/orsa/OCCSummary.py", line 43, in <module>
    conn.execute(query)
sqlite3.IntegrityError: UNIQUE constraint failed: summary.Ultimate_Clearing_Firm
