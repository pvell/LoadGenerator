import quickfix as fix
import datetime
import os
import logging
import time

class MyApplication(fix.Application):
    def __init__(self):
        super().__init__()
        self.log_directory = "log"
        self.log_file_path = self.get_log_file()
        self.logger = self.setup_logger()

    def onCreate(self, sessionID):
        self.logger.info(f"Session created - {sessionID.toString()}")

    def fromApp(self, message, sessionID):
        self.logger.debug(f"Received FIX Message: {message.toString()}")

    def toApp(self, message, sessionID):
        pass

    def fromAdmin(self, message, sessionID):
        msg_type = message.getHeader().getField(fix.MsgType()).getString()
        if msg_type == fix.MsgType_Logout:
            reason = message.getField(58)  # Extract the logout reason
            self.logger.warning(f"Received Logout: {reason}")

    def toAdmin(self, message, sessionID):
        if message.getHeader().getField(fix.MsgType()).getString() == fix.MsgType_Logon:
            message.getHeader().setField(1408, "1.3")
            message.getHeader().setField(43, "Y")
            self.logger.info(f"Sent admin message: {message.toString()}")
        return True

    def onLogout(self, sessionID):
        self.logger.info(f"Logout initiated - {sessionID.toString()}")

    def onLogon(self, sessionID):
        self.logger.info(f"Logon Successful - {sessionID.toString()}")

    def get_log_file(self):
        log_directory = "log"
        os.makedirs(log_directory, exist_ok=True)
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H")
        log_file_name = f"log_file_{timestamp}.log"
        return os.path.join(self.log_directory, log_file_name)

    def setup_logger(self):
        logger = logging.getLogger(__name__)
        logger.setLevel(logging.DEBUG)
        
        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')

        file_handler = logging.FileHandler(self.log_file_path)
        file_handler.setLevel(logging.DEBUG)
        file_handler.setFormatter(formatter)
        logger.addHandler(file_handler)

        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(formatter)
        logger.addHandler(console_handler)

        return logger

    def run(self):
        settings = fix.SessionSettings(self.connection_config_file)
        application = fix.SocketInitiator(self, fix.FileStoreFactory(settings), settings)
        application.start()

        time.sleep(1)

        application.stop()

app = MyApplication()
app.connection_config_file = "acceptor.cfg"
app.run()
