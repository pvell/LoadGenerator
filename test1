pvellanki@orsa01:/data/pvellanki/orsa-package-2$ cat run_trades.sh 
#!/bin/bash
date="$1"
db_name="$date.db"

# Step 1: Split the big XML file using split.py
python3 split_v4.py orsa_trades_2023-"$date".xml "$date"

# Step 2: Process each split file using xml_to_db.py
for split_file in "$date"_*; do
    python3 xml_2_db_v5.py "$split_file" "$db_name" > log.txt &

    # Capture the PID of the last background process
    pid=$!

    # Wait for the background process to complete
    wait "$pid"

    echo "Processing of $split_file completed."
done

# Step 3: Group the data in the database using groupedexcel.py
python3 groupedexcel_v5.py "$db_name"

grouped_pid=$!
# Wait for groupedexcel.py to complete
wait "$grouped_pid"

echo "Grouping of data completed."

# Step 4: Perform further processing using furtherstreaming.py
python3 streamfurther_v4.py "$db_name"

streamfurther_pid=$!
# Wait for groupedexcel.py to complete
wait "$streamfurther_pid"

echo "Grouping summary of data completed."







pvellanki@orsa01:/data/pvellanki/orsa-package-2$ cat run_exchange_recon.sh 
#!/bin/bash
date="$1"
db_name="$date.db"



# Step 1: Group the data in the database using groupedexcel.py
python3 groupbyexchange.py "$db_name"

groupedbyexch_pid=$!
# Wait for groupedexcel.py to complete
wait "$groupedbyexch_pid"

echo "Grouping by exchange completed."

# Step 4: Perform further processing using furtherstreaming.py
python3 streamfurther_v5.py "$db_name"

SF5_pid=$!
wait "$SF5_pid"

echo "grouping summary bu exchange completed"

python3 exchangerecon.py "$db_name"

exchangerecon_pid=$!
wait "$exchangerecon_pid"

echo "exchange recon against OCC Completed"

python3 excel.py "$db_name"

excel_pid=$!
wait "$excel_pid"

echo "Common aggregates file generated"







