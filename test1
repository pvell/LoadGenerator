import configparser
import random
import time
import datetime
import os
import quickfix as fix
import quickfix44 as fix44



# Global variables
sessions = {}

# Class representing the FIX application
class MyApplication(fix.Application):
    def __init__(self, message_weights, message_rate):
        super().__init__()
        self.message_weights = message_weights
        self.message_rate = message_rate
        self.sessions = {}
        self.log_directory = "log"
        self.captured_clordids = []  # Initialize an empty list to store the captured ClOrdIDs
        self.efid_map = {}
        self.captured_clordid_side_mapping = {}

        efid_mapping = dict(config.items("EFID"))
        for comp_id, efid in efid_mapping.items():
            efid, trading_capacity = efid.split(",")
            self.efid_map[comp_id] = {"efid": efid, "trading_capacity": int(trading_capacity)}
            #print(efid,trading_capacity)


    def onCreate(self, sessionID):
        print("Session created -", sessionID.toString())
        self.sessions[sessionID] = fix.Session.lookupSession(sessionID)

    def toAdmin(self, message, sessionID):
        if message.getHeader().getField(fix.MsgType()).getString() == fix.MsgType_Logon:
            message.getHeader().setField(1408, "1.4")
            message.getHeader().setField(43, "Y")
            print("sent admin message", message.toString())
        return True

    def toApp(self, message, sessionID):
        session_id = sessionID.toString()
        msg_type_field = fix.MsgType()
        if message.getHeader().getFieldIfSet(msg_type_field):
            msg_type = msg_type_field.getValue()
        else:
            print("Message does not have a MsgType tag (35), skipping sending.")
            return
        with open(self.get_log_file(), "a") as file:
            file.write(f"Session: {session_id}\n")
            file.write(message.toString() + '\n')
        print("sent application message", message.toString())

    def fromApp(self, message, sessionID):
        session_id = sessionID.toString()
        with open(self.get_log_file(), "a") as file:
            file.write(f"Session: {session_id}\n")
            file.write(message.toString() + '\n')
        print("received application message", message.toString())
        msg_type = fix.MsgType()
        message.getHeader().getField(msg_type)

        if msg_type.getValue() == fix.MsgType_ExecutionReport:
            cl_ord_id = fix.ClOrdID()
            exec_type = fix.ExecType()
            order_id = fix.OrderID()
            side = fix.Side()
            tag_21035 = fix.StringField(21035)
            message.getField(cl_ord_id)
            message.getField(exec_type)
            message.getField(side)
            message.getField(tag_21035)
           

            # Check if the execution report matches the conditions
            if exec_type.getValue() == fix.ExecType_NEW or exec_type.getValue() == fix.ExecType_TRADE:
                #self.handle_execution_report(message)
                
                # Extract ClOrdID and OrdID from the execution report
                clordid = cl_ord_id.getString()
                side_value = side.getString()
                tag_21035_value = tag_21035.getValue()
                


                # Store the captured ClOrdID in the list
                self.captured_clordids.append(clordid)

                # Store the ClOrdID and its corresponding side in the dictionary
                self.captured_clordid_side_mapping[clordid] = {"side": side_value, "tag_21035": tag_21035_value, "session": sessionID}
                #print(self.captured_clordid_side_mapping)

    

    def fromAdmin(self, message, sessionID):
        global sessions
        session_id = sessionID.toString()
        incoming_msg_seq_num = int(message.getHeader().getField(34))
        msg_type = message.getHeader().getField(35)
        #print(message)

        if msg_type == 'A':  # Logon message
            if incoming_msg_seq_num == 1:
                print(f"Session established for {session_id}")
                sessions[session_id] = True
        elif msg_type == '5':  # Logout message
            print(f"Session disconnected for {session_id}")
            sessions[session_id] = False
        with open(self.get_log_file(), 'a') as file:
            file.write(f"Received fromAdmin message:{message.toString()}\n")


    def onLogout(self, sessionID):
        print("Logout initiated -", sessionID.toString())

    def onLogon(self, sessionID):
        print("Logon Successful -", sessionID.toString())

    def generate_clordid(self):
        return str(random.randint(100000, 999999))

    def calculate_checksum(self, message):
        checksum = sum(ord(c) for c in message) % 256
        return f"{checksum:03}"  # Ensure the CheckSum is three digits

    def get_outgoing_seq_num(self, session_id):
        session = fix.Session.lookupSession(session_id)
        if session is not None:
            return session.getExpectedSenderNum()
        return 0

    def generate_message(self, message_type, session_id):

            if message_type.lower() == "logon":
                message = fix.Message()
                message.getHeader().setField(fix.BeginString(fix.BeginString_FIXT11))
                message.getHeader().setField(fix.MsgType(fix.MsgType_Logon))

                # Set other required fields for Logon message
                message.setField(fix.EncryptMethod(0))
                message.setField(fix.HeartBtInt(30))
                message.setField(fix.ResetSeqNumFlag(False))
                message.setField(fix.DefaultApplVerID("FIX.5.0SP2"))
                message.setField(fix.DefaultCstmApplVerID("1.3"))

            elif message_type.lower() == "newordersingle":

                selected_symbol = random.choice(symbols)
                random_quantity = random.randint(1, 100)
                random_price = round(random.uniform(1, 100), 0)
              

                sender_comp_id = session_id.getSenderCompID().getString()


                efid_info = self.efid_map.get(sender_comp_id.lower())
                if efid_info is None:
                    print(f"EFID mapping not found for SenderCOmpID: {sender_comp_id}")

                efid =efid_info["efid"]
                trading_capacity = efid_info["trading_capacity"]
                print(efid,trading_capacity)

                
                message = fix.Message()
                message.getHeader().setField(fix.BeginString(session_id.getBeginString().getString()))
                message.getHeader().setField(fix.MsgType(fix.MsgType_NewOrderSingle))
                message.getHeader().setField(fix.SenderCompID(session_id.getSenderCompID().getString()))
                message.getHeader().setField(fix.TargetCompID(session_id.getTargetCompID().getString()))
                message.getHeader().setField(fix.MsgSeqNum(self.get_outgoing_seq_num(session_id)))


                # Set other required fields for NewOrderSingle message
                #message.setField(fix.Symbol(selected_symbol))
                message.setField(fix.Side(fix.Side_BUY))
                message.setField(fix.OrderQty(random_quantity))
                message.setField(fix.Price(random_price))
                message.setField(fix.OrdType(fix.OrdType_LIMIT))
                message.setField(fix.TimeInForce(fix.TimeInForce_DAY))
                message.setField(fix.ClOrdID(self.generate_clordid()))
                message.setField(fix.ExecInst("h"))
                #message.setField(1815,"6")
                message.setField(1815,str(trading_capacity))
                message.setField(21035,selected_symbol)
                sending_time = datetime.datetime.utcnow().strftime('%Y%m%d-%H:%M:%S.%f')[:-3]
                message.setField(60,sending_time)
                message.setField(77,"O")
                #message.setField(201,"1")
                #message.setField(202,"100")
                # Create the repeating group for PartyIDs
                party_group = fix44.NewOrderSingle.NoPartyIDs()
                party_group.setField(448, efid)
                party_group.setField(447, "D")
                party_group.setField(452, "1")
                message.addGroup(party_group)

                
                fix.Session.sendToTarget(message, session_id)


            elif message_type.lower() == "orderreplace":
                pass
                # ...
                # Code for other message types
                # ...

            elif message_type.lower() == "ordercancel":
                # Generate OrderCancelRequest message using captured ClOrdIDs
                if self.captured_clordids:
                    org_clordid = random.choice(self.captured_clordids)
                    clordid_info = self.captured_clordid_side_mapping.get(org_clordid)
                    if clordid_info is not None:
                        session_obj = clordid_info.get("session")
                   

                        if session_obj is not None:
                            side = clordid_info["side"]
                            tag_21035 = clordid_info["tag_21035"]
                            #side = self.captured_clordid_side_mapping.get(clordid, "UNKNOWN")
                            message = fix.Message()
                            sending_time = datetime.datetime.utcnow().strftime('%Y%m%d-%H:%M:%S.%f')[:-3]
                            message.setField(60,sending_time)
                            message.getHeader().setField(fix.BeginString(session_id.getBeginString().getString()))
                            message.getHeader().setField(fix.MsgType(fix.MsgType_OrderCancelRequest))
                            message.getHeader().setField(fix.SenderCompID(session_id.getSenderCompID().getString()))
                            message.getHeader().setField(fix.TargetCompID(session_id.getTargetCompID().getString()))
                            message.getHeader().setField(fix.MsgSeqNum(self.get_outgoing_seq_num(session_id)))
                            message.setField(fix.ClOrdID(self.generate_clordid()))

                            message.setField(fix.OrigClOrdID(org_clordid))
                            message.setField(fix.Side(side))
                            message.setField(21035, tag_21035)
                            print(message)
                            
                            # Send the Order Cancel Request on the same session as the corresponding ClOrdID
                            fix.Session.sendToTarget(message, session_obj)
                        else:
                            print(f"Error: ClOrdID Session info not found for ClOrdID={org_clordid}")
                            

                    else:
                        print(f"Error: ClOrdID info not found for ClOrdID={org_clordid}")
                        
                                

                else:
                    # Handle the case when no captured ClOrdIDs are available
                    print("No captured ClOrdIDs available for order cancel")
                    

                

            else:
                # Unknown message type
                return None

            



    def increment_outgoing_seq_num(self, session_id):
        session = fix.Session.lookupSession(fix.SessionID(session_id))
        if session is not None:
            session.incrementNextSenderMsgSeqNum()



    def send_heartbeats(self, session_id, interval):
        while sessions[session_id]:
            session = fix.Session.lookupSession(fix.SessionID(session_id))
            if session is not None:
                heartbeat_message = fix.Message()
                heartbeat_message.getHeader().setField(34, str(self.get_outgoing_seq_num(session_id)))
                fix.Session.sendToTarget(heartbeat_message, session_id)
                self.increment_outgoing_seq_num(session_id)
            time.sleep(interval)

    def generate_load(self):
        load = []
        for message_type, weight in self.message_weights.items():
            weight = int(weight)
            print(weight)
            template = self.generate_template_for_message_type(message_type)
            if template:
                load.extend([message_type.lower()] * weight)

        print(f"Generated load: {load}")
        random.shuffle(load)
        load_length = len(load)
        iterations = int(self.message_rate * self.send_duration)

        if iterations > load_length:
            quotient, remainder = divmod(iterations, load_length)
            print(f"Repeating load: {quotient} times, with remainder: {remainder}")
            load = load * quotient + load[:remainder]
        else:
            load = load[:iterations]

        return load

    def generate_template_for_message_type(self, message_type):
        if message_type.lower() == "logon":
            return "logon"
        elif message_type.lower() == "newordersingle":
            return "new_order_template"
        elif message_type.lower() == "orderreplace":
            return "order_replace_template"
        elif message_type.lower() == "ordercancel":
            return "order_cancel_template"
        else:
            return None
        
    def get_log_file(self):
        os.makedirs(self.log_directory, exist_ok=True)
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H")
        log_file_name = f"log_file_{timestamp}.log"
        print(os.path.join(self.log_directory, log_file_name))
        return os.path.join(self.log_directory, log_file_name)

    def run(self):
        settings = fix.SessionSettings(self.connection_config_file)
        application = fix.SocketInitiator(self, fix.FileStoreFactory(settings), settings)
        application.start()

        while not all(session.isLoggedOn() for session in self.sessions.values()):
            time.sleep(1)

        load = self.generate_load()

        start_time = time.time()
        message_count = 0

        while True:
            elapsed_time = time.time() - start_time

            if elapsed_time >= self.send_duration:
                break

            if message_count >= len(load):
                message_count = 0
            print(self.sessions)

            for session_id in self.sessions:
                session = self.sessions[session_id]
                print(session)

                if session is not None and session.isLoggedOn():
                    message = self.generate_message(load[message_count], session_id)
                    #fix.Session.sendToTarget(message, session_id)
                message_count += 1

            time.sleep(1)

        application.stop()


# Read configuration from config.ini
config = configparser.ConfigParser()
config.read("config.ini")

# Load configuration values
connection_config_file = config.get("LoadGenerator", "connection_config_file")
log_file = config.get("LoadGenerator", "log_file")
message_rate = float(config.get("LoadGenerator", "message_rate"))
send_duration = int(config.get("LoadGenerator", "send_duration"))
symbols = config.get("LoadGenerator", "symbols").split(",")


message_weights = dict(config.items("MessageTypes"))

# Initialize the FIX application
app = MyApplication(message_weights, message_rate)
app.connection_config_file = connection_config_file
app.send_duration = send_duration


# Run the FIX application
app.run()









FIX Load Generator ReadMe
The FIX Load Generator is a Python script designed to simulate the sending of FIX messages to a FIX server. This script utilizes the QuickFIX library to create and send various types of FIX messages to different sessions. The generated load can be customized according to message types and rates defined in the configuration file.

Prerequisites
Python 3.x
QuickFIX library (Python bindings)
Configuration file (config.ini) for the Load Generator and FIX session settings
Installation
Install Python 3.x on your system.

Install the QuickFIX library's Python bindings. You can use the following command:

Copy code
pip install quickfix
Create a configuration file named config.ini and set up the required parameters for the Load Generator and FIX session settings. An example configuration might look like this:

ini
Copy code
[LoadGenerator]
connection_config_file = FIX_session_settings.cfg
log_file = log
message_rate = 2.0
send_duration = 300
symbols = AAPL,GOOGL

[MessageTypes]
logon = 1
newordersingle = 3
ordercancel = 2

[EFID]
sender_comp_id_1 = EFID1,100
sender_comp_id_2 = EFID2,200
Usage
Open a terminal or command prompt.

Navigate to the directory containing the fix_load_generator.py script.

Run the script using the following command:

Copy code
python fix_load_generator.py
Functionality
The FIX Load Generator script performs the following actions:

Establishes FIX sessions with the counterparty based on the provided session settings.
Generates and sends various types of FIX messages, including Logon, NewOrderSingle, and OrderCancel.
Handles incoming application messages and admin messages.
Captures ClOrdIDs from Execution Reports and uses them for generating OrderCancelRequest messages.
Logs the messages sent and received in a log file within the specified log directory.
Customization
Configuration: Adjust the parameters in the config.ini file to suit your testing needs. Customize message rates, message types, session settings, symbols, and more.

Message Generation: Customize the generate_message method within the MyApplication class to modify the content and structure of the generated FIX messages.

Message Types: Extend the script by adding support for other FIX message types as needed.







import sqlite3
import xml.etree.ElementTree as ET
from multiprocessing import Pool, cpu_count
from tqdm import tqdm
import sys

xml_file = sys.argv[1]
db_name = sys.argv[2]

# Function to insert a batch of data into the database
def insert_batch(batch_data):
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()

    cursor.executemany('''INSERT INTO tradedata VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''', batch_data)

    conn.commit()
    conn.close()

# Connect to your SQLite database
conn = sqlite3.connect(db_name)
cursor = conn.cursor()

# Create a table to store the parsed data
cursor.execute('''CREATE TABLE IF NOT EXISTS tradedata (
                    RptID TEXT,
                    PrevlyRpted TEXT,
                    LastQty INTEGER,
                    LastPx REAL,
                    TrdDt DATE,
                    TxnTm TIMESTAMP,
                    TransTyp INTEGER,
                    RptTyp INTEGER,
                    TrdTyp INTEGER,
                    TrdSubTyp INTEGER,
                    BizDt DATE,
                    MtchStat INTEGER,
                    Sym TEXT,
                    CFI TEXT,
                    MMY TEXT,
                    MatDt DATE,
                    StrkPx REAL,
                    StrkCcy TEXT,
                    StrkMult REAL,
                    StrkValu REAL,
                    Mult INTEGER,
                    Exch TEXT,
                    Amt_Prem REAL,
                    Side1_Pty_ID TEXT,
                    Side1_Pty_R TEXT,
                    Side1_Pty_Sub_ID TEXT,
                    Side2_Pty_ID TEXT,
                    Side2_Pty_R TEXT,
                    Side2_Pty_Sub_ID TEXT
                 )''')

# Parse the XML data and insert records into the database
tree = ET.parse(xml_file)
root = tree.getroot()

# Define a namespace for the XML
ns = {'fixml': 'http://www.fixprotocol.org/FIXML-4-4'}

# Initialize batch data and batch size
batch_data = []
batch_size = 1000  # Adjust this to your preference

# Process each TrdCaptRpt element
for trd_capt_rpt in tqdm(root.findall('.//fixml:TrdCaptRpt', ns)):
    exch = trd_capt_rpt.find('.//fixml:Instrmt', ns).get('Exch')
    
    if exch == 'XCBO':
        # Extract data from the XML (same code as before)
        rpt_id = trd_capt_rpt.get('RptID')
        prevly_rpted = trd_capt_rpt.get('PrevlyRpted')
        last_qty = int(trd_capt_rpt.get('LastQty'))
        last_px = float(trd_capt_rpt.get('LastPx'))
        trd_dt = trd_capt_rpt.get('TrdDt')
        txn_tm = trd_capt_rpt.get('TxnTm')
        trans_typ = int(trd_capt_rpt.get('TransTyp'))
        rpt_typ = int(trd_capt_rpt.get('RptTyp'))
        trd_typ = int(trd_capt_rpt.get('TrdTyp'))
        trd_sub_typ = int(trd_capt_rpt.get('TrdSubTyp'))
        biz_dt = trd_capt_rpt.get('BizDt')
        mtch_stat = int(trd_capt_rpt.get('MtchStat'))
        
        instrmt = trd_capt_rpt.find('.//fixml:Instrmt', ns)
        sym = instrmt.get('Sym')
        cfi = instrmt.get('CFI')
        mmy = instrmt.get('MMY')
        mat_dt = instrmt.get('MatDt')
        strk_px = float(instrmt.get('StrkPx'))
        strk_ccy = instrmt.get('StrkCcy')
        strk_mult = float(instrmt.get('StrkMult'))
        strk_valu = float(instrmt.get('StrkValu'))
        mult = int(instrmt.get('Mult'))
        
        side1 = trd_capt_rpt.find('.//fixml:RptSide[@Side="1"]', ns)
        side1_pty = side1.find('fixml:Pty', ns)
        side1_pty_id = side1_pty.get('ID')
        side1_pty_r = side1_pty.get('R')
        side1_pty_sub = side1_pty.find('fixml:Sub', ns)
        side1_pty_sub_id = side1_pty_sub.get('ID') if side1_pty_sub is not None else None
        
        side2 = trd_capt_rpt.find('.//fixml:RptSide[@Side="2"]', ns)
        side2_pty = side2.find('fixml:Pty', ns)
        side2_pty_id = side2_pty.get('ID')
        side2_pty_r = side2_pty.get('R')
        side2_pty_sub = side2_pty.find('fixml:Sub', ns)
        side2_pty_sub_id = side2_pty_sub.get('ID') if side2_pty_sub is not None else None

        amt_prem = float(trd_capt_rpt.find('.//fixml:Amt[@Typ="PREM"]', ns).get('Amt'))

        # Append the data to the batch_data list
        batch_data.append((rpt_id, prevly_rpted, last_qty, last_px, trd_dt, txn_tm, trans_typ, rpt_typ, trd_typ, trd_sub_typ, biz_dt, mtch_stat,
             sym, cfi, mmy, mat_dt, strk_px, strk_ccy, strk_mult, strk_valu, mult, exch, amt_prem,
             side1_pty_id, side1_pty_r, side1_pty_sub_id, side2_pty_id, side2_pty_r, side2_pty_sub_id))

        # If batch size is reached, insert the batch into the database
        if len(batch_data) >= batch_size:
            insert_batch(batch_data)
            batch_data = []

# Insert the remaining data in the batch_data list
if batch_data:
    insert_batch(batch_data)

# Commit the changes and close the database connection
conn.commit()
conn.close()


# Extracting 'TrdSubTyp' from the XML, handling the case where it's not present
trd_sub_typ = trd_capt_rpt.get('TrdSubTyp')
if trd_sub_typ is not None:
    trd_sub_typ = int(trd_sub_typ)
else:
    trd_sub_typ = None






  # Parse the XML data and extract the required attributes
    print("Parsing the XML data...")
    tree_trade = ET.parse(xml_file)
    root_trade = tree_trade.getroot()

    # Initialize batch_data list
    batch_data = []

    # Loop through the TrdCaptRpt elements and extract the data
    print("Extracting data from the XML...")
    data_to_process = []
    for trd_capt_rpt in tqdm(root_trade.findall('.//fixml:TrdCaptRpt', ns)):
        rpt_id = trd_capt_rpt.get('RptID')
        trans_type = trd_capt_rpt.get('TransTyp')
        exch = trd_capt_rpt.find('fixml:Instrmt', ns).get('Exch')
        biz_dt = trd_capt_rpt.get('BizDt')
        cfi = trd_capt_rpt.find('fixml:Instrmt', ns).get('CFI')
        prevly_rpted = trd_capt_rpt.get('PrevlyRpted')
        rpt_typ = trd_capt_rpt.get('RptTyp')
        mtch_stat = trd_capt_rpt.get('MtchStat')
        trd_sub_typ = trd_capt_rpt.get('TrdSubTyp')
        trd_dt = trd_capt_rpt.get('TrdDt')
      

        for rpt_side in trd_capt_rpt.findall('fixml:RptSide', ns):
            side = rpt_side.get('Side')

            for pty in rpt_side.findall('fixml:Pty', ns):
                pty_id = pty.get('ID')
                pty_r = pty.get('R')
                sub_element = pty.find('fixml:Sub', ns)
                sub_id = sub_element.get('ID') if sub_element is not None else None

                # Append the parsed data to the batch_data list
                batch_data.append((int(trd_capt_rpt.get('LastQty')), side, rpt_id, pty_id, pty_r, sub_id,trans_type,exch,biz_dt,cfi,prevly_rpted,rpt_typ,mtch_stat,trd_sub_typ,trd_dt))

                if len(batch_data) >= batch_size:
                    data_to_process.append(batch_data)
                    batch_data = []

    # Insert the remaining batch data into the data_to_process
    if batch_data:
        data_to_process.append(batch_data)








