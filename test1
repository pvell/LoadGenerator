import quickfix as fix
import time
import datetime
import os


class MyApplication(fix.Application):
    def __init__(self):
        super().__init__()
        self.sessions = {}
        self.log_directory = "log"
        

    def onCreate(self, sessionID):
        print("Session created -", sessionID.toString())
        self.sessions[sessionID] = fix.Session.lookupSession(sessionID)

    def fromApp(self, message, sessionID):
        # Log the received message to the specified file
        log_file_path = self.get_log_file()
        with open(log_file_path, "a") as log_file:
            log_file.write(f"Received FIX Message: {message.toString()}\n")

    def toApp(self, message, sessionID):
        pass

    def fromAdmin(self, message, sessionID):
        pass

    def toAdmin(self, message, sessionID):
        if message.getHeader().getField(fix.MsgType()).getString() == fix.MsgType_Logon:
            message.getHeader().setField(1408, "1.3")
            message.getHeader().setField(43, "Y")
            print("sent admin message", message.toString())
        return True

    def onLogout(self, sessionID):
        print("Logout initiated -", sessionID.toString())

    def onLogon(self, sessionID):
        print("Logon Successful -", sessionID.toString())

    def get_log_file(self):
        log_directory="log"
        os.makedirs(log_directory, exist_ok=True)
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H")
        log_file_name = f"log_file_{timestamp}.log"
        print(os.path.join(self.log_directory, log_file_name))
        return os.path.join(self.log_directory, log_file_name)


    def run(self):
        settings = fix.SessionSettings(self.connection_config_file)
        application = fix.SocketInitiator(self, fix.FileStoreFactory(settings), settings)
        application.start()

        time.sleep(1)

        application.stop()


app = MyApplication()
app.connection_config_file = "acceptor.cfg"


# Run the FIX application
app.run()
