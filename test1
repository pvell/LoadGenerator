#!/bin/bash

# Check if the date argument is provided
if [ $# -ne 1 ]; then
    echo "Usage: $0 <mm-dd>"
    exit 1
fi

# Extract the provided date argument
date="$1"

# Define the directory where the files are located
base_dir="/mnt/occ/downloads"

# Construct the file name using the provided date
file_to_watch="orsa_trades_2023-$date.xml"

# Define the monitor folder
monitor_folder="$base_dir"

# Check if the file exists, wait up to 10 times
retries=10
while [ ! -e "$monitor_folder/$file_to_watch" ] && [ $retries -gt 0 ]; do
    echo "$file_to_watch not found in $monitor_folder. Waiting..."
    sleep 10  # Adjust the interval as needed
    ((retries--))
done

if [ $retries -eq 0 ]; then
    echo "File not found after 10 retries. Exiting."
    exit 1
fi

echo "Found $file_to_watch"

# Create the output directory if it doesn't exist
current_dir="/data/pvellanki"
output_dir="$date"
cd "$current_dir"  # Use the variable here
mkdir -p "$output_dir"


# Define a function to execute trades and exchange recon
execute_trades_and_recon() {
    # Add the content of run_trades.sh here
    echo "Executing run_trades.sh..."
    db_name="$date.db"

    # Step 1: Split the big XML file using split.py
    python3 split_v4.py orsa_trades_2023-"$date".xml "$date"

    # Step 2: Process each split file using xml_to_db.py
    for split_file in "$date"_*; do
        python3 xml_2_db_v5.py "$split_file" "$db_name" > log.txt &

        # Capture the PID of the last background process
        pid=$!

        # Wait for the background process to complete
        wait "$pid"

        echo "Processing of $split_file completed."
    done

    # Step 3: Group the data in the database using groupedexcel.py
    python3 groupedexcel_v5.py "$db_name"

    grouped_pid=$!
    # Wait for groupedexcel.py to complete
    wait "$grouped_pid"

    echo "Grouping of data completed."

    # Step 4: Perform further processing using furtherstreaming.py
    python3 streamfurther_v4.py "$db_name"

    streamfurther_pid=$!
    # Wait for groupedexcel.py to complete
    wait "$streamfurther_pid"

    echo "Grouping summary of data completed."

    
    echo "Executing run_exchange_recon.sh..."
    db_name="$date.db"



    # Step 1: Group the data in the database using groupedexcel.py
    python3 groupbyexchange.py "$db_name"

    groupedbyexch_pid=$!
    # Wait for groupedexcel.py to complete
    wait "$groupedbyexch_pid"

    echo "Grouping by exchange completed."

    # Step 4: Perform further processing using furtherstreaming.py
    python3 streamfurther_v5.py "$db_name"

    SF5_pid=$!
    wait "$SF5_pid"

    echo "grouping summary bu exchange completed"

    python3 exchangerecon.py "$db_name"

    exchangerecon_pid=$!
    wait "$exchangerecon_pid"

    echo "exchange recon against OCC Completed"

    python3 excel.py "$db_name"

    excel_pid=$!
    wait "$excel_pid"

    echo "Common aggregates file generated"
}

# Execute the combined trades and exchange recon function
execute_trades_and_recon

echo "Scripts executed successfully."
