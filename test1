def generate_message(message_type, session_name, options_security_id, side, price):
    new_order_single_message = None

    if message_type == 'NewOrderSingle':
        sending_time = UTCTimestampNanos(int(time.time() * 10**9))
        orig_cl_ord_id = ''.join(choices(string.ascii_letters + string.digits, k=20))
        order_qty = UINT32(value=randint(1, 10))
        ord_type = OrdType(value=OrdType.LIMIT)
        realprice = price * 10**14
        price = PriceType(realprice) 
        time_in_force = TimeInForceType(value=TimeInForceType.DAY)
        exec_inst = ExecInstType(value=ExecInstType.ParticipateDoNotInitiate)
        trading_capacity = TradingCapacityType(value=TradingCapacityType.CUSTOMER)
        efid = connection_config[session_name]['EFID']
        party_id = PartyID(efid)
        party_id_source = PartyIDSource('D')
        party_role = PartyRoleType(1)
        party_id1 = PartyID(efid)
        party_id_source1 = PartyIDSource('D')
        party_role1 = PartyRoleType(66)
        parties = [PartiesGroup(party_ids=[[party_id, party_id_source, party_role],[party_id1, party_id_source1, party_role1]])]
        no_parties_groups = 2

        new_order_single = NewOrderSingle(
            sending_time=sending_time,
            cl_ord_id=orig_cl_ord_id,
            options_security_id=options_security_id,
            side=side,
            order_qty=order_qty,
            ord_type=ord_type,
            price=price,
            time_in_force=time_in_force,
            exec_inst=exec_inst,
            trading_capacity=trading_capacity,
            parties_group=parties,
            party_entries=no_parties_groups
        )

        messageLength = 73 + (18 * (no_parties_groups))
        unsequenced_message = struct.pack('!BH', 104, messageLength)
        encoded_message = new_order_single.encode()
        message = unsequenced_message + encoded_message

        new_order_single_message = message

    else:
        raise ValueError(f"Invalid message type: {message_type}")

    return new_order_single_message


def session_worker(session_name):
    try:
        # Establish SBE TCP session for the current session name
        client_socket, session_id = establish_session(session_name)

        # Generate and send messages for NewOrderSingle for each underlier and associated option security ids
        for underlier, option_security_ids in underliers_and_options.items():
            for option_security_id in option_security_ids:
                for price_offset in range(0, 20):  # Loop over 20 price offsets to generate 10 sets of buys and sells
                    buy_price = 30 + price_offset
                    sell_price = 41 - price_offset

                    # Generate messages for both buy and sell sides
                    for side, price in [(SideType.BUY, buy_price), (SideType.SELL, sell_price)]:
                        new_order_single_message = generate_message("NewOrderSingle", session_name, option_security_id, side, price)
                        send_message(client_socket, new_order_single_message)

        # Close the TCP connection for the current session
        client_socket.close()

    except Exception as e:
        print(f"Failed to establish session for {session_name}: {str(e)}")




buy_sell_prices = []

for price_offset in range(0, 10):
    buy_price = 10 + price_offset
    sell_price = 11 - price_offset

    # Append buy and sell prices to the list
    buy_sell_prices.append((buy_price, sell_price))

print(buy_sell_prices)
